###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     10/Nov/2014  15:19:31 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Utilities\Third_Party\efsl\src\ls.c                   #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Utilities\Third_Party\efsl\src\ls.c -D                #
#                    __ARM_CORTEX_MX__ -D DEBUG -D FREE_RTOS -D               #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D HOST_MODE_ENABLED -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -D STM32_IAP -D S4051A    #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloade #
#                    r\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Boo #
#                    tloader\Obj\ --debug --endian=little --cpu=Cortex-M4 -e  #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Projects\STM32_IAP\inc #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\C #
#                    MSIS\Device\ST\STM32F4xx\Include\ -I                     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_HO #
#                    ST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\HT68F30\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Utilities\Third_Party\efsl\inc\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    fat_fs\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Project #
#                    s\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utiliti #
#                    es\mainstream_v1\stm32f411\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\it\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\ -Ohz -I  #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Lis #
#                    t\ls.lst                                                 #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Obj #
#                    \ls.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Utilities\Third_Party\efsl\src\ls.c
      1          /*****************************************************************************/
      2          /*              efs - General purpose Embedded Filesystem library              *
      3          *          --------------------- -----------------------------------          *
      4          *                                                                             *
      5          * Filename :  ls.c                                                            *
      6          * Description : This file contains functions to list the files in a directory *
      7          *                                                                             *
      8          * This program is free software; you can redistribute it and/or               *
      9          * modify it under the terms of the GNU General Public License                 *
     10          * as published by the Free Software Foundation; version 2                     *
     11          * of the License.                                                             *
     12                                                                                        *
     13          * This program is distributed in the hope that it will be useful,             *
     14          * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
     15          * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
     16          * GNU General Public License for more details.                                *
     17          *                                                                             *
     18          * As a special exception, if other files instantiate templates or             *
     19          * use macros or inline functions from this file, or you compile this          *
     20          * file and link it with other works to produce a work based on this file,     *
     21          * this file does not by itself cause the resulting work to be covered         *
     22          * by the GNU General Public License. However the source code for this         *
     23          * file must still be made available in accordance with section (3) of         *
     24          * the GNU General Public License.                                             *
     25          *                                                                             *
     26          * This exception does not invalidate any other reasons why a work based       *
     27          * on this file might be covered by the GNU General Public License.            *
     28          *                                                                             *
     29          *                                                    (c)2006 Lennart Yseboodt *
     30          *                                                    (c)2006 Michael De Nil   */
     31          /*****************************************************************************/
     32          
     33          /*****************************************************************************/
     34          
     35          #include "ls.h"
     36          /*****************************************************************************/
     37          
     38          esint8 ls_openDir(DirList *dlist,FileSystem *fs,eint8* dirname)
     39          {
     40          	FileLocation loc;
     41          	euint32 fc;
     42          	
     43          	dlist->fs=fs;
     44          	
     45          	if(fs_findFile(dlist->fs,dirname,&loc,&fc)!=2)
     46          	{
     47          		return(-1);
     48          	}
     49          	
     50          	fs_initClusterChain(dlist->fs,&(dlist->Cache),fc);
     51          	memClr(&(dlist->currentEntry),sizeof(dlist->currentEntry));
     52          	dlist->rEntry=0;
     53          	dlist->cEntry=0xFFFF;
     54          	
     55          	return(0);
     56          }
     57          /*****************************************************************************/
     58          
     59          esint8 ls_getDirEntry(DirList *dlist)
     60          {
     61          	if(dlist->Cache.FirstCluster == 1){
     62          		return(ls_getRootAreaEntry(dlist));
     63          	}else if(dlist->Cache.FirstCluster){
     64          		return(ls_getRealDirEntry(dlist));
     65          	}
     66          	return(-1);
     67          }
     68          /*****************************************************************************/
     69          
     70          esint8 ls_getNext(DirList *dlist)
     71          {
     72          	do{
     73          		if(ls_getDirEntry(dlist))return(-1);
     74          		dlist->rEntry++;
     75          	}while(!ls_isValidFileEntry(&(dlist->currentEntry)));
     76          	dlist->cEntry++;
     77          	return(0);
     78          }
     79          /*****************************************************************************/
     80          
     81          esint8 ls_getRealDirEntry(DirList *dlist)
     82          {
     83          	euint8* buf;
     84          	
     85          	if(dlist->Cache.FirstCluster<=1)return(-1);
     86          	
     87          	if(fat_LogicToDiscCluster(dlist->fs,
     88          						   &(dlist->Cache),
     89          						   (dlist->rEntry)/(16 * dlist->fs->volumeId.SectorsPerCluster))){
     90          		return(-1);
     91          	}
     92          	
     93          	buf = part_getSect(dlist->fs->part,
     94          					   fs_clusterToSector(dlist->fs,dlist->Cache.DiscCluster) + (dlist->rEntry/16)%dlist->fs->volumeId.SectorsPerCluster,
     95          				       IOM_MODE_READONLY);
     96          	
     97          	/*memCpy(buf+(dlist->rEntry%16)*32,&(dlist->currentEntry),32);*/
     98          	ls_fileEntryToDirListEntry(dlist,buf,32*(dlist->rEntry%16));
     99          	
    100          	part_relSect(dlist->fs->part,buf);
    101          	
    102          	return(0);
    103          }
    104          /*****************************************************************************/
    105          
    106          esint8 ls_getRootAreaEntry(DirList *dlist)
    107          {
    108          	euint8 *buf=0;
    109          	
    110          	if((dlist->fs->type != FAT12) && (dlist->fs->type != FAT16))return(-1);
    111          	if(dlist->rEntry>=dlist->fs->volumeId.RootEntryCount)return(-1);
    112          	
    113          	buf = part_getSect(dlist->fs->part,
    114          					   dlist->fs->FirstSectorRootDir+dlist->rEntry/16,
    115          					   IOM_MODE_READONLY);
    116          	/*memCpy(buf+32*(dlist->rEntry%16),&(dlist->currentEntry),32);*/
    117          	ls_fileEntryToDirListEntry(dlist,buf,32*(dlist->rEntry%16));
    118          	part_relSect(dlist->fs->part,buf);
    119          	return(0);
    120          }
    121          /*****************************************************************************/
    122          
    123          esint8 ls_isValidFileEntry(ListDirEntry *entry)
    124          {
    125          	if(entry->FileName[0] == 0 || entry->FileName[0] == 0xE5 || entry->FileName[0] == '.')return(0);
    126          	if((entry->Attribute&0x0F)==0x0F)return(0);
    127           	return(1);
    128          }
    129          /*****************************************************************************/
    130          
    131          void ls_fileEntryToDirListEntry(DirList *dlist, euint8* buf, euint16 offset)
    132          {
    133          	if(offset>480 || offset%32)return;
    134          	
    135          	buf+=offset;
    136          	memCpy(buf+OFFSET_DE_FILENAME,dlist->currentEntry.FileName,LIST_MAXLENFILENAME);
    137          	dlist->currentEntry.Attribute = *(buf+OFFSET_DE_ATTRIBUTE);
    138          	dlist->currentEntry.FileSize = ex_getb32(buf,OFFSET_DE_FILESIZE);
    139          }
    140          /*****************************************************************************/
    141          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  ls_fileEntryToDirListEntry
             16 -> ex_getb32
             16 -> memCpy
        0  ls_getDirEntry
              0 -> ls_getRealDirEntry
              0 -> ls_getRootAreaEntry
        8  ls_getNext
              8 -> ls_getDirEntry
              8 -> ls_isValidFileEntry
       16  ls_getRealDirEntry
             16 -> fat_LogicToDiscCluster
             16 -> fs_clusterToSector
             16 -> ls_fileEntryToDirListEntry
             16 -> part_getSect
             16 -> part_relSect
       16  ls_getRootAreaEntry
             16 -> ls_fileEntryToDirListEntry
             16 -> part_getSect
             16 -> part_relSect
        0  ls_isValidFileEntry
       24  ls_openDir
             24 -> fs_findFile
             24 -> fs_initClusterChain
             24 -> memClr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?Subroutine0
      10  ?Subroutine1
      48  ls_fileEntryToDirListEntry
      24  ls_getDirEntry
      46  ls_getNext
      84  ls_getRealDirEntry
      60  ls_getRootAreaEntry
      32  ls_isValidFileEntry
      70  ls_openDir

 
 390 bytes in section .text
 
 390 bytes of CODE memory

Errors: none
Warnings: none

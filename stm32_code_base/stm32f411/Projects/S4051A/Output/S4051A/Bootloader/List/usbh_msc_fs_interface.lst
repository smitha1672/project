###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     10/Nov/2014  15:19:44 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\STM32_USB_HOST_Library\Class\MSC\src\usbh_m #
#                    sc_fs_interface.c                                        #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\STM32_USB_HOST_Library\Class\MSC\src\usbh_m #
#                    sc_fs_interface.c -D __ARM_CORTEX_MX__ -D DEBUG -D       #
#                    FREE_RTOS -D STM32F40_41xxx -D USE_STM324xG_EVAL -D      #
#                    USE_STDPERIPH_DRIVER -D HOST_MODE_ENABLED -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -D STM32_IAP -D S4051A    #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloade #
#                    r\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Boo #
#                    tloader\Obj\ --debug --endian=little --cpu=Cortex-M4 -e  #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Projects\STM32_IAP\inc #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\C #
#                    MSIS\Device\ST\STM32F4xx\Include\ -I                     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_HO #
#                    ST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\HT68F30\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Utilities\Third_Party\efsl\inc\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    fat_fs\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Project #
#                    s\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utiliti #
#                    es\mainstream_v1\stm32f411\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\it\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\ -Ohz -I  #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Lis #
#                    t\usbh_msc_fs_interface.lst                              #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Obj #
#                    \usbh_msc_fs_interface.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\STM32_USB_HOST_Library\Class\MSC\src\usbh_msc_fs_interface.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_msc_fs_interface.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    11/29/2010
      7            * @brief   This file is the interface between File Systems and Host MSC class
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */ 
     20          
     21          /* Includes ----------------------------------------------------------------*/
     22          #include "efs.h"
     23          #include "usbh_msc_core.h"
     24          #include "usbh_msc_scsi.h"
     25          #include "usbh_msc_bot.h"
     26          #include "usbh_msc_fs_interface.h"
     27          
     28          extern USB_OTG_CORE_HANDLE          USB_OTG_Core;   //Jerry add
     29          extern USBH_HOST                    USB_Host;
     30          /** @addtogroup USBH_LIB
     31            * @{
     32            */
     33          
     34          /** @addtogroup USBH_CLASS
     35            * @{
     36            */
     37          
     38          /** @addtogroup USBH_MSC_CLASS
     39            * @{
     40            */
     41            
     42          /** @defgroup USBH_MSC_FS_INTERFACE 
     43            * @brief This file is the interface between EFSL ans Host mass-storage class
     44            * @{
     45            */ 
     46          
     47          /** @defgroup USBH_MSC_FS_INTERFACE_Private_TypesDefinitions
     48            * @{
     49            */ 
     50          /**
     51            * @}
     52            */ 
     53          
     54          
     55          /** @defgroup USBH_MSC_FS_INTERFACE_Private_Defines
     56            * @{
     57            */ 
     58          /**
     59            * @}
     60            */ 
     61          
     62          
     63          /** @defgroup USBH_MSC_FS_INTERFACE_Private_Macros
     64            * @{
     65            */ 
     66          /**
     67            * @}
     68            */ 
     69          
     70          
     71          /** @defgroup USBH_MSC_FS_INTERFACE_Private_Variables
     72            * @{
     73            */ 
     74          
     75          /**
     76            * @}
     77            */ 
     78          
     79          
     80          /** @defgroup USBH_MSC_FS_INTERFACE_Private_FunctionPrototypes
     81            * @{
     82            */ 
     83          /**
     84            * @}
     85            */ 
     86          
     87          
     88          /** @defgroup USBH_MSC_FS_INTERFACE_Private_Functions
     89            * @{
     90            */ 
     91          
     92          
     93          /**
     94            * @brief  if_initInterface
     95            *         Initialises the EFSL interface parameters
     96            * @param  file : File pointer
     97            * @param  opts : Optional Parameter. Not used here.
     98            * @retval Status : 0 -> Pass, -1 -> Fail
     99            */
    100          int8_t if_initInterface(hwInterface* file, char* opts)
    101          {
    102            //if(HCD_IsDeviceConnected(&USB_OTG_FS_dev))
    103            if(HCD_IsDeviceConnected(&USB_OTG_Core))  //Jerry change
    104            {  
    105                  file->sectorCount = USBH_MSC_Param.MSCapacity; 
    106            }
    107            return(EFS_PASS);
    108          }
    109          
    110          
    111          /**
    112            * @brief  if_readBuf
    113            *         This function is responsible to read a sector from the disc and 
    114            *         store it in a user supplied buffer.
    115            * @param  file : File pointer
    116            * @param  address : An LBA address, relative to the beginning of the disc
    117            * @param  buf : Buffer where the data will be stored after reading
    118            * @retval Status : 0 -> Pass, -1 -> Fail
    119            */
    120          
    121          int8_t if_readBuf(hwInterface* file,uint32_t address,uint8_t* buf)
    122          {
    123            int8_t status = EFS_ERROR;
    124            //if(HCD_IsDeviceConnected(&USB_OTG_FS_dev))
    125            if(HCD_IsDeviceConnected(&USB_OTG_Core))  //Jerry change  
    126            {  
    127              
    128              do
    129              {
    130                status = USBH_MSC_Read10(&USB_OTG_Core,buf,address,512);
    131                //USBH_MSC_HandleBOTXfer();
    132                USBH_MSC_HandleBOTXfer(&USB_OTG_Core ,&USB_Host);
    133              }
    134              while((status == USBH_MSC_BUSY ) && (HCD_IsDeviceConnected(&USB_OTG_Core)));//(HCD_IsDeviceConnected(&USB_OTG_FS_dev)));
    135              
    136            }
    137            
    138            return(status);
    139            
    140          }
    141          
    142          
    143          /**
    144            * @brief  if_writeBuf
    145            *         This function is responsible to write a sector of data on the disc  
    146            *         from a user supplied buffer.
    147            * @param  file : File pointer
    148            * @param  address : An LBA address, relative to the beginning of the disc
    149            * @param  buf : Buffer from where the data will be taken to write
    150            * @retval Status : 0 -> Pass, -1 -> Fail
    151            */
    152                   
    153          int8_t if_writeBuf(hwInterface* file,uint32_t address,uint8_t* buf)
    154          {
    155            int8_t status = EFS_ERROR;
    156            
    157            //if(HCD_IsDeviceConnected(&USB_OTG_FS_dev))
    158            if(HCD_IsDeviceConnected(&USB_OTG_Core))  //Jerry change  
    159            {  
    160              do
    161              {
    162                status = USBH_MSC_Write10(&USB_OTG_Core,buf,address,USBH_MSC_PAGE_LENGTH);
    163                //USBH_MSC_HandleBOTXfer();
    164                USBH_MSC_HandleBOTXfer(&USB_OTG_Core, &USB_Host);
    165              }
    166              while((status == USBH_MSC_BUSY ) && \
    167                //(HCD_IsDeviceConnected(&USB_OTG_FS_dev)));
    168                (HCD_IsDeviceConnected(&USB_OTG_Core)));  //Jerry change
    169            }
    170            return(status);
    171          }
    172          
    173          
    174          /**
    175            * @brief  if_TestUnitReady
    176            *         This function is responsible to issue a Test Unit Ready command.User
    177            *         can issue a Test Unit Ready command by calling this function.
    178            * @param  None
    179            * @retval Status : 0 -> Pass, -1 -> Fail
    180            */
    181          
    182          int8_t if_TestUnitReady(void)
    183          {
    184            int8_t status = EFS_ERROR;
    185            //if(HCD_IsDeviceConnected(&USB_OTG_FS_dev))
    186            if(HCD_IsDeviceConnected(&USB_OTG_Core))  //Jerry change  
    187            {  
    188              do
    189              {
    190                status = USBH_MSC_TestUnitReady(&USB_OTG_Core);//USBH_MSC_TestUnitReady();
    191                //USBH_MSC_HandleBOTXfer();
    192                USBH_MSC_HandleBOTXfer(&USB_OTG_Core, &USB_Host);
    193              }
    194              while((status == USBH_MSC_BUSY ) && \
    195                //(HCD_IsDeviceConnected(&USB_OTG_FS_dev)));
    196                (HCD_IsDeviceConnected(&USB_OTG_Core)));  //Jerry change
    197            }
    198            
    199            return(status);
    200            
    201          }
    202          
    203          
    204          /**
    205            * @brief  if_RequestSense
    206            *         This function is responsible to issue a RequestSense command. User
    207            *         can issue a RequestSense command by calling this function.
    208            * @param  None
    209            * @retval Status : 0 -> Pass, -1 -> Fail
    210            */
    211          
    212          int8_t if_RequestSense(void)
    213          {
    214            int8_t status = EFS_ERROR;
    215            //if(HCD_IsDeviceConnected(&USB_OTG_FS_dev))
    216            if(HCD_IsDeviceConnected(&USB_OTG_Core))  //Jerry change  
    217            {  
    218              
    219              do
    220              {
    221                status = USBH_MSC_RequestSense(&USB_OTG_Core);
    222                //USBH_MSC_HandleBOTXfer();
    223                USBH_MSC_HandleBOTXfer(&USB_OTG_Core, &USB_Host);
    224              }
    225              while((status == USBH_MSC_BUSY ) && \
    226                //(HCD_IsDeviceConnected(&USB_OTG_FS_dev)));
    227                (HCD_IsDeviceConnected(&USB_OTG_Core)));  //Jerry change
    228            }
    229            
    230            return(status);
    231            
    232          }
    233          
    234          
    235          /**
    236            * @}
    237            */ 
    238          
    239          /**
    240            * @}
    241            */
    242          
    243          /**
    244            * @}
    245            */ 
    246          
    247          /**
    248            * @}
    249            */ 
    250          
    251          /**
    252            * @}
    253            */
    254          
    255          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/
    256          
    257          
    258          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  if_RequestSense
             16 -> HCD_IsDeviceConnected
             16 -> USBH_MSC_HandleBOTXfer
             16 -> USBH_MSC_RequestSense
       16  if_TestUnitReady
             16 -> HCD_IsDeviceConnected
             16 -> USBH_MSC_HandleBOTXfer
             16 -> USBH_MSC_TestUnitReady
        8  if_initInterface
              8 -> HCD_IsDeviceConnected
       24  if_readBuf
             24 -> HCD_IsDeviceConnected
             24 -> USBH_MSC_HandleBOTXfer
             24 -> USBH_MSC_Read10
       24  if_writeBuf
             24 -> HCD_IsDeviceConnected
             24 -> USBH_MSC_HandleBOTXfer
             24 -> USBH_MSC_Write10


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
      16  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
      12  ?Subroutine4
      38  if_RequestSense
      38  if_TestUnitReady
      22  if_initInterface
      40  if_readBuf
      40  if_writeBuf

 
 250 bytes in section .text
 
 250 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     10/Nov/2014  15:19:25 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Utilities\Third_Party\efsl\src\extract.c              #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Utilities\Third_Party\efsl\src\extract.c -D           #
#                    __ARM_CORTEX_MX__ -D DEBUG -D FREE_RTOS -D               #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D HOST_MODE_ENABLED -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -D STM32_IAP -D S4051A    #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloade #
#                    r\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Boo #
#                    tloader\Obj\ --debug --endian=little --cpu=Cortex-M4 -e  #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Projects\STM32_IAP\inc #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\C #
#                    MSIS\Device\ST\STM32F4xx\Include\ -I                     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_HO #
#                    ST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\HT68F30\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Utilities\Third_Party\efsl\inc\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    fat_fs\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Project #
#                    s\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utiliti #
#                    es\mainstream_v1\stm32f411\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\it\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\ -Ohz -I  #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Lis #
#                    t\extract.lst                                            #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Obj #
#                    \extract.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Utilities\Third_Party\efsl\src\extract.c
      1          /*****************************************************************************/
      2          /*              efs - General purpose Embedded Filesystem library              *
      3          *          --------------------- -----------------------------------          *
      4          *                                                                             *
      5          * Filename :  extract.c                                                       *
      6          * Description : This file contains functions to copy structures that get      *
      7          *               corrupted when using direct memory copy                       *
      8          *                                                                             *
      9          * This program is free software; you can redistribute it and/or               *
     10          * modify it under the terms of the GNU General Public License                 *
     11          * as published by the Free Software Foundation; version 2                     *
     12          * of the License.                                                             *
     13                                                                                        *
     14          * This program is distributed in the hope that it will be useful,             *
     15          * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
     16          * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
     17          * GNU General Public License for more details.                                *
     18          *                                                                             *
     19          * As a special exception, if other files instantiate templates or             *
     20          * use macros or inline functions from this file, or you compile this          *
     21          * file and link it with other works to produce a work based on this file,     *
     22          * this file does not by itself cause the resulting work to be covered         *
     23          * by the GNU General Public License. However the source code for this         *
     24          * file must still be made available in accordance with section (3) of         *
     25          * the GNU General Public License.                                             *
     26          *                                                                             *
     27          * This exception does not invalidate any other reasons why a work based       *
     28          * on this file might be covered by the GNU General Public License.            *
     29          *                                                                             *
     30          *                                                    (c)2006 Lennart Yseboodt *
     31          *                                                    (c)2006 Michael De Nil   */
     32          /*****************************************************************************/
     33          
     34          /*****************************************************************************/
     35          
     36          #include "extract.h"
     37          /*****************************************************************************/
     38          
     39          /*****************************************************************************/
     40          #ifdef BYTE_ALIGNMENT
     41          /*****************************************************************************/
     42          
     43          euint16 ex_getb16(euint8* buf,euint32 offset)
     44          {
     45          	return(ltb_end16(*((euint16*)(buf+offset))));
     46          }
     47          /*****************************************************************************/
     48          
     49          euint32 ex_getb32(euint8* buf,euint32 offset)
     50          {
     51          	return(ltb_end32(*((euint32*)(buf+offset))));
     52          }
     53          /*****************************************************************************/
     54          
     55          void ex_setb16(euint8* buf,euint32 offset,euint16 data)
     56          {
     57          	*((euint16*)(buf+offset)) = btl_end16(data);
     58          }
     59          /*****************************************************************************/
     60          
     61          void ex_setb32(euint8* buf,euint32 offset,euint32 data)
     62          {
     63          	*((euint32*)(buf+offset)) = btl_end32(data);
     64          }
     65          /*****************************************************************************/
     66          
     67          void ex_getPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
     68          {
     69          	*pf=*((PartitionField*)(buf+offset));
     70          }
     71          /*****************************************************************************/
     72          
     73          void ex_setPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
     74          {
     75          
     76          }
     77          /*****************************************************************************/
     78          
     79          
     80          
     81          
     82          /*****************************************************************************/
     83          /*****************************************************************************/
     84          #else
     85          /*****************************************************************************/
     86          /*****************************************************************************/
     87          
     88          
     89          
     90          euint16 ex_getb16(euint8* buf,euint32 offset)
     91          {
     92          	return(ltb_end16(((*(buf+offset+1))<<8) + ((*(buf+offset+0))<<0)));
     93          }
     94          /*****************************************************************************/
     95          
     96          euint32 ex_getb32(euint8* buf,euint32 offset)
     97          {
     98          	return(ltb_end32(((euint32)buf[offset+3]<<24)+
     99          	      ((euint32)buf[offset+2]<<16)+
    100          	      ((euint32)buf[offset+1]<<8)+
    101          	      ((euint32)buf[offset+0]<<0)));
    102          }
    103          /*****************************************************************************/
    104          
    105          void ex_setb16(euint8* buf,euint32 offset,euint16 data)
    106          {
    107          #ifdef BIG_ENDIAN
    108          	*(buf+offset+1) = data>>0;
    109          	*(buf+offset+0) = data>>8;
    110          #else
    111          	*(buf+offset+0) = data>>0;
    112          	*(buf+offset+1) = data>>8;
    113          #endif
    114          }
    115          /*****************************************************************************/
    116          
    117          void ex_setb32(euint8* buf,euint32 offset,euint32 data)
    118          {
    119          #ifdef BIG_ENDIAN
    120          	*(buf+offset+3) = data>> 0;
    121          	*(buf+offset+2) = data>> 8;
    122          	*(buf+offset+1) = data>>16;
    123          	*(buf+offset+0) = data>>24;
    124          #else
    125          	*(buf+offset+0) = data>> 0;
    126          	*(buf+offset+1) = data>> 8;
    127          	*(buf+offset+2) = data>>16;
    128          	*(buf+offset+3) = data>>24;
    129          #endif
    130          }
    131          /*****************************************************************************/
    132          
    133          void ex_getPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
    134          {
    135          	pf->bootFlag       = *(buf + offset);
    136          	pf->CHS_begin[0]   = *(buf + offset + 1);
    137          	pf->CHS_begin[1]   = *(buf + offset + 2);
    138          	pf->CHS_begin[2]   = *(buf + offset + 3);
    139          	pf->type           = *(buf + offset + 4);
    140          	pf->CHS_end[0]     = *(buf + offset + 5);
    141          	pf->CHS_end[1]     = *(buf + offset + 6);
    142          	pf->CHS_end[2]     = *(buf + offset + 7);
    143          	pf->LBA_begin      = ex_getb32(buf + offset,8);
    144          	pf->numSectors     = ex_getb32(buf + offset,12);
    145          }
    146          /*****************************************************************************/
    147          
    148          void ex_setPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
    149          {
    150          
    151          }
    152          /*****************************************************************************/
    153          
    154          
    155          
    156          /*****************************************************************************/
    157          #endif
    158          /*****************************************************************************/
    159          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  ex_getPartitionField
             16 -> ex_getb32
        0  ex_getb16
        8  ex_getb32
        0  ex_setPartitionField
        0  ex_setb16
        0  ex_setb32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      60  ex_getPartitionField
      14  ex_getb16
      26  ex_getb32
       2  ex_setPartitionField
      10  ex_setb16
      18  ex_setb32

 
 130 bytes in section .text
 
 130 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     10/Nov/2014  15:19:42 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\STM32_USB_HOST_Library\Core\src\usbh_hcs.c  #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\STM32_USB_HOST_Library\Core\src\usbh_hcs.c  #
#                    -D __ARM_CORTEX_MX__ -D DEBUG -D FREE_RTOS -D            #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D HOST_MODE_ENABLED -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -D STM32_IAP -D S4051A    #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloade #
#                    r\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Boo #
#                    tloader\Obj\ --debug --endian=little --cpu=Cortex-M4 -e  #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Projects\STM32_IAP\inc #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\C #
#                    MSIS\Device\ST\STM32F4xx\Include\ -I                     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_HO #
#                    ST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\HT68F30\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Utilities\Third_Party\efsl\inc\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    fat_fs\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Project #
#                    s\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utiliti #
#                    es\mainstream_v1\stm32f411\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\it\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\ -Ohz -I  #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Lis #
#                    t\usbh_hcs.lst                                           #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Bootloader\Obj #
#                    \usbh_hcs.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\STM32_USB_HOST_Library\Core\src\usbh_hcs.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_hcs.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    19-March-2012
      7            * @brief   This file implements functions for opening and closing host channels
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */ 
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usbh_hcs.h"
     30          
     31          /** @addtogroup USBH_LIB
     32            * @{
     33            */
     34          
     35          /** @addtogroup USBH_LIB_CORE
     36          * @{
     37          */
     38            
     39          /** @defgroup USBH_HCS
     40            * @brief This file includes opening and closing host channels
     41            * @{
     42            */ 
     43          
     44          /** @defgroup USBH_HCS_Private_Defines
     45            * @{
     46            */ 
     47          /**
     48            * @}
     49            */ 
     50          
     51          /** @defgroup USBH_HCS_Private_TypesDefinitions
     52            * @{
     53            */ 
     54          /**
     55            * @}
     56            */ 
     57          
     58          
     59          /** @defgroup USBH_HCS_Private_Macros
     60            * @{
     61            */ 
     62          /**
     63            * @}
     64            */ 
     65          
     66          
     67          /** @defgroup USBH_HCS_Private_Variables
     68            * @{
     69            */ 
     70          
     71          /**
     72            * @}
     73            */ 
     74          
     75          
     76          /** @defgroup USBH_HCS_Private_FunctionPrototypes
     77            * @{
     78            */ 
     79          static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev);
     80          /**
     81            * @}
     82            */ 
     83          
     84          
     85          /** @defgroup USBH_HCS_Private_Functions
     86            * @{
     87            */ 
     88          
     89          
     90          
     91          /**
     92            * @brief  USBH_Open_Channel
     93            *         Open a  pipe
     94            * @param  pdev : Selected device
     95            * @param  hc_num: Host channel Number
     96            * @param  dev_address: USB Device address allocated to attached device
     97            * @param  speed : USB device speed (Full/Low)
     98            * @param  ep_type: end point type (Bulk/int/ctl)
     99            * @param  mps: max pkt size
    100            * @retval Status
    101            */
    102          uint8_t USBH_Open_Channel  (USB_OTG_CORE_HANDLE *pdev,
    103                                      uint8_t hc_num,
    104                                      uint8_t dev_address,
    105                                      uint8_t speed,
    106                                      uint8_t ep_type,
    107                                      uint16_t mps)
    108          {
    109          
    110            pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
    111            pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
    112            pdev->host.hc[hc_num].dev_addr = dev_address;  
    113            pdev->host.hc[hc_num].ep_type = ep_type;  
    114            pdev->host.hc[hc_num].max_packet = mps; 
    115            pdev->host.hc[hc_num].speed = speed; 
    116            pdev->host.hc[hc_num].toggle_in = 0; 
    117            pdev->host.hc[hc_num].toggle_out = 0;   
    118            if(speed == HPRT0_PRTSPD_HIGH_SPEED)
    119            {
    120              pdev->host.hc[hc_num].do_ping = 1;
    121            }
    122            
    123            USB_OTG_HC_Init(pdev, hc_num) ;
    124            
    125            return HC_OK; 
    126          
    127          }
    128          
    129          /**
    130            * @brief  USBH_Modify_Channel
    131            *         Modify a  pipe
    132            * @param  pdev : Selected device
    133            * @param  hc_num: Host channel Number
    134            * @param  dev_address: USB Device address allocated to attached device
    135            * @param  speed : USB device speed (Full/Low)
    136            * @param  ep_type: end point type (Bulk/int/ctl)
    137            * @param  mps: max pkt size
    138            * @retval Status
    139            */
    140          uint8_t USBH_Modify_Channel (USB_OTG_CORE_HANDLE *pdev,
    141                                      uint8_t hc_num,
    142                                      uint8_t dev_address,
    143                                      uint8_t speed,
    144                                      uint8_t ep_type,
    145                                      uint16_t mps)
    146          {
    147            
    148            if(dev_address != 0)
    149            {
    150              pdev->host.hc[hc_num].dev_addr = dev_address;  
    151            }
    152            
    153            if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
    154            {
    155              pdev->host.hc[hc_num].max_packet = mps; 
    156            }
    157            
    158            if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
    159            {
    160              pdev->host.hc[hc_num].speed = speed; 
    161            }
    162            
    163            USB_OTG_HC_Init(pdev, hc_num);
    164            return HC_OK; 
    165          
    166          }
    167          
    168          /**
    169            * @brief  USBH_Alloc_Channel
    170            *         Allocate a new channel for the pipe
    171            * @param  ep_addr: End point for which the channel to be allocated
    172            * @retval hc_num: Host channel number
    173            */
    174          uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
    175          {
    176            uint16_t hc_num;
    177            
    178            hc_num =  USBH_GetFreeChannel(pdev);
    179          
    180            if (hc_num != HC_ERROR)
    181            {
    182          	pdev->host.channel[hc_num] = HC_USED | ep_addr;
    183            }
    184            return hc_num;
    185          }
    186          
    187          /**
    188            * @brief  USBH_Free_Pipe
    189            *         Free the USB host channel
    190            * @param  idx: Channel number to be freed 
    191            * @retval Status
    192            */
    193          uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
    194          {
    195             if(idx < HC_MAX)
    196             {
    197          	 pdev->host.channel[idx] &= HC_USED_MASK;
    198             }
    199             return USBH_OK;
    200          }
    201          
    202          
    203          /**
    204            * @brief  USBH_DeAllocate_AllChannel
    205            *         Free all USB host channel
    206          * @param  pdev : core instance
    207            * @retval Status
    208            */
    209          uint8_t USBH_DeAllocate_AllChannel  (USB_OTG_CORE_HANDLE *pdev)
    210          {
    211             uint8_t idx;
    212             
    213             for (idx = 2; idx < HC_MAX ; idx ++)
    214             {
    215          	 pdev->host.channel[idx] = 0;
    216             }
    217             return USBH_OK;
    218          }
    219          
    220          /**
    221            * @brief  USBH_GetFreeChannel
    222            *         Get a free channel number for allocation to a device endpoint
    223            * @param  None
    224            * @retval idx: Free Channel number
    225            */
    226          static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
    227          {
    228            uint8_t idx = 0;
    229            
    230            for (idx = 0 ; idx < HC_MAX ; idx++)
    231            {
    232          	if ((pdev->host.channel[idx] & HC_USED) == 0)
    233          	{
    234          	   return idx;
    235          	} 
    236            }
    237            return HC_ERROR;
    238          }
    239          
    240          
    241          /**
    242          * @}
    243          */ 
    244          
    245          /**
    246          * @}
    247          */ 
    248          
    249          /**
    250          * @}
    251          */
    252          
    253          /**
    254          * @}
    255          */ 
    256          
    257          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    258          
    259          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  USBH_Alloc_Channel
        0  USBH_DeAllocate_AllChannel
        0  USBH_Free_Channel
       16  USBH_Modify_Channel
             16 -> USB_OTG_HC_Init
       24  USBH_Open_Channel
             24 -> USB_OTG_HC_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      52  USBH_Alloc_Channel
      22  USBH_DeAllocate_AllChannel
      24  USBH_Free_Channel
      48  USBH_Modify_Channel
      76  USBH_Open_Channel

 
 222 bytes in section .text
 
 222 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     10/Nov/2014  12:52:02 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Utilities\Third_Party\efsl\src\mkfs.c                 #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Utilities\Third_Party\efsl\src\mkfs.c -D              #
#                    __ARM_CORTEX_MX__ -D DEBUG -D FREE_RTOS -D               #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D HOST_MODE_ENABLED -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -D STM32_IAP -D S4051A    #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Release\L #
#                    ist\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Releas #
#                    e\Obj\ --debug --endian=little --cpu=Cortex-M4 -e        #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Projects\STM32_IAP\inc #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\C #
#                    MSIS\Device\ST\STM32F4xx\Include\ -I                     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_HO #
#                    ST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\HT68F30\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Utilities\Third_Party\efsl\inc\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    fat_fs\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Project #
#                    s\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utiliti #
#                    es\mainstream_v1\stm32f411\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\it\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\ -Ohz -I  #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Release\List\m #
#                    kfs.lst                                                  #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Release\Obj\mk #
#                    fs.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Utilities\Third_Party\efsl\src\mkfs.c
      1          /*****************************************************************************/
      2          /*              efs - General purpose Embedded Filesystem library              *
      3          *          --------------------- -----------------------------------          *
      4          *                                                                             *
      5          * Filename : mkfs.c                                                           *
      6          * Description : These functions are used for creating an empty filesystem.    *
      7          *                                                                             *
      8          * This program is free software; you can redistribute it and/or               *
      9          * modify it under the terms of the GNU General Public License                 *
     10          * as published by the Free Software Foundation; version 2                     *
     11          * of the License.                                                             *
     12                                                                                        *
     13          * This program is distributed in the hope that it will be useful,             *
     14          * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
     15          * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
     16          * GNU General Public License for more details.                                *
     17          *                                                                             *
     18          * As a special exception, if other files instantiate templates or             *
     19          * use macros or inline functions from this file, or you compile this          *
     20          * file and link it with other works to produce a work based on this file,     *
     21          * this file does not by itself cause the resulting work to be covered         *
     22          * by the GNU General Public License. However the source code for this         *
     23          * file must still be made available in accordance with section (3) of         *
     24          * the GNU General Public License.                                             *
     25          *                                                                             *
     26          * This exception does not invalidate any other reasons why a work based       *
     27          * on this file might be covered by the GNU General Public License.            *
     28          *                                                                             *
     29          *                                                    (c)2006 Lennart Yseboodt *
     30          *                                                    (c)2006 Michael De Nil   */
     31          /*****************************************************************************/
     32          
     33          /*****************************************************************************/
     34          
     35          #include "mkfs.h"
     36          /*****************************************************************************/
     37          
     38          signed short mkfs_makevfat(Partition *part)
     39          {
     40          	unsigned long c,cc,ret;
     41          	unsigned long ns,fs,ds,dc;
     42          	unsigned char buf[512];
     43          	
     44          	ns=part->disc->partitions[part->activePartition].numSectors;
     45          	
     46          	if( ns < 66581 ){
     47          		//DBG((TXT("This is not possible due to insufficient sectors. Sorry\n")));
     48          		return(MKFS_ERR_TOOLITTLESECTORS);
     49          	}
     50          	
     51          	ret=0;
     52          	
     53          	for(c=1<<6;c>=1;c>>=1){
     54          		
     55          		/* First guess */
     56          		ds = ns - 32;
     57          		fs = ((ds/c)+127)/128;
     58          		/* ds was guess too large, so fs is too large now too. */
     59          		
     60          		for(cc=0;cc<2;cc++){
     61          		
     62          			/* Round 2, error round */
     63          			ds = ns - 32 - 2*fs;
     64          			fs = ((ds/c)+127)/128; 
     65          			/* Since fs was too large, ds became too small. So the fs for this small ds is too small as well. */
     66          			
     67          			/* Round 3, correction round */
     68          			ds = ns - 32 - 2*fs;
     69          			fs = ((ds/c)+127)/128; 
     70          			/* The fs was too small, so ds was too large. The calculated fs should be slightly too large. */
     71          		
     72          		}
     73          		
     74          		/* Round 4, finalise */
     75          		ds = ns - 32 - 2*fs; 
     76          
     77          		dc = ds / c;
     78          		if(ret<(fs*128-dc)/128)ret=(fs*128-dc)/128;
     79          		
     80          		/* Check if with current setting we have a valid fat ? */
     81          		
     82          		if(dc >= 65525 + 16){
     83          			break;
     84          		}
     85          	}
     86          
     87          	/* Generate BPB */
     88          	memClr(buf,512);
     89          	
     90          	/* Boot code */
     91          	*(buf+0)=0xE9;	*(buf+1)=0x00;	*(buf+2)=0x00; /* RESET */
     92          	
     93          	/* OEM name */
     94          	memCpy("DSCOSMSH",buf+3,8);
     95          	
     96          	/* Bytes/Sector */
     97          	*((unsigned short*)(buf+11)) = 512;
     98          	
     99          	/* Sectors/Cluster */
    100          	*(buf+13) = c;
    101          	
    102          	/* Reserved Sectors */
    103          	*((unsigned short*)(buf+14)) = 32;
    104          	
    105          	/* Number of FAT Tables */
    106          	*(buf+16) = 2;
    107          	
    108          	/* RootEntryCount */
    109          	*((unsigned short*)(buf+17)) = 0;
    110          	
    111          	/* Total Sector Count __16 */
    112          	*((unsigned short*)(buf+19)) = 0;
    113          	
    114          	/* Media (crap) */
    115          	*(buf+21) = 0xF8;
    116          	
    117          	/* FAT size 16 */
    118          	*((unsigned short*)(buf+22)) = 0;
    119          	
    120          	/* Total Sector Count __32 */
    121          	*((unsigned long*)(buf+32)) = ns;
    122          	
    123          	/* Fat Size 32 */
    124          	*((unsigned long*)(buf+36)) = fs;
    125          	
    126          	/* First Cluster Root Dir */
    127          	*((unsigned long*)(buf+44)) = 2;
    128          	
    129          	/* VolumeID */
    130          	*((unsigned long*)(buf+67)) = 0x13371337;
    131          	
    132          	/* Volume Label */
    133          	memCpy("DISCOSMASH!",buf+71,11);
    134          	
    135          	/* Filesystemtype */
    136          	memCpy("FAT32   ",buf+82,8);
    137          	
    138          	/* Magic */
    139          	*(buf+510) = 0x55; *(buf+511) = 0xAA;
    140          	
    141          	part_writeBuf(part,0,buf);
    142          	
    143          	memClr(buf,512);
    144          	for(c=32;c<(32+2*fs);c++){
    145          		part_writeBuf(part,c,buf);
    146          	}
    147          	*(((unsigned long*)buf)  )=0x0FFFFFF8;
    148          	*(((unsigned long*)buf)+1)=0x0FFFFFFF;
    149          	*(((unsigned long*)buf)+2)=0x0FFFFFF8;
    150          	part_writeBuf(part,32,buf);
    151          	part_writeBuf(part,32+fs,buf);
    152          	
    153          	return(0);
    154          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      544  mkfs_makevfat
             544 -> memClr
             544 -> memCpy
             544 -> part_writeBuf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "DISCOSMASH!">
      12  ?<Constant "DSCOSMSH">
      12  ?<Constant "FAT32   ">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      26  ?Subroutine0
      10  ?Subroutine1
       6  ?Subroutine2
     290  mkfs_makevfat

 
 384 bytes in section .text
 
 384 bytes of CODE memory

Errors: none
Warnings: none

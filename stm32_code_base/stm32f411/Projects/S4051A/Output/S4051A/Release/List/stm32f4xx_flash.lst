###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     10/Nov/2014  12:52:05 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_fl #
#                    ash.c                                                    #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_fl #
#                    ash.c -D __ARM_CORTEX_MX__ -D DEBUG -D FREE_RTOS -D      #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D HOST_MODE_ENABLED -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -D STM32_IAP -D S4051A    #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Release\L #
#                    ist\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Releas #
#                    e\Obj\ --debug --endian=little --cpu=Cortex-M4 -e        #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Projects\STM32_IAP\inc #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\C #
#                    MSIS\Device\ST\STM32F4xx\Include\ -I                     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_HO #
#                    ST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\HT68F30\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Utilities\Third_Party\efsl\inc\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    fat_fs\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Project #
#                    s\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utiliti #
#                    es\mainstream_v1\stm32f411\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\it\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\I #
#                    nclude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\APP_SRC\ -Ohz -I  #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Release\List\s #
#                    tm32f4xx_flash.lst                                       #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Release\Obj\st #
#                    m32f4xx_flash.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_flash.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_flash.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    08-November-2013
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the FLASH peripheral:
      9            *            + FLASH Interface configuration
     10            *            + FLASH Memory Programming
     11            *            + Option Bytes Programming
     12            *            + Interrupts and flags management
     13            *  
     14           @verbatim    
     15           ===============================================================================
     16                                  ##### How to use this driver #####
     17           ===============================================================================
     18              [..]                             
     19                This driver provides functions to configure and program the FLASH memory 
     20                of all STM32F4xx devices. These functions are split in 4 groups:
     21             
     22                (#) FLASH Interface configuration functions: this group includes the
     23                    management of the following features:
     24                  (++) Set the latency
     25                  (++) Enable/Disable the prefetch buffer
     26                  (++) Enable/Disable the Instruction cache and the Data cache
     27                  (++) Reset the Instruction cache and the Data cache
     28              
     29                (#) FLASH Memory Programming functions: this group includes all needed
     30                    functions to erase and program the main memory:
     31                  (++) Lock and Unlock the FLASH interface
     32                  (++) Erase function: Erase sector, erase all sectors
     33                  (++) Program functions: byte, half word, word and double word
     34              
     35                (#) Option Bytes Programming functions: this group includes all needed
     36                    functions to manage the Option Bytes:
     37                  (++) Set/Reset the write protection
     38                  (++) Set the Read protection Level
     39                  (++) Set the BOR level
     40                  (++) Program the user Option Bytes
     41                  (++) Launch the Option Bytes loader
     42              
     43                (#) Interrupts and flags management functions: this group 
     44                    includes all needed functions to:
     45                  (++) Enable/Disable the FLASH interrupt sources
     46                  (++) Get flags status
     47                  (++) Clear flags
     48                  (++) Get FLASH operation status
     49                  (++) Wait for last FLASH operation   
     50           @endverbatim                      
     51            ******************************************************************************
     52            * @attention
     53            *
     54            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     55            *
     56            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     57            * You may not use this file except in compliance with the License.
     58            * You may obtain a copy of the License at:
     59            *
     60            *        http://www.st.com/software_license_agreement_liberty_v2
     61            *
     62            * Unless required by applicable law or agreed to in writing, software 
     63            * distributed under the License is distributed on an "AS IS" BASIS, 
     64            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     65            * See the License for the specific language governing permissions and
     66            * limitations under the License.
     67            *
     68            ******************************************************************************
     69            */
     70          
     71          /* Includes ------------------------------------------------------------------*/
     72          #include "stm32f4xx_flash.h"
     73          
     74          /** @addtogroup STM32F4xx_StdPeriph_Driver
     75            * @{
     76            */
     77          
     78          /** @defgroup FLASH 
     79            * @brief FLASH driver modules
     80            * @{
     81            */ 
     82          
     83          /* Private typedef -----------------------------------------------------------*/
     84          /* Private define ------------------------------------------------------------*/ 
     85          #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
     86          
     87          /* Private macro -------------------------------------------------------------*/
     88          /* Private variables ---------------------------------------------------------*/
     89          /* Private function prototypes -----------------------------------------------*/
     90          /* Private functions ---------------------------------------------------------*/
     91          
     92          /** @defgroup FLASH_Private_Functions
     93            * @{
     94            */ 
     95          
     96          /** @defgroup FLASH_Group1 FLASH Interface configuration functions
     97            *  @brief   FLASH Interface configuration functions 
     98           *
     99          
    100          @verbatim   
    101           ===============================================================================
    102                        ##### FLASH Interface configuration functions #####
    103           ===============================================================================
    104              [..]
    105                This group includes the following functions:
    106                (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
    107                    To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    108                    must be correctly programmed according to the frequency of the CPU clock 
    109                    (HCLK) and the supply voltage of the device.
    110              [..]      
    111                For STM32F405xx/07xx and STM32F415xx/17xx devices
    112           +-------------------------------------------------------------------------------------+     
    113           | Latency       |                HCLK clock frequency (MHz)                           |
    114           |               |---------------------------------------------------------------------|     
    115           |               | voltage range  | voltage range  | voltage range   | voltage range   |
    116           |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
    117           |---------------|----------------|----------------|-----------------|-----------------|              
    118           |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
    119           |---------------|----------------|----------------|-----------------|-----------------|   
    120           |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
    121           |---------------|----------------|----------------|-----------------|-----------------|   
    122           |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
    123           |---------------|----------------|----------------|-----------------|-----------------| 
    124           |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
    125           |---------------|----------------|----------------|-----------------|-----------------| 
    126           |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
    127           |---------------|----------------|----------------|-----------------|-----------------| 
    128           |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
    129           |---------------|----------------|----------------|-----------------|-----------------| 
    130           |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
    131           |---------------|----------------|----------------|-----------------|-----------------| 
    132           |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
    133           +---------------|----------------|----------------|-----------------|-----------------+ 
    134          
    135              [..]      
    136                For STM32F42xxx/43xxx devices
    137           +-------------------------------------------------------------------------------------+     
    138           | Latency       |                HCLK clock frequency (MHz)                           |
    139           |               |---------------------------------------------------------------------|     
    140           |               | voltage range  | voltage range  | voltage range   | voltage range   |
    141           |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
    142           |---------------|----------------|----------------|-----------------|-----------------|              
    143           |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
    144           |---------------|----------------|----------------|-----------------|-----------------|   
    145           |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
    146           |---------------|----------------|----------------|-----------------|-----------------|   
    147           |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
    148           |---------------|----------------|----------------|-----------------|-----------------| 
    149           |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
    150           |---------------|----------------|----------------|-----------------|-----------------| 
    151           |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
    152           |---------------|----------------|----------------|-----------------|-----------------| 
    153           |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
    154           |---------------|----------------|----------------|-----------------|-----------------| 
    155           |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
    156           |---------------|----------------|----------------|-----------------|-----------------| 
    157           |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
    158           |---------------|----------------|----------------|-----------------|-----------------| 
    159           |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
    160           +-------------------------------------------------------------------------------------+
    161             
    162              [..]
    163              For STM32F401x devices
    164           +-------------------------------------------------------------------------------------+     
    165           | Latency       |                HCLK clock frequency (MHz)                           |
    166           |               |---------------------------------------------------------------------|     
    167           |               | voltage range  | voltage range  | voltage range   | voltage range   |
    168           |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
    169           |---------------|----------------|----------------|-----------------|-----------------|              
    170           |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
    171           |---------------|----------------|----------------|-----------------|-----------------|   
    172           |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
    173           |---------------|----------------|----------------|-----------------|-----------------|   
    174           |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
    175           |---------------|----------------|----------------|-----------------|-----------------| 
    176           |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
    177           |---------------|----------------|----------------|-----------------|-----------------| 
    178           |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  | 
    179           +-------------------------------------------------------------------------------------+ 
    180           
    181           [..]
    182           +-------------------------------------------------------------------------------------------------------------------+
    183           |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage range 2.7 V - 3.6 V |
    184           |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with External Vpp = 9V      |
    185           |---------------|----------------|----------------|-----------------|-----------------|-----------------------------| 
    186           |Max Parallelism|      x32       |               x16                |       x8        |          x64                |              
    187           |---------------|----------------|----------------|-----------------|-----------------|-----------------------------|   
    188           |PSIZE[1:0]     |      10        |               01                 |       00        |           11                |
    189           +-------------------------------------------------------------------------------------------------------------------+  
    190          
    191                -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
    192                     (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
    193                     (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
    194                    [..] 
    195                    On STM32F42xxx/43xxx devices:
    196                     (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
    197                     (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDrive OFF and 168MHz if OverDrive ON.
    198                     (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDrive OFF and 180MHz if OverDrive ON. 
    199                    [..]  
    200                    On STM32F401x devices:
    201                     (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
    202                     (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
    203                     For more details please refer product DataSheet 
    204                     You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
    205                           
    206                (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
    207                (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
    208                (+) void FLASH_DataCacheCmd(FunctionalState NewState)
    209                (+) void FLASH_InstructionCacheReset(void)
    210                (+) void FLASH_DataCacheReset(void)
    211                
    212              [..]   
    213                The unlock sequence is not needed for these functions.
    214           
    215          @endverbatim
    216            * @{
    217            */
    218           
    219          /**
    220            * @brief  Sets the code latency value.  
    221            * @param  FLASH_Latency: specifies the FLASH Latency value.
    222            *          This parameter can be one of the following values:
    223            *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
    224            *            @arg FLASH_Latency_1: FLASH One Latency cycle
    225            *            @arg FLASH_Latency_2: FLASH Two Latency cycles
    226            *            @arg FLASH_Latency_3: FLASH Three Latency cycles
    227            *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
    228            *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
    229            *            @arg FLASH_Latency_6: FLASH Six Latency cycles
    230            *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
    231            *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
    232            *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
    233            *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
    234            *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
    235            *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
    236            *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles        
    237            *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
    238            *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
    239            *              
    240            * @note For STM32F405xx/407xx, STM32F415xx/417xx and STM32F401xx devices this parameter    
    241            *       can be a value between FLASH_Latency_0 and FLASH_Latency_7.
    242            *         
    243            * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
    244            *       FLASH_Latency_0 and FLASH_Latency_15. 
    245            *         
    246            * @retval None
    247            */
    248          void FLASH_SetLatency(uint32_t FLASH_Latency)
    249          {
    250            /* Check the parameters */
    251            assert_param(IS_FLASH_LATENCY(FLASH_Latency));
    252            
    253            /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
    254            *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
    255          }
    256          
    257          /**
    258            * @brief  Enables or disables the Prefetch Buffer.
    259            * @param  NewState: new state of the Prefetch Buffer.
    260            *          This parameter  can be: ENABLE or DISABLE.
    261            * @retval None
    262            */
    263          void FLASH_PrefetchBufferCmd(FunctionalState NewState)
    264          {
    265            /* Check the parameters */
    266            assert_param(IS_FUNCTIONAL_STATE(NewState));
    267            
    268            /* Enable or disable the Prefetch Buffer */
    269            if(NewState != DISABLE)
    270            {
    271              FLASH->ACR |= FLASH_ACR_PRFTEN;
    272            }
    273            else
    274            {
    275              FLASH->ACR &= (~FLASH_ACR_PRFTEN);
    276            }
    277          }
    278          
    279          /**
    280            * @brief  Enables or disables the Instruction Cache feature.
    281            * @param  NewState: new state of the Instruction Cache.
    282            *          This parameter  can be: ENABLE or DISABLE.
    283            * @retval None
    284            */
    285          void FLASH_InstructionCacheCmd(FunctionalState NewState)
    286          {
    287            /* Check the parameters */
    288            assert_param(IS_FUNCTIONAL_STATE(NewState));
    289            
    290            if(NewState != DISABLE)
    291            {
    292              FLASH->ACR |= FLASH_ACR_ICEN;
    293            }
    294            else
    295            {
    296              FLASH->ACR &= (~FLASH_ACR_ICEN);
    297            }
    298          }
    299          
    300          /**
    301            * @brief  Enables or disables the Data Cache feature.
    302            * @param  NewState: new state of the Data Cache.
    303            *          This parameter  can be: ENABLE or DISABLE.
    304            * @retval None
    305            */
    306          void FLASH_DataCacheCmd(FunctionalState NewState)
    307          {
    308            /* Check the parameters */
    309            assert_param(IS_FUNCTIONAL_STATE(NewState));
    310            
    311            if(NewState != DISABLE)
    312            {
    313              FLASH->ACR |= FLASH_ACR_DCEN;
    314            }
    315            else
    316            {
    317              FLASH->ACR &= (~FLASH_ACR_DCEN);
    318            }
    319          }
    320          
    321          /**
    322            * @brief  Resets the Instruction Cache.
    323            * @note   This function must be used only when the Instruction Cache is disabled.  
    324            * @param  None
    325            * @retval None
    326            */
    327          void FLASH_InstructionCacheReset(void)
    328          {
    329            FLASH->ACR |= FLASH_ACR_ICRST;
    330          }
    331          
    332          /**
    333            * @brief  Resets the Data Cache.
    334            * @note   This function must be used only when the Data Cache is disabled.  
    335            * @param  None
    336            * @retval None
    337            */
    338          void FLASH_DataCacheReset(void)
    339          {
    340            FLASH->ACR |= FLASH_ACR_DCRST;
    341          }
    342          
    343          /**
    344            * @}
    345            */
    346          
    347          /** @defgroup FLASH_Group2 FLASH Memory Programming functions
    348           *  @brief   FLASH Memory Programming functions
    349           *
    350          @verbatim   
    351           ===============================================================================
    352                          ##### FLASH Memory Programming functions #####
    353           ===============================================================================   
    354              [..]
    355                This group includes the following functions:
    356                (+) void FLASH_Unlock(void)
    357                (+) void FLASH_Lock(void)
    358                (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
    359                (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
    360                (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
    361                (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
    362                (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
    363                (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
    364                    The following functions can be used only for STM32F42xxx/43xxx devices. 
    365                (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
    366                (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
    367              [..]   
    368                Any operation of erase or program should follow these steps:
    369                (#) Call the FLASH_Unlock() function to enable the FLASH control register access
    370          
    371                (#) Call the desired function to erase sector(s) or program data
    372          
    373                (#) Call the FLASH_Lock() function to disable the FLASH control register access
    374                    (recommended to protect the FLASH memory against possible unwanted operation)
    375              
    376          @endverbatim
    377            * @{
    378            */
    379          
    380          /**
    381            * @brief  Unlocks the FLASH control register access
    382            * @param  None
    383            * @retval None
    384            */
    385          void FLASH_Unlock(void)
    386          {
    387            if((FLASH->CR & FLASH_CR_LOCK) != RESET)
    388            {
    389              /* Authorize the FLASH Registers access */
    390              FLASH->KEYR = FLASH_KEY1;
    391              FLASH->KEYR = FLASH_KEY2;
    392            }  
    393          }
    394          
    395          /**
    396            * @brief  Locks the FLASH control register access
    397            * @param  None
    398            * @retval None
    399            */
    400          void FLASH_Lock(void)
    401          {
    402            /* Set the LOCK Bit to lock the FLASH Registers access */
    403            FLASH->CR |= FLASH_CR_LOCK;
    404          }
    405          
    406          /**
    407            * @brief  Erases a specified FLASH Sector.
    408            *
    409            * @note   If an erase and a program operations are requested simustaneously,    
    410            *         the erase operation is performed before the program one.
    411            *   
    412            * @param  FLASH_Sector: The Sector number to be erased.
    413            *
    414            *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
    415            *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
    416            *           
    417            *         For STM32F42xxx/43xxx devices this parameter can be a value between 
    418            *         FLASH_Sector_0 and FLASH_Sector_23.
    419            *           
    420            *         For STM32F401xx devices this parameter can be a value between 
    421            *         FLASH_Sector_0 and FLASH_Sector_5.             
    422            *    
    423            * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
    424            *          This parameter can be one of the following values:
    425            *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
    426            *                                  the operation will be done by byte (8-bit) 
    427            *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
    428            *                                  the operation will be done by half word (16-bit)
    429            *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
    430            *                                  the operation will be done by word (32-bit)
    431            *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
    432            *                                  the operation will be done by double word (64-bit)
    433            *       
    434            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    435            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    436            */
    437          FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
    438          {
    439            uint32_t tmp_psize = 0x0;
    440            FLASH_Status status = FLASH_COMPLETE;
    441          
    442            /* Check the parameters */
    443            assert_param(IS_FLASH_SECTOR(FLASH_Sector));
    444            assert_param(IS_VOLTAGERANGE(VoltageRange));
    445            
    446            if(VoltageRange == VoltageRange_1)
    447            {
    448               tmp_psize = FLASH_PSIZE_BYTE;
    449            }
    450            else if(VoltageRange == VoltageRange_2)
    451            {
    452              tmp_psize = FLASH_PSIZE_HALF_WORD;
    453            }
    454            else if(VoltageRange == VoltageRange_3)
    455            {
    456              tmp_psize = FLASH_PSIZE_WORD;
    457            }
    458            else
    459            {
    460              tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
    461            }
    462            /* Wait for last operation to be completed */
    463            status = FLASH_WaitForLastOperation();
    464            
    465            if(status == FLASH_COMPLETE)
    466            { 
    467              /* if the previous operation is completed, proceed to erase the sector */
    468              FLASH->CR &= CR_PSIZE_MASK;
    469              FLASH->CR |= tmp_psize;
    470              FLASH->CR &= SECTOR_MASK;
    471              FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
    472              FLASH->CR |= FLASH_CR_STRT;
    473              
    474              /* Wait for last operation to be completed */
    475              status = FLASH_WaitForLastOperation();
    476              
    477              /* if the erase operation is completed, disable the SER Bit */
    478              FLASH->CR &= (~FLASH_CR_SER);
    479              FLASH->CR &= SECTOR_MASK; 
    480            }
    481            /* Return the Erase Status */
    482            return status;
    483          }
    484          
    485          /**
    486            * @brief  Erases all FLASH Sectors.
    487            *
    488            * @note   If an erase and a program operations are requested simustaneously,    
    489            *         the erase operation is performed before the program one.
    490            *  
    491            * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
    492            *          This parameter can be one of the following values:
    493            *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
    494            *                                  the operation will be done by byte (8-bit) 
    495            *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
    496            *                                  the operation will be done by half word (16-bit)
    497            *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
    498            *                                  the operation will be done by word (32-bit)
    499            *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
    500            *                                  the operation will be done by double word (64-bit)
    501            *       
    502            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    503            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    504            */
    505          FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
    506          {
    507            uint32_t tmp_psize = 0x0;
    508            FLASH_Status status = FLASH_COMPLETE;
    509            
    510            /* Wait for last operation to be completed */
    511            status = FLASH_WaitForLastOperation();
    512            assert_param(IS_VOLTAGERANGE(VoltageRange));
    513            
    514            if(VoltageRange == VoltageRange_1)
    515            {
    516               tmp_psize = FLASH_PSIZE_BYTE;
    517            }
    518            else if(VoltageRange == VoltageRange_2)
    519            {
    520              tmp_psize = FLASH_PSIZE_HALF_WORD;
    521            }
    522            else if(VoltageRange == VoltageRange_3)
    523            {
    524              tmp_psize = FLASH_PSIZE_WORD;
    525            }
    526            else
    527            {
    528              tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
    529            }  
    530            if(status == FLASH_COMPLETE)
    531            {
    532              /* if the previous operation is completed, proceed to erase all sectors */
    533          #if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
    534              FLASH->CR &= CR_PSIZE_MASK;
    535              FLASH->CR |= tmp_psize;
    536              FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
    537              FLASH->CR |= FLASH_CR_STRT;
    538              
    539              /* Wait for last operation to be completed */
    540              status = FLASH_WaitForLastOperation();
    541          
    542              /* if the erase operation is completed, disable the MER Bit */
    543              FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
    544          #endif /* STM32F427_437xx ||  STM32F429_439xx */
    545          
    546          #if defined (STM32F40_41xxx) || defined (STM32F401xx) 
    547              FLASH->CR &= CR_PSIZE_MASK;
    548              FLASH->CR |= tmp_psize;
    549              FLASH->CR |= FLASH_CR_MER;
    550              FLASH->CR |= FLASH_CR_STRT;
    551              
    552              /* Wait for last operation to be completed */
    553              status = FLASH_WaitForLastOperation();
    554          
    555              /* if the erase operation is completed, disable the MER Bit */
    556              FLASH->CR &= (~FLASH_CR_MER);
    557          #endif /* STM32F40_41xxx || STM32F401xx */
    558          
    559            }   
    560            /* Return the Erase Status */
    561            return status;
    562          }
    563          
    564          /**
    565            * @brief  Erases all FLASH Sectors in Bank 1.
    566            *
    567            * @note   This function can be used only for STM32F42xxx/43xxx devices.
    568            *      
    569            * @note   If an erase and a program operations are requested simultaneously,    
    570            *         the erase operation is performed before the program one. 
    571            *  
    572            * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
    573            *          This parameter can be one of the following values:
    574            *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
    575            *                                  the operation will be done by byte (8-bit) 
    576            *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
    577            *                                  the operation will be done by half word (16-bit)
    578            *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
    579            *                                  the operation will be done by word (32-bit)
    580            *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
    581            *                                  the operation will be done by double word (64-bit)
    582            *       
    583            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    584            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    585            */
    586          FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
    587          {
    588            uint32_t tmp_psize = 0x0;
    589            FLASH_Status status = FLASH_COMPLETE;
    590            
    591            /* Wait for last operation to be completed */
    592            status = FLASH_WaitForLastOperation();
    593            assert_param(IS_VOLTAGERANGE(VoltageRange));
    594            
    595            if(VoltageRange == VoltageRange_1)
    596            {
    597               tmp_psize = FLASH_PSIZE_BYTE;
    598            }
    599            else if(VoltageRange == VoltageRange_2)
    600            {
    601              tmp_psize = FLASH_PSIZE_HALF_WORD;
    602            }
    603            else if(VoltageRange == VoltageRange_3)
    604            {
    605              tmp_psize = FLASH_PSIZE_WORD;
    606            }
    607            else
    608            {
    609              tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
    610            }  
    611            if(status == FLASH_COMPLETE)
    612            {
    613              /* if the previous operation is completed, proceed to erase all sectors */
    614               FLASH->CR &= CR_PSIZE_MASK;
    615               FLASH->CR |= tmp_psize;
    616               FLASH->CR |= FLASH_CR_MER1;
    617               FLASH->CR |= FLASH_CR_STRT;
    618              
    619              /* Wait for last operation to be completed */
    620              status = FLASH_WaitForLastOperation();
    621          
    622              /* if the erase operation is completed, disable the MER Bit */
    623              FLASH->CR &= (~FLASH_CR_MER1);
    624          
    625            }   
    626            /* Return the Erase Status */
    627            return status;
    628          }
    629          
    630          
    631          /**
    632            * @brief  Erases all FLASH Sectors in Bank 2.
    633            *
    634            * @note   This function can be used only for STM32F42xxx/43xxx devices.
    635            *     
    636            * @note   If an erase and a program operations are requested simultaneously,    
    637            *         the erase operation is performed before the program one.
    638            *     
    639            * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
    640            *          This parameter can be one of the following values:
    641            *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
    642            *                                  the operation will be done by byte (8-bit) 
    643            *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
    644            *                                  the operation will be done by half word (16-bit)
    645            *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
    646            *                                  the operation will be done by word (32-bit)
    647            *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
    648            *                                  the operation will be done by double word (64-bit)
    649            *       
    650            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    651            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    652            */
    653          FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
    654          {
    655            uint32_t tmp_psize = 0x0;
    656            FLASH_Status status = FLASH_COMPLETE;
    657            
    658            /* Wait for last operation to be completed */
    659            status = FLASH_WaitForLastOperation();
    660            assert_param(IS_VOLTAGERANGE(VoltageRange));
    661            
    662            if(VoltageRange == VoltageRange_1)
    663            {
    664               tmp_psize = FLASH_PSIZE_BYTE;
    665            }
    666            else if(VoltageRange == VoltageRange_2)
    667            {
    668              tmp_psize = FLASH_PSIZE_HALF_WORD;
    669            }
    670            else if(VoltageRange == VoltageRange_3)
    671            {
    672              tmp_psize = FLASH_PSIZE_WORD;
    673            }
    674            else
    675            {
    676              tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
    677            }  
    678            if(status == FLASH_COMPLETE)
    679            {
    680              /* if the previous operation is completed, proceed to erase all sectors */
    681               FLASH->CR &= CR_PSIZE_MASK;
    682               FLASH->CR |= tmp_psize;
    683               FLASH->CR |= FLASH_CR_MER2;
    684               FLASH->CR |= FLASH_CR_STRT;
    685              
    686              /* Wait for last operation to be completed */
    687              status = FLASH_WaitForLastOperation();
    688          
    689              /* if the erase operation is completed, disable the MER Bit */
    690              FLASH->CR &= (~FLASH_CR_MER2);
    691          
    692            }   
    693            /* Return the Erase Status */
    694            return status;
    695          }
    696          
    697          /**
    698            * @brief  Programs a double word (64-bit) at a specified address.
    699            * @note   This function must be used when the device voltage range is from
    700            *         2.7V to 3.6V and an External Vpp is present.
    701            *
    702            * @note   If an erase and a program operations are requested simustaneously,    
    703            *         the erase operation is performed before the program one.
    704            *  
    705            * @param  Address: specifies the address to be programmed.
    706            * @param  Data: specifies the data to be programmed.
    707            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    708            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    709            */
    710          FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
    711          {
    712            FLASH_Status status = FLASH_COMPLETE;
    713          
    714            /* Check the parameters */
    715            assert_param(IS_FLASH_ADDRESS(Address));
    716          
    717            /* Wait for last operation to be completed */
    718            status = FLASH_WaitForLastOperation();
    719            
    720            if(status == FLASH_COMPLETE)
    721            {
    722              /* if the previous operation is completed, proceed to program the new data */
    723              FLASH->CR &= CR_PSIZE_MASK;
    724              FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
    725              FLASH->CR |= FLASH_CR_PG;
    726            
    727              *(__IO uint64_t*)Address = Data;
    728                  
    729              /* Wait for last operation to be completed */
    730              status = FLASH_WaitForLastOperation();
    731          
    732              /* if the program operation is completed, disable the PG Bit */
    733              FLASH->CR &= (~FLASH_CR_PG);
    734            } 
    735            /* Return the Program Status */
    736            return status;
    737          }
    738          
    739          /**
    740            * @brief  Programs a word (32-bit) at a specified address.
    741            *
    742            * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
    743            *
    744            * @note   If an erase and a program operations are requested simustaneously,    
    745            *         the erase operation is performed before the program one.
    746            *  
    747            * @param  Address: specifies the address to be programmed.
    748            *         This parameter can be any address in Program memory zone or in OTP zone.  
    749            * @param  Data: specifies the data to be programmed.
    750            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    751            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    752            */
    753          FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
    754          {
    755            FLASH_Status status = FLASH_COMPLETE;
    756          
    757            /* Check the parameters */
    758            assert_param(IS_FLASH_ADDRESS(Address));
    759          
    760            /* Wait for last operation to be completed */
    761            status = FLASH_WaitForLastOperation();
    762            
    763            if(status == FLASH_COMPLETE)
    764            {
    765              /* if the previous operation is completed, proceed to program the new data */
    766              FLASH->CR &= CR_PSIZE_MASK;
    767              FLASH->CR |= FLASH_PSIZE_WORD;
    768              FLASH->CR |= FLASH_CR_PG;
    769            
    770              *(__IO uint32_t*)Address = Data;
    771                  
    772              /* Wait for last operation to be completed */
    773              status = FLASH_WaitForLastOperation();
    774          
    775              /* if the program operation is completed, disable the PG Bit */
    776              FLASH->CR &= (~FLASH_CR_PG);
    777            } 
    778            /* Return the Program Status */
    779            return status;
    780          }
    781          
    782          /**
    783            * @brief  Programs a half word (16-bit) at a specified address. 
    784            * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
    785            *
    786            * @note   If an erase and a program operations are requested simustaneously,    
    787            *         the erase operation is performed before the program one.
    788            * 
    789            * @param  Address: specifies the address to be programmed.
    790            *         This parameter can be any address in Program memory zone or in OTP zone.  
    791            * @param  Data: specifies the data to be programmed.
    792            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    793            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    794            */
    795          FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
    796          {
    797            FLASH_Status status = FLASH_COMPLETE;
    798          
    799            /* Check the parameters */
    800            assert_param(IS_FLASH_ADDRESS(Address));
    801          
    802            /* Wait for last operation to be completed */
    803            status = FLASH_WaitForLastOperation();
    804            
    805            if(status == FLASH_COMPLETE)
    806            {
    807              /* if the previous operation is completed, proceed to program the new data */
    808              FLASH->CR &= CR_PSIZE_MASK;
    809              FLASH->CR |= FLASH_PSIZE_HALF_WORD;
    810              FLASH->CR |= FLASH_CR_PG;
    811            
    812              *(__IO uint16_t*)Address = Data;
    813                  
    814              /* Wait for last operation to be completed */
    815              status = FLASH_WaitForLastOperation();
    816          
    817              /* if the program operation is completed, disable the PG Bit */
    818              FLASH->CR &= (~FLASH_CR_PG);
    819            } 
    820            /* Return the Program Status */
    821            return status;
    822          }
    823          
    824          /**
    825            * @brief  Programs a byte (8-bit) at a specified address.
    826            * @note   This function can be used within all the device supply voltage ranges.  
    827            *
    828            * @note   If an erase and a program operations are requested simustaneously,    
    829            *         the erase operation is performed before the program one.
    830            * 
    831            * @param  Address: specifies the address to be programmed.
    832            *         This parameter can be any address in Program memory zone or in OTP zone.  
    833            * @param  Data: specifies the data to be programmed.
    834            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
    835            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
    836            */
    837          FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
    838          {
    839            FLASH_Status status = FLASH_COMPLETE;
    840          
    841            /* Check the parameters */
    842            assert_param(IS_FLASH_ADDRESS(Address));
    843          
    844            /* Wait for last operation to be completed */
    845            status = FLASH_WaitForLastOperation();
    846            
    847            if(status == FLASH_COMPLETE)
    848            {
    849              /* if the previous operation is completed, proceed to program the new data */
    850              FLASH->CR &= CR_PSIZE_MASK;
    851              FLASH->CR |= FLASH_PSIZE_BYTE;
    852              FLASH->CR |= FLASH_CR_PG;
    853            
    854              *(__IO uint8_t*)Address = Data;
    855                  
    856              /* Wait for last operation to be completed */
    857              status = FLASH_WaitForLastOperation();
    858          
    859              /* if the program operation is completed, disable the PG Bit */
    860              FLASH->CR &= (~FLASH_CR_PG);
    861            } 
    862          
    863            /* Return the Program Status */
    864            return status;
    865          }
    866          
    867          /**
    868            * @}
    869            */
    870          
    871          /** @defgroup FLASH_Group3 Option Bytes Programming functions
    872           *  @brief   Option Bytes Programming functions 
    873           *
    874          @verbatim   
    875           ===============================================================================
    876                          ##### Option Bytes Programming functions #####
    877           ===============================================================================  
    878              [..]
    879                This group includes the following functions:
    880                (+) void FLASH_OB_Unlock(void)
    881                (+) void FLASH_OB_Lock(void)
    882                (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
    883                (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
    884                (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
    885                (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
    886                (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
    887                (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
    888                (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
    889                (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
    890                (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)							
    891                (+) FLASH_Status FLASH_OB_Launch(void)
    892                (+) uint32_t FLASH_OB_GetUser(void)						
    893                (+) uint8_t FLASH_OB_GetWRP(void)
    894                (+) uint8_t FLASH_OB_GetWRP1(void)
    895                (+) uint8_t FLASH_OB_GetPCROP(void)
    896                (+) uint8_t FLASH_OB_GetPCROP1(void)    						
    897                (+) uint8_t FLASH_OB_GetRDP(void)							
    898                (+) uint8_t FLASH_OB_GetBOR(void)
    899              [..]  
    900                The following function can be used only for STM32F42xxx/43xxx devices. 
    901                (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
    902              [..]   
    903               Any operation of erase or program should follow these steps:
    904                (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
    905                    register access
    906          
    907                (#) Call one or several functions to program the desired Option Bytes:
    908                  (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
    909                       => to Enable/Disable the desired sector write protection
    910                  (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
    911                       Protection Level
    912                  (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
    913                       => to configure the user Option Bytes.
    914                  (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level 			 
    915          
    916                (#) Once all needed Option Bytes to be programmed are correctly written, 
    917                    call the FLASH_OB_Launch() function to launch the Option Bytes 
    918                    programming process.
    919               
    920                -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
    921                    reset is needed to make the change effective.  
    922          
    923                (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
    924                    register access (recommended to protect the Option Bytes against 
    925                    possible unwanted operations)
    926              
    927          @endverbatim
    928            * @{
    929            */
    930          
    931          /**
    932            * @brief  Unlocks the FLASH Option Control Registers access.
    933            * @param  None
    934            * @retval None
    935            */
    936          void FLASH_OB_Unlock(void)
    937          {
    938            if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
    939            {
    940              /* Authorizes the Option Byte register programming */
    941              FLASH->OPTKEYR = FLASH_OPT_KEY1;
    942              FLASH->OPTKEYR = FLASH_OPT_KEY2;
    943            }  
    944          }
    945          
    946          /**
    947            * @brief  Locks the FLASH Option Control Registers access.
    948            * @param  None
    949            * @retval None
    950            */
    951          void FLASH_OB_Lock(void)
    952          {
    953            /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
    954            FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
    955          }
    956          
    957          /**
    958            * @brief  Enables or disables the write protection of the desired sectors, for the first
    959            *         1 Mb of the Flash  
    960            *
    961            * @note   When the memory read protection level is selected (RDP level = 1), 
    962            *         it is not possible to program or erase the flash sector i if CortexM4  
    963            *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
    964            * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
    965            * 
    966            * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
    967            *          This parameter can be one of the following values:
    968            *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                      
    969            *            @arg OB_WRP_Sector_All
    970            * @param  Newstate: new state of the Write Protection.
    971            *          This parameter can be: ENABLE or DISABLE.
    972            * @retval None  
    973            */
    974          void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
    975          { 
    976            FLASH_Status status = FLASH_COMPLETE;
    977            
    978            /* Check the parameters */
    979            assert_param(IS_OB_WRP(OB_WRP));
    980            assert_param(IS_FUNCTIONAL_STATE(NewState));
    981              
    982            status = FLASH_WaitForLastOperation();
    983          
    984            if(status == FLASH_COMPLETE)
    985            { 
    986              if(NewState != DISABLE)
    987              {
    988                *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
    989              }
    990              else
    991              {
    992                *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    993              }
    994            }
    995          }
    996          
    997          /**
    998            * @brief  Enables or disables the write protection of the desired sectors, for the second
    999            *         1 Mb of the Flash  
   1000            *           
   1001            * @note   This function can be used only for STM32F42xxx/43xxx devices.
   1002            *   
   1003            * @note   When the memory read out protection is selected (RDP level = 1), 
   1004            *         it is not possible to program or erase the flash sector i if CortexM4  
   1005            *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
   1006            * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
   1007            * 
   1008            * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
   1009            *          This parameter can be one of the following values:
   1010            *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
   1011            *            @arg OB_WRP_Sector_All                        
   1012            * @param  Newstate: new state of the Write Protection.
   1013            *          This parameter can be: ENABLE or DISABLE.
   1014            * @retval None  
   1015            */
   1016          void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
   1017          { 
   1018            FLASH_Status status = FLASH_COMPLETE;
   1019            
   1020            /* Check the parameters */
   1021            assert_param(IS_OB_WRP(OB_WRP));
   1022            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1023              
   1024            status = FLASH_WaitForLastOperation();
   1025          
   1026            if(status == FLASH_COMPLETE)
   1027            { 
   1028              if(NewState != DISABLE)
   1029              {
   1030                *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
   1031              }
   1032              else
   1033              {
   1034                *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
   1035              }
   1036            }
   1037          }
   1038          
   1039          /**
   1040            * @brief  Select the Protection Mode (SPRMOD). 
   1041            * 
   1042            * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx devices.       
   1043            * 
   1044            * @note   After PCROP activation, Option Byte modification is not possible. 
   1045            *         Exception made for the global Read Out Protection modification level (level1 to level0) 
   1046            * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
   1047            *   
   1048            * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPERR Flag
   1049            *   
   1050            * @note   Some Precautions should be taken when activating the PCROP feature :
   1051            *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPRMOD = 1
   1052            *         and WRPi = 1 (default value), then the user sector i is read/write protected.
   1053            *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
   1054            *         below safety sequence :       
   1055            *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE) function 
   1056            *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2   
   1057            *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) function
   1058            *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
   1059            * 
   1060            * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
   1061            *          This parameter can be one of the following values:
   1062            *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors.
   1063            *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective user sectors.
   1064            * @retval None
   1065            */
   1066          void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
   1067          {  
   1068            uint8_t optiontmp = 0xFF;
   1069                
   1070            /* Check the parameters */
   1071            assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
   1072            
   1073            /* Mask SPRMOD bit */
   1074            optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
   1075            /* Update Option Byte */
   1076            *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
   1077              
   1078          }
   1079          
   1080          /**
   1081            * @brief  Enables or disables the read/write protection (PCROP) of the desired 
   1082            *         sectors, for the first 1 MB of the Flash.
   1083            *           
   1084            * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx devices. 
   1085            *   
   1086            * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
   1087            *          This parameter can be one of the following values:
   1088            *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
   1089            *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
   1090            *                           OB_PCROP_Sector5 for STM32F401xx devices.
   1091            *            @arg OB_PCROP_Sector_All                         
   1092            * @param  Newstate: new state of the Write Protection.
   1093            *          This parameter can be: ENABLE or DISABLE.
   1094            * @retval None  
   1095            */
   1096          void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
   1097          { 
   1098            FLASH_Status status = FLASH_COMPLETE;
   1099            
   1100            /* Check the parameters */
   1101            assert_param(IS_OB_PCROP(OB_PCROP));
   1102            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1103              
   1104            status = FLASH_WaitForLastOperation();
   1105          
   1106            if(status == FLASH_COMPLETE)
   1107            { 
   1108              if(NewState != DISABLE)
   1109              {
   1110                *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
   1111              }
   1112              else
   1113              {
   1114                *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
   1115              }
   1116            }
   1117          }
   1118          
   1119          /**
   1120             * @brief Enables or disables the read/write protection (PCROP) of the desired 
   1121            *         sectors
   1122            *           
   1123            * @note   This function can be used only for STM32F42xxx/43xxx devices.
   1124            *   
   1125            * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
   1126            *          This parameter can be one of the following values:
   1127            *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
   1128            *            @arg OB_PCROP_Sector_All                    
   1129            * @param  Newstate: new state of the Write Protection.
   1130            *          This parameter can be: ENABLE or DISABLE.
   1131            * @retval None  
   1132            */
   1133          void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
   1134          { 
   1135            FLASH_Status status = FLASH_COMPLETE;
   1136            
   1137            /* Check the parameters */
   1138            assert_param(IS_OB_PCROP(OB_PCROP));
   1139            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1140              
   1141            status = FLASH_WaitForLastOperation();
   1142          
   1143            if(status == FLASH_COMPLETE)
   1144            { 
   1145              if(NewState != DISABLE)
   1146              {
   1147                *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
   1148              }
   1149              else
   1150              {
   1151                *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
   1152              }
   1153            }
   1154          }
   1155          
   1156          
   1157          /**
   1158            * @brief  Sets the read protection level.
   1159            * @param  OB_RDP: specifies the read protection level.
   1160            *          This parameter can be one of the following values:
   1161            *            @arg OB_RDP_Level_0: No protection
   1162            *            @arg OB_RDP_Level_1: Read protection of the memory
   1163            *            @arg OB_RDP_Level_2: Full chip protection
   1164            *   
   1165            * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
   1166            *    
   1167            * @retval None
   1168            */
   1169          void FLASH_OB_RDPConfig(uint8_t OB_RDP)
   1170          {
   1171            FLASH_Status status = FLASH_COMPLETE;
   1172          
   1173            /* Check the parameters */
   1174            assert_param(IS_OB_RDP(OB_RDP));
   1175          
   1176            status = FLASH_WaitForLastOperation();
   1177          
   1178            if(status == FLASH_COMPLETE)
   1179            {
   1180              *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
   1181          
   1182            }
   1183          }
   1184          
   1185          /**
   1186            * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
   1187            * @param  OB_IWDG: Selects the IWDG mode
   1188            *          This parameter can be one of the following values:
   1189            *            @arg OB_IWDG_SW: Software IWDG selected
   1190            *            @arg OB_IWDG_HW: Hardware IWDG selected
   1191            * @param  OB_STOP: Reset event when entering STOP mode.
   1192            *          This parameter  can be one of the following values:
   1193            *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
   1194            *            @arg OB_STOP_RST: Reset generated when entering in STOP
   1195            * @param  OB_STDBY: Reset event when entering Standby mode.
   1196            *          This parameter  can be one of the following values:
   1197            *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
   1198            *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
   1199            * @retval None
   1200            */
   1201          void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
   1202          {
   1203            uint8_t optiontmp = 0xFF;
   1204            FLASH_Status status = FLASH_COMPLETE; 
   1205          
   1206            /* Check the parameters */
   1207            assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
   1208            assert_param(IS_OB_STOP_SOURCE(OB_STOP));
   1209            assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
   1210          
   1211            /* Wait for last operation to be completed */
   1212            status = FLASH_WaitForLastOperation();
   1213            
   1214            if(status == FLASH_COMPLETE)
   1215            { 
   1216          #if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
   1217              /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
   1218              optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
   1219          #endif /* STM32F427_437xx ||  STM32F429_439xx */
   1220          
   1221          #if defined (STM32F40_41xxx) || defined (STM32F401xx) 
   1222              /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
   1223              optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
   1224          #endif /* STM32F40_41xxx || STM32F401xx */ 
   1225          
   1226              /* Update User Option Byte */
   1227              *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
   1228            }  
   1229          }
   1230          
   1231          /**
   1232            * @brief  Configure the Dual Bank Boot.
   1233            *   
   1234            * @note   This function can be used only for STM32F42xxx/43xxx devices.
   1235            *      
   1236            * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
   1237            *          This parameter can be one of the following values:
   1238            *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
   1239            *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
   1240            * @retval None
   1241            */
   1242          void FLASH_OB_BootConfig(uint8_t OB_BOOT)
   1243          {
   1244            /* Check the parameters */
   1245            assert_param(IS_OB_BOOT(OB_BOOT));
   1246          
   1247            /* Set Dual Bank Boot */
   1248            *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
   1249            *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
   1250          
   1251          }
   1252          
   1253          /**
   1254            * @brief  Sets the BOR Level. 
   1255            * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
   1256            *          This parameter can be one of the following values:
   1257            *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
   1258            *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
   1259            *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
   1260            *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
   1261            * @retval None
   1262            */
   1263          void FLASH_OB_BORConfig(uint8_t OB_BOR)
   1264          {
   1265            /* Check the parameters */
   1266            assert_param(IS_OB_BOR(OB_BOR));
   1267          
   1268            /* Set the BOR Level */
   1269            *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
   1270            *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
   1271          
   1272          }
   1273          
   1274          /**
   1275            * @brief  Launch the option byte loading.
   1276            * @param  None
   1277            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
   1278            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
   1279            */
   1280          FLASH_Status FLASH_OB_Launch(void)
   1281          {
   1282            FLASH_Status status = FLASH_COMPLETE;
   1283          
   1284            /* Set the OPTSTRT bit in OPTCR register */
   1285            *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
   1286          
   1287            /* Wait for last operation to be completed */
   1288            status = FLASH_WaitForLastOperation();
   1289          
   1290            return status;
   1291          }
   1292          
   1293          /**
   1294            * @brief  Returns the FLASH User Option Bytes values.
   1295            * @param  None
   1296            * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
   1297            *         and RST_STDBY(Bit2).
   1298            */
   1299          uint8_t FLASH_OB_GetUser(void)
   1300          {
   1301            /* Return the User Option Byte */
   1302            return (uint8_t)(FLASH->OPTCR >> 5);
   1303          }
   1304          
   1305          /**
   1306            * @brief  Returns the FLASH Write Protection Option Bytes value.
   1307            * @param  None
   1308            * @retval The FLASH Write Protection  Option Bytes value
   1309            */
   1310          uint16_t FLASH_OB_GetWRP(void)
   1311          {
   1312            /* Return the FLASH write protection Register value */
   1313            return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
   1314          }
   1315          
   1316          /**
   1317            * @brief  Returns the FLASH Write Protection Option Bytes value.
   1318            *   
   1319            * @note   This function can be used only for STM32F42xxx/43xxx devices.
   1320            *   
   1321            * @param  None
   1322            * @retval The FLASH Write Protection  Option Bytes value
   1323            */
   1324          uint16_t FLASH_OB_GetWRP1(void)
   1325          {
   1326            /* Return the FLASH write protection Register value */
   1327            return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
   1328          }
   1329          
   1330          /**
   1331            * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
   1332            *   
   1333            * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx devices.
   1334            *   
   1335            * @param  None
   1336            * @retval The FLASH PC Read/Write Protection Option Bytes value
   1337            */
   1338          uint16_t FLASH_OB_GetPCROP(void)
   1339          {
   1340            /* Return the FLASH PC Read/write protection Register value */
   1341            return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
   1342          }
   1343          
   1344          /**
   1345            * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
   1346            *   
   1347            * @note   This function can be used only for STM32F42xxx/43xxx devices. 
   1348            *     
   1349            * @param  None
   1350            * @retval The FLASH PC Read/Write Protection Option Bytes value
   1351            */
   1352          uint16_t FLASH_OB_GetPCROP1(void)
   1353          {
   1354            /* Return the FLASH write protection Register value */
   1355            return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
   1356          }
   1357          
   1358          /**
   1359            * @brief  Returns the FLASH Read Protection level.
   1360            * @param  None
   1361            * @retval FLASH ReadOut Protection Status:
   1362            *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
   1363            *           - RESET, when OB_RDP_Level_0 is set
   1364            */
   1365          FlagStatus FLASH_OB_GetRDP(void)
   1366          {
   1367            FlagStatus readstatus = RESET;
   1368          
   1369            if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
   1370            {
   1371              readstatus = SET;
   1372            }
   1373            else
   1374            {
   1375              readstatus = RESET;
   1376            }
   1377            return readstatus;
   1378          }
   1379          
   1380          /**
   1381            * @brief  Returns the FLASH BOR level.
   1382            * @param  None
   1383            * @retval The FLASH BOR level:
   1384            *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
   1385            *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
   1386            *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
   1387            *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
   1388            */
   1389          uint8_t FLASH_OB_GetBOR(void)
   1390          {
   1391            /* Return the FLASH BOR level */
   1392            return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
   1393          }
   1394          
   1395          /**
   1396            * @}
   1397            */
   1398          
   1399          /** @defgroup FLASH_Group4 Interrupts and flags management functions
   1400           *  @brief   Interrupts and flags management functions
   1401           *
   1402          @verbatim   
   1403           ===============================================================================
   1404                        ##### Interrupts and flags management functions #####
   1405           ===============================================================================  
   1406          @endverbatim
   1407            * @{
   1408            */
   1409          
   1410          /**
   1411            * @brief  Enables or disables the specified FLASH interrupts.
   1412            * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
   1413            *          This parameter can be any combination of the following values:
   1414            *            @arg FLASH_IT_ERR: FLASH Error Interrupt
   1415            *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
   1416            * @retval None 
   1417            */
   1418          void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
   1419          {
   1420            /* Check the parameters */
   1421            assert_param(IS_FLASH_IT(FLASH_IT)); 
   1422            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1423          
   1424            if(NewState != DISABLE)
   1425            {
   1426              /* Enable the interrupt sources */
   1427              FLASH->CR |= FLASH_IT;
   1428            }
   1429            else
   1430            {
   1431              /* Disable the interrupt sources */
   1432              FLASH->CR &= ~(uint32_t)FLASH_IT;
   1433            }
   1434          }
   1435          
   1436          /**
   1437            * @brief  Checks whether the specified FLASH flag is set or not.
   1438            * @param  FLASH_FLAG: specifies the FLASH flag to check.
   1439            *          This parameter can be one of the following values:
   1440            *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
   1441            *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
   1442            *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
   1443            *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
   1444            *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
   1445            *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
   1446            *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42/43xxx and STM32F401xx devices) 
   1447            *            @arg FLASH_FLAG_BSY: FLASH Busy flag
   1448            * @retval The new state of FLASH_FLAG (SET or RESET).
   1449            */
   1450          FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
   1451          {
   1452            FlagStatus bitstatus = RESET;
   1453            /* Check the parameters */
   1454            assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
   1455          
   1456            if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
   1457            {
   1458              bitstatus = SET;
   1459            }
   1460            else
   1461            {
   1462              bitstatus = RESET;
   1463            }
   1464            /* Return the new state of FLASH_FLAG (SET or RESET) */
   1465            return bitstatus; 
   1466          }
   1467          
   1468          /**
   1469            * @brief  Clears the FLASH's pending flags.
   1470            * @param  FLASH_FLAG: specifies the FLASH flags to clear.
   1471            *          This parameter can be any combination of the following values:
   1472            *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
   1473            *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
   1474            *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
   1475            *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
   1476            *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
   1477            *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
   1478            *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
   1479            * @retval None
   1480            */
   1481          void FLASH_ClearFlag(uint32_t FLASH_FLAG)
   1482          {
   1483            /* Check the parameters */
   1484            assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
   1485            
   1486            /* Clear the flags */
   1487            FLASH->SR = FLASH_FLAG;
   1488          }
   1489          
   1490          /**
   1491            * @brief  Returns the FLASH Status.
   1492            * @param  None
   1493            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
   1494            *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
   1495            */
   1496          FLASH_Status FLASH_GetStatus(void)
   1497          {
   1498            FLASH_Status flashstatus = FLASH_COMPLETE;
   1499            
   1500            if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
   1501            {
   1502              flashstatus = FLASH_BUSY;
   1503            }
   1504            else 
   1505            {  
   1506              if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
   1507              { 
   1508                flashstatus = FLASH_ERROR_WRP;
   1509              }
   1510              else
   1511              {
   1512                if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
   1513                { 
   1514                  flashstatus = FLASH_ERROR_RD;
   1515                } 
   1516                else 
   1517                {
   1518                  if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
   1519                  {
   1520                    flashstatus = FLASH_ERROR_PROGRAM; 
   1521                  }
   1522                  else
   1523                  {
   1524                    if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
   1525                    {
   1526                      flashstatus = FLASH_ERROR_OPERATION;
   1527                    }
   1528                    else
   1529                    {
   1530                      flashstatus = FLASH_COMPLETE;
   1531                    }
   1532                  }
   1533                }
   1534              }
   1535            }
   1536            /* Return the FLASH Status */
   1537            return flashstatus;
   1538          }
   1539          
   1540          /**
   1541            * @brief  Waits for a FLASH operation to complete.
   1542            * @param  None
   1543            * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
   1544            *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
   1545            */
   1546          FLASH_Status FLASH_WaitForLastOperation(void)
   1547          { 
   1548            __IO FLASH_Status status = FLASH_COMPLETE;
   1549             
   1550            /* Check for the FLASH Status */
   1551            status = FLASH_GetStatus();
   1552          
   1553            /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
   1554               Even if the FLASH operation fails, the BUSY flag will be reset and an error
   1555               flag will be set */
   1556            while(status == FLASH_BUSY)
   1557            {
   1558              status = FLASH_GetStatus();
   1559            }
   1560            /* Return the operation status */
   1561            return status;
   1562          }
   1563          
   1564          /**
   1565            * @}
   1566            */ 
   1567          
   1568          /**
   1569            * @}
   1570            */ 
   1571          
   1572          /**
   1573            * @}
   1574            */ 
   1575          
   1576          /**
   1577            * @}
   1578            */
   1579          
   1580          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  FLASH_ClearFlag
        0  FLASH_DataCacheCmd
        0  FLASH_DataCacheReset
       16  FLASH_EraseAllBank1Sectors
             16 -> FLASH_WaitForLastOperation
       16  FLASH_EraseAllBank2Sectors
             16 -> FLASH_WaitForLastOperation
       16  FLASH_EraseAllSectors
             16 -> FLASH_WaitForLastOperation
       16  FLASH_EraseSector
             16 -> FLASH_WaitForLastOperation
        0  FLASH_GetFlagStatus
        0  FLASH_GetStatus
        0  FLASH_ITConfig
        0  FLASH_InstructionCacheCmd
        0  FLASH_InstructionCacheReset
        0  FLASH_Lock
        0  FLASH_OB_BORConfig
        0  FLASH_OB_BootConfig
        0  FLASH_OB_GetBOR
        0  FLASH_OB_GetPCROP
        0  FLASH_OB_GetPCROP1
        0  FLASH_OB_GetRDP
        0  FLASH_OB_GetUser
        0  FLASH_OB_GetWRP
        0  FLASH_OB_GetWRP1
        0  FLASH_OB_Launch
              0 -> FLASH_WaitForLastOperation
        0  FLASH_OB_Lock
       16  FLASH_OB_PCROP1Config
             16 -> FLASH_WaitForLastOperation
       16  FLASH_OB_PCROPConfig
             16 -> FLASH_WaitForLastOperation
        0  FLASH_OB_PCROPSelectionConfig
        8  FLASH_OB_RDPConfig
              8 -> FLASH_WaitForLastOperation
        0  FLASH_OB_Unlock
       16  FLASH_OB_UserConfig
             16 -> FLASH_WaitForLastOperation
       16  FLASH_OB_WRP1Config
             16 -> FLASH_WaitForLastOperation
       16  FLASH_OB_WRPConfig
             16 -> FLASH_WaitForLastOperation
        0  FLASH_PrefetchBufferCmd
       16  FLASH_ProgramByte
             16 -> FLASH_WaitForLastOperation
       24  FLASH_ProgramDoubleWord
             24 -> FLASH_WaitForLastOperation
       16  FLASH_ProgramHalfWord
             16 -> FLASH_WaitForLastOperation
       16  FLASH_ProgramWord
             16 -> FLASH_WaitForLastOperation
        0  FLASH_SetLatency
        0  FLASH_Unlock
        8  FLASH_WaitForLastOperation
              8 -> FLASH_GetStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable33_10
       4  ??DataTable33_11
       4  ??DataTable33_12
       4  ??DataTable33_13
       4  ??DataTable33_2
       4  ??DataTable33_3
       4  ??DataTable33_4
       4  ??DataTable33_5
       4  ??DataTable33_6
       4  ??DataTable33_7
       4  ??DataTable33_8
       4  ??DataTable33_9
      10  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
      26  ?Subroutine3
       6  ?Subroutine4
      24  ?Subroutine5
      20  ?Subroutine6
      12  ?Subroutine7
       6  ?Subroutine8
       6  FLASH_ClearFlag
      22  FLASH_DataCacheCmd
      14  FLASH_DataCacheReset
      30  FLASH_EraseAllBank1Sectors
      56  FLASH_EraseAllBank2Sectors
      32  FLASH_EraseAllSectors
     104  FLASH_EraseSector
      16  FLASH_GetFlagStatus
      56  FLASH_GetStatus
      18  FLASH_ITConfig
      24  FLASH_InstructionCacheCmd
      14  FLASH_InstructionCacheReset
      14  FLASH_Lock
       8  FLASH_OB_BORConfig
      10  FLASH_OB_BootConfig
      10  FLASH_OB_GetBOR
       2  FLASH_OB_GetPCROP
       2  FLASH_OB_GetPCROP1
      14  FLASH_OB_GetRDP
      10  FLASH_OB_GetUser
       2  FLASH_OB_GetWRP
       2  FLASH_OB_GetWRP1
      12  FLASH_OB_Launch
      12  FLASH_OB_Lock
      26  FLASH_OB_PCROP1Config
      26  FLASH_OB_PCROPConfig
      14  FLASH_OB_PCROPSelectionConfig
      18  FLASH_OB_RDPConfig
      18  FLASH_OB_Unlock
      36  FLASH_OB_UserConfig
      26  FLASH_OB_WRP1Config
      26  FLASH_OB_WRPConfig
      24  FLASH_PrefetchBufferCmd
      52  FLASH_ProgramByte
      62  FLASH_ProgramDoubleWord
      36  FLASH_ProgramHalfWord
      36  FLASH_ProgramWord
       8  FLASH_SetLatency
      24  FLASH_Unlock
      30  FLASH_WaitForLastOperation

 
 1 124 bytes in section .text
 
 1 124 bytes of CODE memory

Errors: none
Warnings: none

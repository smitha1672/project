###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:26:00 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\osd\si_osd_wi #
#                    ndow.c                                                   #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\osd\si_osd_wi #
#                    ndow.c -D S4051A -D DEBUG -D FREE_RTOS -D                #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D __ARM_CORTEX_MX__ -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -lcN                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\ #
#                    DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applica #
#                    tion\Obj\ --debug --endian=little --cpu=Cortex-M4 -e     #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\si_osd_window.lst                                     #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\si_osd_window.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\component\osd\si_osd_window.c
      1          //***************************************************************************
      2          //!file     si_osd_window.c
      3          //!brief    Silicon Image OSD Component window control.
      4          //
      5          // No part of this work may be reproduced, modified, distributed,
      6          // transmitted, transcribed, or translated into any language or computer
      7          // format, in any form or by any means without written permission of
      8          // Silicon Image, Inc., 1140 East Arques Avenue, Sunnyvale, California 94085
      9          //
     10          // Copyright 2011-2012, Silicon Image, Inc.  All rights reserved.
     11          //***************************************************************************/
     12          
     13          #include "string.h"
     14          #include "si_debug.h"
     15          #include "si_osd_internal.h"
     16          #include "si_drv_switch.h"
     17          
     18          //-------------------------------------------------------------------------------------------------
     19          //! @brief      Common utility function to check winref validity
     20          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
     21          //! @return     true if valid winref, false if an error occurred.
     22          //-------------------------------------------------------------------------------------------------
     23          bool_t OsdIsValidWinRef ( int winRef )
     24          {
     25              if (( winRef == -1 ) || ( winRef >= SII_OSD_WIN_COUNT ))
     26              {
     27                  pOsd->lastResultCode = SII_OSD_ERR_NOT_VALID;
     28              }
     29              else
     30              {
     31                  pOsd->lastResultCode = SII_OSD_SUCCESS;
     32              }
     33          
     34              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
     35          }
     36          
     37          //-------------------------------------------------------------------------------------------------
     38          //! @brief      Common utility function to check winref validity
     39          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
     40          //! @return     true if valid winref, false if an error occurred.
     41          //-------------------------------------------------------------------------------------------------
     42          bool_t OsdIsValidActiveWinRef ( int winRef )
     43          {
     44              if (( winRef == -1 ) || ( winRef >= SII_OSD_WIN_COUNT ))
     45              {
     46                  pOsd->lastResultCode = SII_OSD_ERR_NOT_VALID;
     47              }
     48              else if ( ( pOsd->winData[ winRef].windowStatus & OSD_WSTAT_ENABLED ) != 0 )
     49              {
     50                  pOsd->lastResultCode = SII_OSDDRV_ERR_NOT_ACTIVE;
     51              }
     52              else
     53              {
     54                  pOsd->lastResultCode = SII_OSD_SUCCESS;
     55              }
     56          
     57              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
     58          }
     59          
     60          //-------------------------------------------------------------------------------------------------
     61          //! @brief      Attach a pointer to a window user function to the window. If a window has a function
     62          //!             pointer attached, it will supersede the windowFunctionId member of the window data
     63          //!             structure associated with the window.
     64          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
     65          //! @param[in]  pFunction   Pointer to window user function.
     66          //! @return     true if successfully attached to window, false if an error occurred.
     67          //-------------------------------------------------------------------------------------------------
     68          bool_t SiiOsdAttachFunction( int winRef, SiiOsdUserFunction_t pFunction )
     69          {
     70              if (!OsdIsValidActiveWinRef( winRef ))  // Ignore window if not enabled.
     71              {
     72                  return( false );
     73              }
     74          
     75              pOsd->winData[ winRef].pFunction = pFunction;
     76          
     77              return( true );
     78          }
     79          
     80          //-------------------------------------------------------------------------------------------------
     81          //! @brief      Attach a pointer to external data to the window.  The external data is available
     82          //!             to the developer for their own use, although one or more of the complex window
     83          //!             types require external data with a specific structure.
     84          //! @param[in]  winRef          Return value from any SiiOsdCreate function.
     85          //! @param[in]  pExternalData   Pointer to void.
     86          //! @return     true if successfully attached to window, false if an error occurred.
     87          //-------------------------------------------------------------------------------------------------
     88          bool_t SiiOsdAttachExternalData( int winRef, void *pExternalData )
     89          {
     90              if (!OsdIsValidActiveWinRef( winRef ))  // Ignore window if not enabled.
     91              {
     92                  return( false );
     93              }
     94          
     95              pOsd->winData[ winRef].pExternalData = (void *)pExternalData;
     96          
     97              return( true );
     98          }
     99          
    100          //-------------------------------------------------------------------------------------------------
    101          //! @brief      Set the private data members of the specified window structure.  This data can be
    102          //!             accessed by the window user function via the SiiFuncArgs_t structure as param1,
    103          //!             param2, param3, param4, and editMode.
    104          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
    105          //! @param[in]  p1          Private data value 1.
    106          //! @param[in]  p2          Private data value 2.
    107          //! @param[in]  p3          Private data value 3.
    108          //! @param[in]  p4          Private data value 4.
    109          //! @return     true if success, false if an error occurred.
    110          //-------------------------------------------------------------------------------------------------
    111          bool_t SiiOsdSetWindowPrivateData( int winRef, int p1, int p2, int p3, int p4, int editMode )
    112          {
    113              if (!OsdIsValidActiveWinRef( winRef ))  // Ignore window if not enabled.
    114              {
    115                  return( false );
    116              }
    117          
    118              pOsd->winData[ winRef].param1 = p1;
    119              pOsd->winData[ winRef].param2 = p2;
    120              pOsd->winData[ winRef].param3 = p3;
    121              pOsd->winData[ winRef].param4 = p4;
    122              pOsd->winData[ winRef].editMode = editMode;
    123          
    124              return( true );
    125          }
    126          
    127          //-------------------------------------------------------------------------------------------------
    128          //! @brief      Set the child window reference ID for a window.
    129          //! @param[in]  winRef      Return value from the SiiOsdCreateListBox function.
    130          //! @param[in]  childWinRef New value for child window reference ID.
    131          //! @retval                 Previous value of child winRef
    132          //-------------------------------------------------------------------------------------------------
    133          int SiiOsdAssignChildWinRef( int winRef, int childWinRef )
    134          {
    135              int oldChildWinRef = -1;
    136          
    137              if ((OsdIsValidWinRef( winRef )) && ( childWinRef != -1 ))
    138              {
    139                  oldChildWinRef = pOsd->winData[ winRef].childWinRef;
    140                  pOsd->winData[ winRef].childWinRef = childWinRef;
    141              }
    142              return( oldChildWinRef );
    143          }
    144          
    145          //-------------------------------------------------------------------------------------------------
    146          //! @brief      Set the color of a specific element of the specified window.
    147          //!             Change takes effect immediately.
    148          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
    149          //! @param[in]  element     OSD_FG, OSD_BG, OSD_FG_HIGHLIGHT, OSD_BG_HIGHLIGHT, OSD_FG_DISABLED,
    150          //!                         OSD_BG_DISABLED, OSD_BORDER, OSD_ROW_DIVIDER
    151          //! @param[in]  rgbVal      OSD_RGB() color value.
    152          //! @retval                 true if successful, false if a failure.
    153          //-------------------------------------------------------------------------------------------------
    154          bool_t SiiOsdSetColor( int winRef,  SiiOsdColorElement_t element, int rgbVal )
    155          {
    156              while ( OsdIsValidWinRef( winRef ))
    157              {
    158                  if ( element >= OSD_ELEMENT_COUNT )
    159                  {
    160                      pOsd->lastResultCode = SII_OSD_ERR_INVALID_PARAMETER;
    161                      break;
    162                  }
    163          
    164                  SiiDrvOsdSetColor( winRef, element, rgbVal );
    165                  break;  // Always break
    166              }
    167          
    168              // If successful at component level, check the driver level.
    169              if ( pOsd->lastResultCode == SII_OSD_SUCCESS )
    170              {
    171                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    172              }
    173          
    174              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
    175          }
    176          
    177          //-------------------------------------------------------------------------------------------------
    178          //! @brief      Set the enable state of the specified row
    179          //!             Change takes effect immediately.
    180          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
    181          //! @param[in]  row         Window row to mark enabled/disabled
    182          //! @param[in]  isEnable    true == enable, false == disable.
    183          //! @retval                 true if successful, false if a failure.
    184          //-------------------------------------------------------------------------------------------------
    185          bool_t SiiOsdSetRowEnable( int winRef, int row, bool_t isEnable )
    186          {
    187              while ( OsdIsValidWinRef( winRef ))
    188              {
    189                  if ( row >= pOsd->winData[ winRef].rowCount)
    190                  {
    191                      pOsd->lastResultCode = SII_OSD_ERR_INVALID_PARAMETER;
    192                      break;
    193                  }
    194          
    195                  SiiDrvOsdRowEnable( winRef, row, isEnable );
    196                  break;  // Always break
    197              }
    198          
    199              // If successful at component level, check the driver level.
    200              if ( pOsd->lastResultCode == SII_OSD_SUCCESS )
    201              {
    202                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    203              }
    204          
    205              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
    206          }
    207          
    208          //-------------------------------------------------------------------------------------------------
    209          //! @brief      Returns the enable state of the specified row
    210          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
    211          //! @param[in]  row         window row (0-15)
    212          //! @retval     true if row is enabled, false if a disabled or invalid parameter.
    213          //-------------------------------------------------------------------------------------------------
    214          bool_t SiiOsdIsRowEnabled( int winRef, int row )
    215          {
    216              if ( OsdIsValidWinRef( winRef ))
    217              {
    218                  if ( row >= pOsd->winData[ winRef].rowCount)
    219                  {
    220                      pOsd->lastResultCode = SII_OSD_ERR_INVALID_PARAMETER;
    221                  }
    222              }
    223          
    224              return(( pOsd->lastResultCode == SII_OSD_SUCCESS ) ? SiiDrvOsdRowIsEnabled( winRef, row ) : false );
    225          }
    226          
    227          //-------------------------------------------------------------------------------------------------
    228          //! @brief      Returns the winRef of the window that currently has focus (receives key events)
    229          //! @retval     winRef of window with input focus if valid.
    230          //! @retval     -1 if no window has focus
    231          //-------------------------------------------------------------------------------------------------
    232          int SiiOsdGetFocus( void )
    233          {
    234              pOsd->lastResultCode = SII_OSD_SUCCESS;
    235              return( pOsd->focusWinRef );
    236          }
    237          
    238          //-------------------------------------------------------------------------------------------------
    239          //! @brief      Set the input focus to the specified window and bring it to the top if requested.
    240          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
    241          //! @param[in]  options     OPT_TOP, OPT_SEND_UFA_FOCUS
    242          //! @retval                 winRef of window with input focus if valid.
    243          //! @retval                 -1 if no window has focus
    244          //-------------------------------------------------------------------------------------------------
    245          int SiiOsdSetFocus( int winRef, SiiOsdOptions_t options )
    246          {
    247              bool_t  setFocus = true;
    248          
    249              pOsd->lastResultCode = SII_OSD_SUCCESS;
    250          
    251              // If winRef is not -1, we are setting focus for the specified window
    252              // instead of removing it from all windows.
    253              if ( winRef != -1 )
    254              {
    255                  if ( OsdIsValidWinRef( winRef ))
    256                  {
    257                      // Maybe we need to ask the window if they want the focus
    258                      if ( options & OPT_SEND_UFA_FOCUS )
    259                      {
    260                          if ( !OsdExecuteUserFunction( winRef, UFA_FOCUS, 0 ))
    261                          {
    262                              setFocus = false;
    263                          }
    264                      }
    265                      if ( setFocus )
    266                      {
    267                          // Focus being set to an enabled window, bring it to top if requested
    268                          if ( setFocus && (options & OPT_TOP ))
    269                          {
    270                              SiiDrvOsdSetWindowZaxis( winRef, 0 );
    271                          }
    272                          // Set the focus to the new window by setting its highlight colors to the
    273                          // window's highlight color.
    274                          SiiDrvOsdSetCursor( winRef, SiiDrvOsdGetCursor( winRef ), OPT_SHOW );
    275                      }
    276                  }
    277              }
    278          
    279              // Don't remove the old focus if the new window didn't want it
    280              if ( setFocus )
    281              {
    282                  // In either case, remove the focus from current focus window by setting its highlight colors to the
    283                  // same color as normal rows.
    284                  if (( pOsd->focusWinRef != -1 ) && ( winRef != pOsd->focusWinRef ))
    285                  {
    286                      SiiDrvOsdSetCursor( pOsd->focusWinRef, SiiDrvOsdGetCursor( pOsd->focusWinRef), OPT_HIDE );
    287                  }
    288          
    289                  // Save the new focus window value.
    290                  pOsd->focusWinRef = winRef;
    291              }
    292          
    293              return( pOsd->focusWinRef );
    294          }
    295          
    296          //-------------------------------------------------------------------------------------------------
    297          //! @brief      Sets the timeout value for the specified window.
    298          //! @param[in]  winRef  - Value returned by any SiiOsdWindowCreate function
    299          //! @param[in]  msTimeout - Window display time in milliseconds.
    300          //-------------------------------------------------------------------------------------------------
    301          bool_t SiiOsdSetWindowTimeout( int winRef, int msTimeout )
    302          {
    303              if ( OsdIsValidWinRef( winRef ))
    304              {
    305                  pOsd->winData[ winRef].msTimeout = msTimeout;   // Set new value.
    306                  return( true );
    307              }
    308              return( false );
    309          }
    310          
    311          //-------------------------------------------------------------------------------------------------
    312          //! @brief      Determines state of window timer
    313          //! @param[in]  winRef  - Value returned by any SiiOsdWindowCreate function
    314          //! @retval     true if timer is expired, false if a not expired or window is not present.
    315          //-------------------------------------------------------------------------------------------------
    316          bool_t SiiOsdIsWindowTimeoutExpired( int winRef )
    317          {
    318              if ( OsdIsValidWinRef( winRef ))
    319              {
    320                  return( SiiOsTimerExpired( pOsd->winData[ winRef].winTimer ) );
    321              }
    322              return( false );
    323          }
    324          
    325          //-------------------------------------------------------------------------------------------------
    326          //! @brief      Show or hide the OSD window display.
    327          //! @param[in]  enableDisplay   true - show, false - hide
    328          //-------------------------------------------------------------------------------------------------
    329          void SiiOsdEnableOsdDisplay ( bool_t enableDisplay )
    330          {
    331              bool_t  isInterlaced;
    332              int     vert, horiz;
    333          
    334              // If enable call and not already enabled, ensure that we have the correct
    335              // resolution fonts loaded.
    336              if ( enableDisplay && !pOsd->isEnabled )
    337              {
    338                  if ( SiiOsdCbGetOutputRes( 0, &horiz, &vert, &isInterlaced )) // Use callback to get proper output resolution
    339                  {
    340                      SiiDrvOsdResolutionChange( SI_VIDEO_MODE_NON_STD, vert, isInterlaced );
    341                  }
    342              }
    343              SiiDrvOsdEnable( enableDisplay );
    344              pOsd->isEnabled = enableDisplay;
    345          }
    346          
    347          //-------------------------------------------------------------------------------------------------
    348          //! @brief      If options OPT_SHOW flag is set, the window is enabled, otherwise it is
    349          //!             disabled. This is the only valid options bit.
    350          //! @param[in]  winRef  - Value returned by any SiiOsdWindowCreate function
    351          //! @param[in]  options - OPT_TOP, OPT_SHOW, OPT_CENTER_WINDOW
    352          //! @retval                 true if successful, false if a failure.
    353          //-------------------------------------------------------------------------------------------------
    354          bool_t SiiOsdShowWindow( int winRef, SiiOsdOptions_t options )
    355          {
    356              int             windowWidth, windowHeight, hRes, vRes;
    357              SiiOsdWindow_t  *pWin;
    358          
    359              if ( OsdIsValidWinRef( winRef ))
    360              {
    361                  pWin = &pOsd->winData[ winRef];
    362          
    363                  if ( options & OPT_CENTER_WINDOW )
    364                  {
    365                      // Only center if screen size is known
    366                      if ( SiiDrvSwitchSelectedPortInfo( true, &hRes, &vRes, NULL, NULL ))
    367                      {
    368                          windowWidth         = (pWin->colCount * pOsd->fontWidth);
    369                          windowHeight        = (pWin->rowCount * pOsd->fontHeight);
    370                          pWin->upperLeftX    = ( hRes - windowWidth ) / 2;
    371                          pWin->upperLeftY    = ( vRes - windowHeight ) / 2;
    372                          SiiDrvOsdSetHorizVert( winRef, pWin->upperLeftX, pWin->upperLeftY );
    373                      }
    374                  }
    375                  SiiDrvOsdShowWindow( winRef, options );    // Let driver do the work
    376          
    377                  // Update our local window status.
    378                  if ( options & OPT_SHOW )
    379                  {
    380                      pWin->windowStatus |= OSD_WSTAT_ENABLED;
    381                      pWin->windowStatus &= ~OSD_WSTAT_INVISIBLE;
    382                  }
    383                  else
    384                  {
    385                      pWin->windowStatus |= OSD_WSTAT_INVISIBLE;
    386                  }
    387          
    388                  if ( options & OPT_TOP )
    389                  {
    390                      SiiDrvOsdSetWindowZaxis( winRef, 0 );
    391                  }
    392          
    393                  // If window has a timer, restart it upon show request
    394                  if ( options & OPT_SHOW )
    395                  {
    396                      if ( pWin->msTimeout )
    397                      {
    398                          SiiOsTimerSet( &pWin->winTimer, pWin->msTimeout );
    399                      }
    400                  }
    401              }
    402          
    403              // If successful at component level, check the driver level.
    404              if ( pOsd->lastResultCode == SII_OSD_SUCCESS )
    405              {
    406                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    407              }
    408          
    409              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
    410          }
    411          
    412          //-------------------------------------------------------------------------------------------------
    413          //! @brief      Write a text string to the specified window row and column.
    414          //!             If options OPT_SHOW flag is set, the window is updated immediately
    415          //! @param[in]  winRef      Value returned by any SiiOsdWindowCreate function
    416          //! @param[in]  row         row within window of string start (0-15)
    417          //! @param[in]  col         column within row of string start (0-31)
    418          //! @param[in]  pStr        Pointer to ASCII string, null terminated
    419          //! @param[in]  options     OPT_RESOURCEID, OPT_ELLIPSIS, OPT_CLEAR_TO_END, OPT_CENTER_TEXT,
    420          //!                         OPT_SHOW, OPT_WRAP_TEXT
    421          //! @retval                 true if successful, false if a failure.
    422          //-------------------------------------------------------------------------------------------------
    423          bool_t SiiOsdWriteText( int winRef, int row, int col, char *pStr, SiiOsdOptions_t options )
    424          {
    425              if ( OsdIsValidWinRef( winRef ))
    426              {
    427                  return( SiiDrvOsdWriteText( winRef, row, col, pStr, options ) );
    428              }
    429              return( false );
    430          }
    431          
    432          //-------------------------------------------------------------------------------------------------
    433          //! @brief      Write a text string to the specified window row and column.
    434          //!             The window is updated immediately
    435          //! @param[in]  winRef      Value returned by any SiiOsdWindowCreate function
    436          //! @param[in]  row         row within window of string start (0-(row-1))
    437          //! @param[in]  col         column within row of string start (0-(column - 1))
    438          //! @param[in]  numChars    Number of characters to display.  Must be less that the remaining
    439          //!                         number of characters in the window.
    440          //! @param[in]  pBuf        Pointer to ASCII string
    441          //! @note       This function is a customer request
    442          //-------------------------------------------------------------------------------------------------
    443          void SiiOsdUpdateChars( uint8_t winRef, uint8_t row, uint8_t col, uint16_t numChars, uint8_t *pBuf )
    444          {
    445              char    strBuffer[OSD_WIN_COL_COUNT * OSD_WIN_ROW_COUNT];
    446              int     writeLength;
    447          
    448              if ( OsdIsValidWinRef( winRef ))
    449              {
    450                  writeLength = sizeof( strBuffer ) - 1;
    451                  writeLength = (numChars <= writeLength) ? numChars : writeLength;
    452                  memcpy( strBuffer, pBuf, writeLength );
    453                  strBuffer[ writeLength] = 0;
    454                  SiiDrvOsdWriteText( winRef, row, col, strBuffer, OPT_SHOW | OPT_WRAP_TEXT );
    455              }
    456          }
    457          
    458          //-------------------------------------------------------------------------------------------------
    459          //! @brief      Write an icon to the specified window row and column. The icon is character-based
    460          //!             and can be any size up to the row/col size of the window. If the options OPT_SHOW
    461          //!             flag is set, the icon is displayed immediately.
    462          //! @note       SiiOsdWriteIcon does NOT translate index values passed via the pIcon parameter as
    463          //!             the SiiWriteText function does, so the actual font character index values must be used.
    464          //! @param[in]  winRef      Value returned by any SiiOsdWindowCreate function
    465          //! @param[in]  row         row within window of string start (0-15)
    466          //! @param[in]  col         column within row of string start (0-31)
    467          //! @param[in]  rowCount    height of icon in character rows
    468          //! @param[in]  colCount    width of icon in character columns
    469          //! @param[in]  pIcon       Pointer to array of icon character indexes or resourceId if OPT_RESOURCEID set.
    470          //! @param[in]  options     OPT_RESOURCEID, OPT_SHOW, OPT_REMOVE_ICON
    471          //! @retval                 true if successful, false if a failure.
    472          //-------------------------------------------------------------------------------------------------
    473          bool_t SiiOsdWriteIcon( int winRef, int row, int col, int rowCount, int colCount, uint8_t *pIcon, SiiOsdOptions_t options )
    474          {
    475              if ( OsdIsValidWinRef( winRef ))
    476              {
    477                  SiiDrvOsdWriteIcon( winRef, row, col, rowCount, colCount, pIcon, options );
    478              }
    479              // If successful at component level, check the driver level.
    480              if ( pOsd->lastResultCode == SII_OSD_SUCCESS )
    481              {
    482                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    483              }
    484          
    485              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
    486          }
    487          
    488          //-------------------------------------------------------------------------------------------------
    489          //! @brief      Move the window to the specified location on the display screen. If the OPT_TOP
    490          //!             option is set, the window is also brought to the top of the window stack on the display.
    491          //!             Change takes effect immediately.
    492          //! @param[in]  winRef      Return value from any SiiOsdCreate function.
    493          //! @param[in]  startX      Upper left pixel horizontal coordinate of window
    494          //! @param[in]  startY      Upper left pixel vertical coordinate of window
    495          //! @param[in]  options     OPT_TOP, OPT_SHOW
    496          //! @retval                 true if successful, false if a failure.
    497          //-------------------------------------------------------------------------------------------------
    498          bool_t SiiOsdMoveWindow( int winRef, int startX, int startY, SiiOsdOptions_t options )
    499          {
    500              SiiOsdWindow_t  *pWin;
    501          
    502              if ( OsdIsValidWinRef( winRef ))
    503              {
    504                  pWin = &pOsd->winData[ winRef];
    505          
    506                  pWin->upperLeftX    = startX;
    507                  pWin->upperLeftY    = startY;
    508                  SiiDrvOsdSetHorizVert( winRef, startX, startY );
    509                  if ( options & ( OPT_TOP | OPT_SHOW ))
    510                  {
    511                      SiiOsdShowWindow( winRef, options );
    512                  }
    513              }
    514          
    515              // If successful at component level, check the driver level.
    516              if ( pOsd->lastResultCode == SII_OSD_SUCCESS )
    517              {
    518                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    519              }
    520          
    521              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
    522          }
    523          
    524          //-------------------------------------------------------------------------------------------------
    525          //! @brief      Set the highlight (cursor) row for the specified window.
    526          //! @param[in]  winRef      Value returned by a SiiOsdWindowCreate function
    527          //! @param[in]  row         new cursor row.
    528          //! @param[in]  options     OPT_HIDE, OPT_SHOW, OPT_ENABLE_CURSOR
    529          //! @return     bool        true: success, false: requested row is disabled or out of range.
    530          //-------------------------------------------------------------------------------------------------
    531          bool_t SiiOsdSetCursor ( int winRef, int row, SiiOsdOptions_t options )
    532          {
    533              if ( OsdIsValidWinRef( winRef ))
    534              {
    535                  if (SiiDrvOsdSetCursor( winRef, row, options ))
    536                  {
    537                      pOsd->winData[ winRef].highlightRow = row;
    538                  }
    539              }
    540              // If successful at component level, check the driver level.
    541              if ( pOsd->lastResultCode == SII_OSD_SUCCESS )
    542              {
    543                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    544              }
    545          
    546              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
    547          }
    548          //-------------------------------------------------------------------------------------------------
    549          //! @brief      Returns the highlight row index of the specified window.
    550          //! @param[in]  winRef      Return value from the SiiOsdWindowCreate function.
    551          //! @retval     Highlight row index
    552          //-------------------------------------------------------------------------------------------------
    553          int SiiOsdGetCursor ( int winRef )
    554          {
    555              if ( OsdIsValidWinRef( winRef ))
    556              {
    557                  return( SiiDrvOsdGetCursor( winRef ) );
    558              }
    559              return( 0 );
    560          }
    561          
    562          //-------------------------------------------------------------------------------------------------
    563          //! @brief      Deactivate a window
    564          //! @param[in]  winRef      Return value from a CreateWindow function.
    565          //! @param[in]  options     OPT_CANCEL, OPT_FORCE_CLOSE
    566          //! @retval     true        Window has been closed.
    567          //! @retval     false       User window function forced window to remain active.
    568          //-------------------------------------------------------------------------------------------------
    569          bool_t SiiOsdCloseWindow( int winRef, SiiOsdOptions_t options )
    570          {
    571              bool_t          wasKilled = false;
    572              SiiOsdWindow_t  *pWin;
    573          
    574              if ( OsdIsValidWinRef( winRef ))
    575              {
    576                  pWin = &pOsd->winData[ winRef];
    577          
    578                  // Call the window function with the CLOSE action
    579          #if INC_OSD_BASE_HANDLER
    580                  if (OsdExecuteUserFunction( winRef, UFA_CLOSE, (options & OPT_CANCEL) ? SIIKEY_CANCEL : SIIKEY_SELECT ) || (options & OPT_FORCE_CLOSE))
    581          #endif // INC_OSD_BASE_HANDLER
    582                  {
    583                      // Do any special window type-specific stuff
    584          #if INC_OSD_BASE_HANDLER
    585                      switch ( pWin->windowType )
    586                      {
    587                          case OSD_WINTYPE_BASIC:
    588                          case OSD_WINTYPE_STATUS:
    589                          case OSD_WINTYPE_SLIDER:
    590                          case OSD_WINTYPE_LISTBOX:
    591                          case OSD_WINTYPE_MENU:
    592                          case OSD_WINTYPE_EDITBOX:
    593                              break;
    594                      }
    595          #endif // INC_OSD_BASE_HANDLER
    596                      SiiDrvOsdCloseWindow( winRef );
    597                      pWin->msTimeout = 0;
    598                      pWin->windowStatus = OSD_WSTAT_AVAILABLE;
    599                      if ( pOsd->focusWinRef == winRef )
    600                      {
    601                          pOsd->focusWinRef = -1;
    602                      }
    603                      wasKilled = true;
    604                  }
    605          
    606                  // Successful at component level, check the driver level.
    607                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    608              }
    609          
    610              return( wasKilled );
    611          }
    612          
    613          //-------------------------------------------------------------------------------------------------
    614          //! @brief      Close all active windows
    615          //! @retval     true        All windows closed
    616          //! @retval     false       User window function forced at least one window to remain active.
    617          //-------------------------------------------------------------------------------------------------
    618          bool_t SiiOsdCloseAll( void )
    619          {
    620              int     winRef;
    621              bool_t  success = true;
    622          
    623              for ( winRef = 0; winRef < SII_OSD_WIN_COUNT; winRef++ )
    624              {
    625                  if ( pOsd->winData[winRef].windowStatus & OSD_WSTAT_ENABLED )
    626                  {
    627                      // Close window, but save any changes
    628                      if ( !SiiOsdCloseWindow( winRef, OPT_CANCEL | OPT_FORCE_CLOSE ))
    629                      {
    630                          success = false;
    631                          break;
    632                      }
    633                  }
    634              }
    635              pOsd->focusWinRef = -1; // Remove focus also.
    636              return( success );
    637          }
    638          
    639          //-------------------------------------------------------------------------------------------------
    640          //! @brief      Initialize a window structure to be used as a base for other window types
    641          //! @param[in]  windowId    - ID of resource to provide window contents and properties. If 0, create
    642          //!                           an empty window.
    643          //! @param[in]  startX      - Upper left pixel horizontal coordinate of window
    644          //! @param[in]  startY      - Upper left pixel vertical coordinate of window
    645          //! @param[in]  rowCount    - Number of character rows in window (1-16)
    646          //! @param[in]  colCount    - Number of character columns per row (1-32)
    647          //! @retval                 - Window reference value if successful
    648          //! @retval                 - -1 if creation failed
    649          //-------------------------------------------------------------------------------------------------
    650          int OsdCreateBaseWindow( int windowId, int startX, int startY, int rowCount, int colCount )
    651          {
    652              SiiOsdWindow_t  *pWin;
    653              int             winRef;
    654          
    655              pOsd->lastResultCode = SII_OSD_ERR_FAIL;
    656          
    657              // Verify that the resource is valid and create the window.
    658              if ( windowId != 0 )
    659              {
    660                  if ( !SiiDrvOsdIsResource( OSD_RESOURCE_WINDOW, windowId ))
    661                  {
    662                      pOsd->lastResultCode = SII_OSD_ERR_FAIL;    //TODO: Need a better error message
    663                      return( -1 );
    664                  }
    665              }
    666          
    667              // Attempt to create the window in hardware
    668              winRef = SiiDrvOsdCreateWindow( windowId, startX, startY, rowCount, colCount );
    669          
    670              // Get window info from driver
    671              SiiDrvOsdGetWindowProperties( winRef, (void*)&pOsd->winData[ winRef] );
    672          
    673              // Fill out the remainder of the window properties, if needed
    674              if ( winRef != -1 )
    675              {
    676                  pWin = &pOsd->winData[ winRef];
    677                  pWin->parentWinRef = -1;       // No parent that we are aware of yet.
    678                  pWin->childWinRef = -1;        // No child that we are aware of yet. (We are all alone in this world!)
    679                  pWin->pExternalData = NULL;
    680                  pWin->pFunction = NULL;
    681                  pOsd->lastResultCode = SII_OSD_SUCCESS;
    682              }
    683          
    684              return( winRef );
    685          }
    686          
    687          //-------------------------------------------------------------------------------------------------
    688          //! @brief      Use the content index data from the passed window resource to fill the specified window.
    689          //! @note       Only the content index data from the resource is used.  It is assumed that there
    690          //!             is enough data in this resource to fill the referenced window.
    691          //! @param[in]  winRef      Return value from a SiiOsdWindowCreate function.
    692          //! @param[in]  windowId    ID of resource to provide window contents and properties.
    693          //! @retval     true        Fill was successful
    694          //! @retval     false       Fill did not happen
    695          //-------------------------------------------------------------------------------------------------
    696          bool_t SiiOsdFillWindow( int winRef, int resourceId )
    697          {
    698              SiiOsdWindow_t  *pWin;
    699          
    700              if ( OsdIsValidWinRef( winRef ))
    701              {
    702                  pWin = &pOsd->winData[ winRef];
    703          
    704                  // Verify that the resource is valid and create the window.
    705                  if ( resourceId != 0 )
    706                  {
    707                      if ( !SiiDrvOsdIsResource( OSD_RESOURCE_WINDOW, resourceId ))
    708                      {
    709                          pOsd->lastResultCode = SII_OSD_NOT_VALID_RESOURCE;
    710                      }
    711                      else
    712                      {
    713                          if (( resourceId != 0 ) && (( resourceId & OSD_RESOURCE_LOCAL_FLAG ) == 0 ))
    714                          {
    715                              // Load only the window content data, using current window sizes.
    716                              if ( !SiiDrvOsdLoadWindowResource( winRef, resourceId, true ))
    717                              {
    718                                  pOsd->lastResultCode = SII_OSD_RESOURCE_LOAD_ERROR;
    719                              }
    720                          }
    721                          else
    722                          {
    723                              pOsd->lastResultCode = SII_OSD_NOT_VALID_RESOURCE;
    724                          }
    725          
    726                      }
    727                  }
    728              }
    729          
    730              // If successful at component level, check the driver level.
    731              if ( pOsd->lastResultCode == SII_OSD_SUCCESS )
    732              {
    733                  pOsd->lastResultCode = (SiiDrvOsdGetLastResult() != 0) ? SII_OSD_ERR_FAIL : SII_OSD_SUCCESS;
    734              }
    735          
    736              return( pOsd->lastResultCode == SII_OSD_SUCCESS );
    737          }
    738          
    739          //-------------------------------------------------------------------------------------------------
    740          //! @brief      Replace the window specs for the passed window with the passed resource ID data.
    741          //! @note       The new window retains the same parent and child window references, but NOT the
    742          //!             resourceId for the child.  Unless care is taken, any child windows of the original
    743          //!             window should be closed prior to calling ReplaceWindow.
    744          //! @param[in]  winRef      Return value from a SiiOsdWindowCreate function.
    745          //! @param[in]  windowId    ID of resource to provide window contents and properties.
    746          //! @retval     true        Replace was successful
    747          //! @retval     false       Replace did not happen
    748          //-------------------------------------------------------------------------------------------------
    749          bool_t SiiOsdReplaceWindow( int winRef, int windowId )
    750          {
    751              SiiOsdWindow_t  *pWin;
    752              bool_t          success = false;
    753              int             param1, param2, param3, param4, editMode, selectedRow;
    754          
    755              if ( !OsdIsValidWinRef( winRef ))
    756              {
    757                  return( false );
    758              }
    759              pWin = &pOsd->winData[ winRef];
    760          
    761              // If given window already contains the specified window resource, we're done.
    762              if ( pWin->resourceId == windowId )
    763              {
    764                  return( true );
    765              }
    766          
    767              // Verify that the resource is valid and create the window.
    768              if ( windowId != 0 )
    769              {
    770                  if ( !SiiDrvOsdIsResource( OSD_RESOURCE_WINDOW, windowId ))
    771                  {
    772                      pOsd->lastResultCode = SII_OSD_ERR_FAIL;    //TODO: Need a better error message
    773                  }
    774                  else
    775                  {
    776                      // For ReplaceWindow, we pass the current windows private data AND selected row.
    777                      param1      = pWin->param1;
    778                      param2      = pWin->param2;
    779                      param3      = pWin->param3;
    780                      param4      = pWin->param4;
    781                      editMode    = pWin->editMode;
    782                      selectedRow = pWin->highlightRow;
    783          
    784                      // Attempt to create the window in hardware
    785                      winRef = SiiDrvOsdCreateWindow( windowId, -1, winRef, 0, 0 );  // Create the window with special parameter values
    786          
    787                      // Get window info from driver
    788                      SiiDrvOsdGetWindowProperties( winRef, (void*)&pOsd->winData[ winRef] );
    789                      pOsd->winData[ winRef].windowStatus &= ~OSD_WSTAT_INVISIBLE;        // It would defeat the purpose for it to be invisible
    790                      success = true;
    791                  }
    792              }
    793          
    794              // Fill out the remainder of the window properties, if needed
    795              if ( success )
    796              {
    797          #if INC_OSD_BASE_HANDLER
    798                  // Call the window function with the REPLACE_WINDOW action (almost the same as CREATE)
    799                  // Note that winRef refers to the new window now, not the calling window. However, the private data
    800                  // and the selected row from the original window is sent to the new window in the REPLACEWINDOW message
    801                  pWin->param1 = param1;
    802                  pWin->param2 = param2;
    803                  pWin->param3 = param3;
    804                  pWin->param4 = param4;
    805                  pWin->editMode = editMode;
    806                  pWin->highlightRow = selectedRow;
    807                  success = OsdExecuteUserFunction( winRef, UFA_REPLACEWINDOW, -1 );
    808          #endif // INC_OSD_BASE_HANDLER
    809              }
    810          
    811              return( success );
    812          }
    813          
    814          //-------------------------------------------------------------------------------------------------
    815          //! @brief      Create an OSD window
    816          //! @param[in]  windowId        ID of resource to provide window contents and properties. If 0,
    817          //!                             create an empty window.
    818          //! @param[in]  startX          Upper left pixel horizontal coordinate of window
    819          //! @param[in]  startY          Upper left pixel vertical coordinate of window
    820          //! @param[in]  rowCount        Number of character rows in window (1-16)
    821          //! @param[in]  colCount        Number of character columns per row (1-32)
    822          //! @param[in]  pWinTypeData    Pointer to a SiiOsdWinTypeData_t further describing the window
    823          //! @param[in]  options         OPT_SHOW, OPT_TOP
    824          //! @retval                     Window reference value if successful
    825          //! @retval                     -1 if creation failed
    826          //-------------------------------------------------------------------------------------------------
    827          int SiiOsdCreateWindow( int windowId, int startX, int startY, int rowCount, int colCount, SiiOsdWinTypeData_t *pWinTypeData, SiiOsdOptions_t options )
    828          {
    829              int             winRef = -1;
    830              SiiOsdWindow_t  *pWin;
    831          
    832              // Create a base window with the supplied window specs.
    833              winRef = OsdCreateBaseWindow( windowId, startX, startY, rowCount, colCount );
    834              if ( winRef == -1 )
    835              {
    836                  pOsd->lastResultCode = SII_OSD_ERR_NOT_AVAIL;
    837                  return( -1 );
    838              }
    839              pOsd->lastResultCode    = SII_OSD_SUCCESS;
    840              pWin                    = &pOsd->winData[ winRef];
    841          
    842              // If function parameters are non-zero, they override the resource values.
    843              if ( startX || startY )
    844              {
    845                  pWin->upperLeftX    = (startX)? startX : pWin->upperLeftX;
    846                  pWin->upperLeftY    = (startY)? startY : pWin->upperLeftY;
    847                  SiiDrvOsdSetHorizVert( winRef, pWin->upperLeftX, pWin->upperLeftY );
    848              }
    849          
    850              // If not default window type, update here
    851              if ( pWinTypeData )
    852              {
    853                  pWin->windowType = pWinTypeData->winType;  // Set to our type
    854                  if ( pWinTypeData->useParamValues )
    855                  {
    856                      pWin->param1 = pWinTypeData->param1;
    857                      pWin->param2 = pWinTypeData->param2;
    858                      pWin->param3 = pWinTypeData->param3;
    859                      pWin->param4 = pWinTypeData->param4;
    860                      pWin->editMode = pWinTypeData->editMode;
    861                  }
    862              }
    863          
    864              // Give the window function a chance to initialize the window before display
    865          #if INC_OSD_BASE_HANDLER
    866              if ( !OsdExecuteUserFunction( winRef, UFA_CREATE, -1 ))
    867              {
    868                  // User function said no, fail the window create.
    869                  SiiOsdCloseWindow( winRef, OPT_CANCEL );
    870                  pOsd->lastResultCode = SII_OSD_ERR_USER_FUNC_FAIL;
    871                  winRef = -1;
    872              }
    873          #endif // INC_OSD_BASE_HANDLER
    874          
    875              // Display if requested
    876              if ( options & OPT_SHOW )
    877              {
    878                  SiiOsdShowWindow( winRef, options );
    879              }
    880          
    881              return( winRef );
    882          }
    883          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  OsdCreateBaseWindow
              32 -> SiiDrvOsdCreateWindow
              32 -> SiiDrvOsdGetWindowProperties
              32 -> SiiDrvOsdIsResource
        0  OsdIsValidActiveWinRef
        0  OsdIsValidWinRef
       16  SiiOsdAssignChildWinRef
              16 -> OsdIsValidWinRef
       16  SiiOsdAttachExternalData
              16 -> OsdIsValidActiveWinRef
       16  SiiOsdAttachFunction
              16 -> OsdIsValidActiveWinRef
       16  SiiOsdCloseAll
              16 -> SiiOsdCloseWindow
       24  SiiOsdCloseWindow
              24 -> OsdExecuteUserFunction
              24 -> OsdIsValidWinRef
              24 -> SiiDrvOsdCloseWindow
              24 -> SiiDrvOsdGetLastResult
       40  SiiOsdCreateWindow
              40 -> OsdCreateBaseWindow
              40 -> OsdExecuteUserFunction
              40 -> SiiDrvOsdSetHorizVert
              40 -> SiiOsdCloseWindow
              40 -> SiiOsdShowWindow
       24  SiiOsdEnableOsdDisplay
              24 -> SiiDrvOsdEnable
              24 -> SiiDrvOsdResolutionChange
              24 -> SiiOsdCbGetOutputRes
       16  SiiOsdFillWindow
              16 -> OsdIsValidWinRef
              16 -> SiiDrvOsdGetLastResult
              16 -> SiiDrvOsdIsResource
              16 -> SiiDrvOsdLoadWindowResource
        8  SiiOsdGetCursor
               8 -> OsdIsValidWinRef
               0 -> SiiDrvOsdGetCursor
        0  SiiOsdGetFocus
       16  SiiOsdIsRowEnabled
              16 -> OsdIsValidWinRef
               0 -> SiiDrvOsdRowIsEnabled
        8  SiiOsdIsWindowTimeoutExpired
               8 -> OsdIsValidWinRef
               0 -> SiiOsTimerExpired
       24  SiiOsdMoveWindow
              24 -> OsdIsValidWinRef
              24 -> SiiDrvOsdGetLastResult
              24 -> SiiDrvOsdSetHorizVert
              24 -> SiiOsdShowWindow
       56  SiiOsdReplaceWindow
              56 -> OsdExecuteUserFunction
              56 -> OsdIsValidWinRef
              56 -> SiiDrvOsdCreateWindow
              56 -> SiiDrvOsdGetWindowProperties
              56 -> SiiDrvOsdIsResource
       24  SiiOsdSetColor
              24 -> OsdIsValidWinRef
              24 -> SiiDrvOsdGetLastResult
              24 -> SiiDrvOsdSetColor
       24  SiiOsdSetCursor
              24 -> OsdIsValidWinRef
              24 -> SiiDrvOsdGetLastResult
              24 -> SiiDrvOsdSetCursor
       16  SiiOsdSetFocus
              16 -> OsdExecuteUserFunction
              16 -> OsdIsValidWinRef
              16 -> SiiDrvOsdGetCursor
              16 -> SiiDrvOsdSetCursor
              16 -> SiiDrvOsdSetWindowZaxis
       24  SiiOsdSetRowEnable
              24 -> OsdIsValidWinRef
              24 -> SiiDrvOsdGetLastResult
              24 -> SiiDrvOsdRowEnable
       32  SiiOsdSetWindowPrivateData
              32 -> OsdIsValidActiveWinRef
       16  SiiOsdSetWindowTimeout
              16 -> OsdIsValidWinRef
       32  SiiOsdShowWindow
              32 -> OsdIsValidWinRef
              32 -> SiiDrvOsdGetLastResult
              32 -> SiiDrvOsdSetHorizVert
              32 -> SiiDrvOsdSetWindowZaxis
              32 -> SiiDrvOsdShowWindow
              32 -> SiiDrvSwitchSelectedPortInfo
              32 -> SiiOsTimerSet
      544  SiiOsdUpdateChars
             544 -> OsdIsValidWinRef
             544 -> SiiDrvOsdWriteText
             544 -> __aeabi_memcpy
       48  SiiOsdWriteIcon
              48 -> OsdIsValidWinRef
              48 -> SiiDrvOsdGetLastResult
              48 -> SiiDrvOsdWriteIcon
       32  SiiOsdWriteText
              32 -> OsdIsValidWinRef
              32 -> SiiDrvOsdWriteText


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
      12  ?Subroutine0
      30  ?Subroutine1
      12  ?Subroutine2
       4  ?Subroutine3
       8  ?Subroutine4
     112  OsdCreateBaseWindow
      36  OsdIsValidActiveWinRef
      24  OsdIsValidWinRef
      44  SiiOsdAssignChildWinRef
      32  SiiOsdAttachExternalData
      32  SiiOsdAttachFunction
      56  SiiOsdCloseAll
     102  SiiOsdCloseWindow
     186  SiiOsdCreateWindow
      52  SiiOsdEnableOsdDisplay
      84  SiiOsdFillWindow
      22  SiiOsdGetCursor
      16  SiiOsdGetFocus
      60  SiiOsdIsRowEnabled
      36  SiiOsdIsWindowTimeoutExpired
      88  SiiOsdMoveWindow
     180  SiiOsdReplaceWindow
      32  SiiOsdSetColor
      32  SiiOsdSetCursor
     122  SiiOsdSetFocus
      38  SiiOsdSetRowEnable
      56  SiiOsdSetWindowPrivateData
      30  SiiOsdSetWindowTimeout
     182  SiiOsdShowWindow
      80  SiiOsdUpdateChars
      84  SiiOsdWriteIcon
      42  SiiOsdWriteText

 
 1 930 bytes in section .text
 
 1 930 bytes of CODE memory

Errors: none
Warnings: 6

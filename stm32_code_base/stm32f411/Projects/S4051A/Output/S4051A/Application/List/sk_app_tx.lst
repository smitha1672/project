###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:23:58 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\application\sk_app_tx.c #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\application\sk_app_tx.c #
#                     -D S4051A -D DEBUG -D FREE_RTOS -D STM32F40_41xxx -D    #
#                    USE_STM324xG_EVAL -D USE_STDPERIPH_DRIVER -D             #
#                    __ARM_CORTEX_MX__ -D IAR_ARM_CM4F -D USE_USB_OTG_FS      #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applicati #
#                    on\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Ap #
#                    plication\Obj\ --debug --endian=little --cpu=Cortex-M4   #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\sk_app_tx.lst                                         #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\sk_app_tx.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\application\sk_app_tx.c
      1          //***************************************************************************
      2          //! @file     sk_app_tx.c
      3          //! @brief    Wraps board and device functions for the TX component
      4          //            and the application
      5          //
      6          // No part of this work may be reproduced, modified, distributed,
      7          // transmitted, transcribed, or translated into any language or computer
      8          // format, in any form or by any means without written permission of
      9          // Silicon Image, Inc., 1140 East Arques Avenue, Sunnyvale, California 94085
     10          //
     11          // Copyright 2011-2012, Silicon Image, Inc.  All rights reserved.
     12          //***************************************************************************/
     13          
     14          #include "sk_application.h"
     15          #include "si_tx_component.h"
     16          #include "si_drv_tpi_system.h"
     17          #include "si_edid_tx_component.h"
     18          #include "si_drv_nvram_sram.h"
     19          #include "si_cbus_config.h"
     20          #if INC_CEC
     21          #include "si_cec_component.h"
     22          #include "sk_app_cec.h"
     23          #endif
     24          #if INC_AUDIO_RX
     25          #include "si_drv_audio.h"
     26          #endif
     27          
     28          #include "si_drv_audio_mix.h"
     29          #include "si_drv_switch.h"
     30          #include "si_osal_timer.h"
     31          #if INC_OSD
     32          #include "si_osd_component.h"
     33          #endif
     34          #include "si_drv_repeater.h"
     35          
     36          #if ( configSII_DEV_953x_PORTING == 1 )
     37          #include "Debug.h"
     38          #endif 
     39          
     40          //-------------------------------------------------------------------------------------------------
     41          // Manifest constants
     42          //-------------------------------------------------------------------------------------------------
     43          
     44          // Minimal time delay (in ms) that has to have elapsed before repeated call of
     45          // the TX Task Process function
     46          #define SI_TX_TIME_STEP_MIN_MS         20
     47          
     48          extern int_t SiiDrvRxPipePortGet ( int_t pipe );
     49          
     50          #if (MHL_20 == ENABLE) /*Smith modifies*/
     51          extern void CreateMHL3DData(bool_t isDismissEDID);
     52          #endif 
     53          
     54          static bool_t CheckMhl3DVsi(uint8_t *pVsi);
     55          //-------------------------------------------------------------------------------------------------
     56          //! @brief      Configure current TX audio and video mode
     57          //!
     58          //! @param[in]  videoSrc    - source of video for TX
     59          //! @param[in]  videoFormat - format of the video from source
     60          //! @param[in]  audioSrc    - source of audio for TX
     61          //-------------------------------------------------------------------------------------------------
     62          
     63          static void InputAudVidConfig(txVideoSource_t videoSrc, videoFormatId_t videoFormat,
     64                                        txAudioSrc_t audioSrc, audioSampleRate_t audioSampRate,
     65                                        bool_t isNonHdmiAudio)
     66          {
     67              txVideoBusMode_t    busMode;
     68              audioFormat_t       audioFormat;
     69              txAudioSrcConfig_t  audioI2sConfig;
     70              uint8_t txInstance;
     71              uint8_t Ri128CompValue[2][3]={{0x0, 0x0, 0x7f},{0x0, 0x7f, 0x7f}};
     72          
     73              // Reset audio format descriptor
     74              memset(&audioFormat, 0, sizeof(audioFormat_t));
     75          
     76              // Get instance index
     77              txInstance = SiiTxInstanceGet();
     78          
     79              // VIDEO --------------------------------------------------------------
     80              switch (videoSrc)
     81              {
     82                  case SI_TX_VIDEO_SOURCE_PGEN:
     83                      // Set input Video for TPG Source
     84                       busMode.clockMode = SI_TX_VBUS_CLOCK_NORMAL;
     85                       busMode.colorSpace = SI_TX_VBUS_COLOR_SPACE_RGB;
     86                       busMode.bitsPerColor = SI_TX_VBUS_BITS_PER_COLOR_8;
     87                       busMode.colorimetry = SI_TX_VIDEO_COLORIMETRY_ITU601;
     88                       busMode.pixelRepetition = SI_TX_VIDEO_SRC_PIXEL_REP_1;
     89                       busMode.isLatchOnRisingEdge = false;
     90          
     91                       SiiTxVideoSourceConfig(videoSrc, &busMode);
     92                       SiiTxInputVideoModeSet(videoFormat, NULL, SI_TX_VIDEO_3D_NONE, SI_TX_VIDEO_HVSYNC_DE, NULL);
     93          
     94                       SiiDrvTpiHdcpRi128Comp(Ri128CompValue[txInstance][SI_TX_VIDEO_SOURCE_PGEN]);
     95          
     96                       break;
     97                  case SI_TX_VIDEO_SOURCE_HDMI:
     98                  default:
     99                      SiiTxVideoSourceConfig(SI_TX_VIDEO_SOURCE_HDMI, NULL);
    100                      if(!isNonHdmiAudio)
    101                      {
    102          				SiiTxInputAudioModeSet(SI_TX_AUDIO_SRC_NONE, &audioFormat);
    103                      }
    104          
    105                      SiiDrvTpiHdcpRi128Comp(Ri128CompValue[txInstance][SI_TX_VIDEO_SOURCE_HDMI]);
    106          
    107                      break;
    108              }
    109          
    110              // AUDIO --------------------------------------------------------------
    111              if (videoSrc != SI_TX_VIDEO_SOURCE_HDMI || isNonHdmiAudio)
    112              {
    113                  if(audioSrc != SI_TX_AUDIO_SRC_NONE)
    114                  {
    115                      switch (audioSrc)
    116                      {
    117                          default:
    118                          case SI_TX_AUDIO_SRC_SPDIF:
    119                          case SI_TX_AUDIO_SRC_I2S_L0:
    120                              // Set Audio parameters
    121                              audioFormat.channelCount = 2;
    122                              audioFormat.encoding = SI_TX_AUDIO_ENC_PCM;
    123                              audioFormat.smpRate = audioSampRate;
    124                              audioFormat.smpSize = SI_TX_AUDIO_SMP_SIZE_24_BIT;
    125                              audioFormat.isDwnMxInhibit = false;
    126                              audioFormat.lShift = 0;
    127                              audioFormat.lfePbLevel = 0;
    128                              audioFormat.spkMap = SI_TX_AUDIO_SPK_FL_FR;
    129          
    130                              // I2S only parameters
    131                              audioI2sConfig.mclkMult = SI_TX_AUDIO_I2S_MCLK_MULT_256;
    132                              audioI2sConfig.sampleEdge = SI_TX_AUDIO_I2S_SCK_EDGE_FALLING;
    133                              audioI2sConfig.wsPolarity = SI_TX_AUDIO_I2S_WS_LOW;
    134                              audioI2sConfig.sdJustify = SI_TX_AUDIO_I2S_SD_JUSTIF_LEFT;
    135                              audioI2sConfig.sdDirection = SI_TX_AUDIO_I2S_SD_DIR_MSB;
    136                              audioI2sConfig.sdFirstBitShifted = SI_TX_AUDIO_I2S_SD_BIT0_SHIFTED;
    137                              break;
    138          
    139                          case SI_TX_AUDIO_SRC_I2S_L1:
    140                              // Set Audio parameters
    141                              audioFormat.channelCount = 8;
    142                              audioFormat.encoding = SI_TX_AUDIO_ENC_PCM;
    143                              audioFormat.smpRate = audioSampRate;
    144                              audioFormat.smpSize = SI_TX_AUDIO_SMP_SIZE_24_BIT;
    145                              audioFormat.isDwnMxInhibit = false;
    146                              audioFormat.lShift = 0;
    147                              audioFormat.lfePbLevel = 0;
    148                              audioFormat.spkMap = SI_TX_AUDIO_SPK_FL_FR_LFE_FC_RL_RR_RLC_RRC;
    149          
    150                              // I2S only parameters
    151                              audioI2sConfig.mclkMult = SI_TX_AUDIO_I2S_MCLK_MULT_256;
    152                              audioI2sConfig.sampleEdge = SI_TX_AUDIO_I2S_SCK_EDGE_FALLING;
    153                              audioI2sConfig.wsPolarity = SI_TX_AUDIO_I2S_WS_LOW;
    154                              audioI2sConfig.sdJustify = SI_TX_AUDIO_I2S_SD_JUSTIF_LEFT;
    155                              audioI2sConfig.sdDirection = SI_TX_AUDIO_I2S_SD_DIR_MSB;
    156                              audioI2sConfig.sdFirstBitShifted = SI_TX_AUDIO_I2S_SD_BIT0_SHIFTED;
    157          
    158                              break;
    159                          case SI_TX_AUDIO_SRC_HBRA:
    160                              // Set Audio parameters
    161                              audioFormat.channelCount = 8;
    162                              audioFormat.encoding = SI_TX_AUDIO_ENC_DTSHD;
    163                              audioFormat.smpRate = SI_TX_AUDIO_SMP_RATE_192_KHZ;
    164                              audioFormat.smpSize = SI_TX_AUDIO_SMP_SIZE_24_BIT;
    165                              audioFormat.isDwnMxInhibit = false;
    166                              audioFormat.lShift = 0;
    167                              audioFormat.lfePbLevel = 0;
    168                              audioFormat.spkMap = SI_TX_AUDIO_SPK_FL_FR_LFE_FC_RL_RR_RLC_RRC;
    169          
    170                              // I2S only parameters
    171                              audioI2sConfig.mclkMult = SI_TX_AUDIO_I2S_MCLK_MULT_128;
    172                              audioI2sConfig.sampleEdge = SI_TX_AUDIO_I2S_SCK_EDGE_FALLING;
    173                              audioI2sConfig.wsPolarity = SI_TX_AUDIO_I2S_WS_LOW;
    174                              audioI2sConfig.sdJustify = SI_TX_AUDIO_I2S_SD_JUSTIF_LEFT;
    175                              audioI2sConfig.sdDirection = SI_TX_AUDIO_I2S_SD_DIR_MSB;
    176                              audioI2sConfig.sdFirstBitShifted = SI_TX_AUDIO_I2S_SD_BIT0_SHIFTED;
    177                              break;
    178                      }
    179          
    180                      //SiiDrvTpiAudioClkDividerSet(0, (audioSrc == SI_TX_AUDIO_SRC_SPDIF));
    181                      SiiTxAudioSourceConfig(audioSrc, &audioI2sConfig);
    182                      SiiTxInputAudioModeSet(audioSrc, &audioFormat);
    183                      SiiTxInputAudioUnmute();
    184                  }
    185              }
    186              else
    187              {
    188                  SiiTxInputAudioModeSet(SI_TX_AUDIO_SRC_NONE, &audioFormat);
    189              }
    190          
    191          }
    192          
    193          //-------------------------------------------------------------------------------------------------
    194          //! @brief      Configure TX instance to start sending HDCP protected
    195          //!             (if required) A/V content.
    196          //!
    197          //! @param[in]  instance - TX instance
    198          //!
    199          //-------------------------------------------------------------------------------------------------
    200          
    201          static void StartTx(uint8_t instance)
    202          {
    203              SiiTxOutputInterfaceSet(SI_TX_OUTPUT_MODE_HDMI);
    204              //  Bug 33155 - Compatibility: Melbourne vs. LGTV 42LM5700-CE: Hot-unplug/plug HDMI cable causes NO video on TV
    205              if (SiiTxGetLastResult().lastErrorCode == SI_TX_ERROR_CODE_HDMI_NOT_SUPPORTED_BY_DS)
    206              {
    207                  SiiTxOutputInterfaceSet(SI_TX_OUTPUT_MODE_DVI);
    208                  SiiDrvRxAudioMixPassThroughConfig(false, false);
    209              }
    210          
    211              InputAudVidConfig(app.currentVideoSrc[instance],
    212                                app.currentVideoFormat[instance],
    213                                app.currentAudioType[instance],
    214                                app.audioSampleRate[instance], false);
    215          
    216          
    217              SiiTxResume();          // enable TMDS
    218          #if INC_OSD
    219          //    SiiDrvOsdStateUpdate();
    220          #endif
    221          
    222              // Copy AIF from selected Rx source if in audio overlay mode
    223              if ((app.currentAudioSource[instance] == SiiSwitchAudioSourceMainPipe) ||
    224                  (app.currentAudioSource[instance] == SiiSwitchAudioSourceSubPipe))
    225              {
    226                  bool_t isMainPipeAudio =  (app.currentAudioSource[instance] == SiiSwitchAudioSourceMainPipe);
    227          
    228                  SiiDrvTpiAudioRxSource(true, isMainPipeAudio);
    229                  // Copy AIF to TX
    230                  SkAppTxCopyAif(instance, isMainPipeAudio);
    231                  SiiDrvRxAudioInstanceSet(isMainPipeAudio);
    232                  SiiDrvRxAudioFifoRedirSet(true);
    233                  SiiTxInputAudioUnmute();
    234              }
    235              else
    236              {
    237                  SiiDrvTpiAudioRxSource(false, true);
    238                  SiiDrvRxAudioInstanceSet(0);
    239                  SiiDrvRxAudioFifoRedirSet(false);
    240                  SiiDrvRxAudioInstanceSet(1);
    241                  SiiDrvRxAudioFifoRedirSet(false);
    242              }
    243          
    244              SiiTxRecoverAfterSourceClockInterruption();
    245          
    246              if (!app.isTxRepeaterMode[instance])
    247              {
    248                  if (app.isTxHdcpRequired[instance])
    249                  {
    250                      SiiRepeaterForceShaSet(instance, true); // Tie SHA engine to resuming TX
    251                      SiiTxAvMute();
    252                      SiiTxHdcpEnable();
    253                  }
    254                  else
    255                  {
    256                      SiiTxHdcpDisable();
    257                      SiiTxAvUnmute();
    258                  }
    259              }
    260          
    261          }
    262          
    263          //-------------------------------------------------------------------------------------------------
    264          //! @brief      Configures TX instance to stop sending A/V content.
    265          //!
    266          //! @param[in]  instance - TX instance
    267          //!
    268          //-------------------------------------------------------------------------------------------------
    269          
    270          static void StopTx(uint8_t instance)
    271          {
    272              app.currentVideoSrc[instance] = SI_TX_VIDEO_SOURCE_HDMI;
    273              app.currentVideoFormat[instance] = vm1_640x480p; // default setting, has no effect
    274              //app.currentAudioType[instance] = SI_TX_AUDIO_SRC_NONE;
    275          
    276              InputAudVidConfig(app.currentVideoSrc[instance],
    277                                app.currentVideoFormat[instance],
    278                                app.currentAudioType[instance],
    279                                app.audioSampleRate[instance], false);
    280          
    281              if (!app.isTxRepeaterMode[instance])
    282              {
    283                  if (app.isTxHdcpRequired[instance])
    284                  {
    285                      SiiTxHdcpDisable();
    286                      SiiRepeaterForceShaSet(instance, false); // release SHA
    287                  }
    288              }
    289          }
    290          
    291          
    292          //-------------------------------------------------------------------------------------------------
    293          //! @brief      Configures TX to start or stop sending A/V content.
    294          //!
    295          //! @param[in]  instance  - TX instance (0 or 1)
    296          //! @param[in]  isEnabled - determines if to start (true) or stop (false) transmitters
    297          //!
    298          //-------------------------------------------------------------------------------------------------
    299          
    300          static void EnableTransmitter(uint8_t instance, bool_t isEnabled)
    301          {
    302                  SiiDrvRxAudioMixInstanceSet(instance);
    303                  SkAppTxInstanceSet(instance);
    304          
    305                  if (isEnabled)
    306                  {
    307                      // Disable HDCP in case previous mode left it enabled
    308                      SiiTxHdcpDisable();
    309          
    310                      // Disable bypassing audio packet by audio mixer
    311                      SiiDrvRxAudioMixPassThroughConfig(false, false);
    312          
    313                      if (SiiTxStatusGet().isSinkReady)
    314                      {
    315                          StartTx(instance);
    316                      }
    317                  }
    318                  else
    319                  {
    320                      StopTx(instance);
    321                      // Enable bypassing audio packet by audio mixer
    322                      SiiDrvRxAudioMixPassThroughConfig(true, true);
    323                  }
    324          }
    325          
    326          
    327          //-------------------------------------------------------------------------------------------------
    328          //  TX application level API functions
    329          //-------------------------------------------------------------------------------------------------
    330          
    331          //-------------------------------------------------------------------------------------------------
    332          //! @brief      Set instance of Tx and dependent components (EdidTx).
    333          //!
    334          //!             This function must be used instead of direct call to the component Tx API
    335          //!             instance setting function.
    336          //!
    337          //! @param[in]  instance - instance of the current TX
    338          //-------------------------------------------------------------------------------------------------
    339          
    340          void SkAppTxInstanceSet(uint8_t instance)
    341          {
    342              SiiTxInstanceSet(instance);
    343          
    344              if (app.numOfEdidTxInst == 2)
    345              {
    346                  // "I" topology case.
    347                  // In 2 instance mode of EdidTx, only single Tx per EdidTx instance is serviced
    348                  // So that there is 1:1 relationship between Tx and EdidTx component instances
    349                  SiiEdidTxInstanceSet(instance);
    350              }
    351              else
    352              {
    353                  // Select EDID TX input for the case of "Y" topology
    354                  // when one EdidTx component service both transmitters
    355                  // Limitation: TX branches in "Y" topology shall have instance indexes [0,1,...]
    356                  SiiEdidTxInputSet(instance);
    357              }
    358          }
    359          
    360          
    361          #if INC_IV
    362          //-------------------------------------------------------------------------------------------------
    363          //! @brief      Enable or Disable internal video pattern generator.
    364          //-------------------------------------------------------------------------------------------------
    365          
    366          void SkAppTpgEnable ( bool_t isEnabled )
    367          {
    368              if (isEnabled)
    369              {
    370                  // Configure Audio PLLs if TPG will uses their output as clock source
    371                  SiiDrvRxAudioInstanceSet(0);
    372                  SiiDrvRxAudioPllConfig(app.tpgClockSrc == SI_TPG_CLK_P0);
    373                  SiiDrvRxAudioInstanceSet(1);
    374                  SiiDrvRxAudioPllConfig(app.tpgClockSrc == SI_TPG_CLK_P1);
    375          
    376                  // Enable TPG (or ETPG)
    377                  SiiDrvTpgVideoFormatSet(app.tpgVideoFormat, app.tpgClockSrc);
    378                  if (app.isExtTpg)
    379                  {
    380                  	SiiDrvExtTpgPatternSet(app.tpgVideoPattern);
    381                      SiiDrvExtTpgEnable(true);
    382                  }
    383                  else
    384                  {
    385                      SiiDrvTpgEnable(true);
    386                  }
    387                  SiiOsTimerWait(10);// wait for input video clock to settle
    388              }
    389              else
    390              {
    391                  // Release audio PLLs if used
    392                  SiiDrvRxAudioInstanceSet(0);
    393                  SiiDrvRxAudioPllConfig(false);
    394                  SiiDrvRxAudioInstanceSet(1);
    395                  SiiDrvRxAudioPllConfig(false);
    396                 // SiiDrvTpgVideoFormatSet(app.tpgVideoFormat, app.tpgClockSrc);
    397                  // Disable TPG (or ETPG)
    398                  if (app.isExtTpg)
    399                  {
    400                      SiiDrvExtTpgEnable(false);
    401                  }
    402                  else
    403                  {
    404                      SiiDrvTpgEnable(false);
    405                  }
    406              }
    407          }
    408          
    409          
    410          //-------------------------------------------------------------------------------------------------
    411          //! @brief      Configure TX to show test pattern and transmit external audio.
    412          //-------------------------------------------------------------------------------------------------
    413          
    414          void SkAppInternalVideoConfig ( uint_t txInstance, bool_t isTxEnabled)
    415          {
    416              videoFormatId_t videoFormat;
    417          
    418              // Convert to proper video format for TPG video
    419              switch (app.tpgVideoFormat)
    420              {
    421                  default:
    422                  case SI_TPG_FMT_VID_720_60:
    423                      videoFormat = vm4_1280x720p;
    424                      break;
    425                  case SI_TPG_FMT_VID_576_50:
    426                      videoFormat = vm17_18_720x576p;
    427                      break;
    428                  case SI_TPG_FMT_VID_480_60:
    429                      videoFormat = vm2_3_720x480p;
    430                      break;
    431              }
    432          
    433              app.currentVideoSrc[txInstance] = SI_TX_VIDEO_SOURCE_PGEN;
    434              app.currentVideoFormat[txInstance] = videoFormat;
    435              EnableTransmitter(txInstance, isTxEnabled);
    436          #if INC_OSD
    437              // Adjust OSD font for the resolution, if TX0 switches in TPG mode
    438              if (txInstance == 0)
    439              {
    440                  if (isTxEnabled)
    441                  {
    442                      SiiDrvOsdResolutionChange( videoFormat, 0, 0 );
    443                      if ( app.isOsdMenuEnabled )
    444                      {
    445                          SiiOsdEnableOsdDisplay( true );
    446                      }
    447                  }
    448              }
    449          #endif //#if INC_OSD
    450          }
    451          #endif
    452          
    453          //-------------------------------------------------------------------------------------------------
    454          //! @brief      Configure TX to transmit external audio (video is bypassed).
    455          //-------------------------------------------------------------------------------------------------
    456          
    457          void SkAppExtAudioInsertConfig(int_t txInstance, bool_t isEnabled)
    458          {
    459          	uint8_t audioSampleRate;
    460          
    461          	audioSampleRate = SiiDrvRxAudioSampleRateGet();
    462          
    463              //DEBUG_PRINT(MSG_DBG, "\n\n audioSampleRate =%x\n\n",audioSampleRate);
    464          	app.audioSampleRate[txInstance] = audioSampleRate + 1;
    465          
    466          
    467              app.currentVideoSrc[txInstance]  = SI_TX_VIDEO_SOURCE_HDMI;
    468          
    469          
    470          
    471          
    472              //DEBUG_PRINT(MSG_DBG, "\n\n SkAppExtAudioInsertConfig =%x %x %x %x %x\n\n", app.currentVideoSrc[txInstance],app.currentVideoFormat[txInstance],app.currentAudioType[txInstance], app.audioSampleRate[txInstance],txInstance);
    473          
    474              InputAudVidConfig(app.currentVideoSrc[txInstance],
    475                                app.currentVideoFormat[txInstance],
    476                                app.currentAudioType[txInstance],
    477                                app.audioSampleRate[txInstance], isEnabled);
    478          
    479          }
    480          
    481          
    482          
    483          //-------------------------------------------------------------------------------------------------
    484          //! @brief      TX Edid component initialization.
    485          //!
    486          //! @param[in]  isMatrixMode - indicate if device is in matrix mode (two independent pipes)
    487          //! @retval     true - if initialization was successful.
    488          //-------------------------------------------------------------------------------------------------
    489          
    490          bool_t SkAppDeviceInitEdidTx (bool_t isAudioByPass)
    491          {
    492              bool_t   success = false;
    493              uint16_t videoFeatureMask, audioFeatureMask, miscOptionsMask;
    494              uint8_t  numOfTxPerEdidTxInst;
    495              uint8_t  instance;
    496          
    497              // In non-matrix mode there is only one Rx source providing content for 1 or 2 Tx.
    498              // Therefore, only one instance of EDID Tx component servicing up to 2 Tx is required.
    499              // If 2 transmitters are connected to one Rx, a merged EDID structure is created.
    500              // The merged EDID includes the capability declarations common for both TXs
    501              app.numOfEdidTxInst = 1;
    502              numOfTxPerEdidTxInst = 1;
    503              // In case of the joint TX EDID, it's more convenient to use legacy Rx EDID mode
    504              // (One common EDID is shared across all ports)
    505              SiiDrvNvramEdidModeSet(SII_NVRAM_LEGACY_EDID_MODE);
    506          
    507              DEBUG_PRINT(MSG_DBG, "EDID Tx Component has %d instances.\n", app.numOfEdidTxInst);
    508          	TRACE_DEBUG((0, "[ HDMI MSG ] SkAppDeviceInitEdidTx"));
    509          
    510              for (instance = 0; instance < app.numOfEdidTxInst; ++instance)
    511              {
    512                  SiiEdidTxInstanceSet(instance);
    513          
    514                  if ( SiiEdidTxInitialize())
    515                  {
    516                      videoFeatureMask =
    517                          SI_TX_EDID_VIDEO_CFG_ALLOW_BAD_CSUM_FOR_BLOCK0          |
    518                          SI_TX_EDID_VIDEO_CFG_ALLOW_PC_MODES_NO_SCALER           |
    519                          SI_TX_EDID_VIDEO_CFG_BYPASS_SCALER                      |
    520                          SI_TX_EDID_VIDEO_CFG_ENABLE_REMEDIES                    |
    521                          SI_TX_EDID_VIDEO_CFG_ENABLE_3D                          |
    522                          SI_TX_EDID_VIDEO_CFG_ENABLE_XVYCC                       |
    523                          SI_TX_EDID_VIDEO_CFG_DC30_36                            |
    524                          (app.isEdidMhlLimits ? SI_TX_EDID_VIDEO_CFG_ENABLE_MHL_LIMITS : 0);
    525          
    526                      audioFeatureMask = 0;
    527          
    528                      if ( isAudioByPass )
    529                      {
    530                          audioFeatureMask |= SI_TX_EDID_AUDIO_CFG_BYPASS;// | SI_TX_EDID_AUDIO_CFG_SPDIF_INPUT;
    531                      }
    532                      else
    533                      {
    534                      	audioFeatureMask &= ~SI_TX_EDID_AUDIO_CFG_BYPASS;
    535                      }
    536          
    537                      miscOptionsMask = 0;
    538          
    539                      if ( SiiEdidTxConfigure( numOfTxPerEdidTxInst, videoFeatureMask, audioFeatureMask, miscOptionsMask ))
    540                      {
    541                          success = true;
    542                      }
    543          
    544          #if (MHL_20 == ENABLE) /*Smith modifies*/
    545                      CreateMHL3DData(true);
    546          #endif    
    547                  }
    548                  
    549              }
    550          
    551              DEBUG_PRINT(MSG_ALWAYS, "MHL limits to TX EDID: %s\n", app.isEdidMhlLimits ? "Y" : "N");
    552              TRACE_DEBUG((0, "MHL limits to TX EDID: %s ", app.isEdidMhlLimits ? "Y" : "N" ));
    553              
    554              return( success );
    555          }
    556          
    557          #if INC_RTPI
    558          //-------------------------------------------------------------------------------------------------
    559          //! @brief      Call back RTPI function to initialize EDID Tx.
    560          
    561          //-------------------------------------------------------------------------------------------------
    562          
    563          void SiiRtpiCbDeviceInitTx(bool_t isMatrixmode, bool_t isAudioByPass)
    564          {
    565          	SkAppDeviceInitEdidTx(isAudioByPass);
    566          }
    567          #endif // INC_RTPI
    568          
    569          //-------------------------------------------------------------------------------------------------
    570          //! @brief      TX component initialization.
    571          //!
    572          //! @retval     true - if initialization was successful.
    573          //-------------------------------------------------------------------------------------------------
    574          
    575          bool_t SkAppDeviceInitTx(void)
    576          {
    577              uint8_t instance;
    578              txRevision_t txRevision;
    579          
    580              //PrintAlways( "Transmitter Revision:\n");
    581              for (instance = 0; instance < SII_NUM_TX; instance++)
    582              {
    583                  SkAppTxInstanceSet(instance);
    584                  SiiTxInitialize();
    585                  SiiTxHdcpConfigure(false, 10, false);
    586              
    587                  txRevision = SiiTxRevisionGet();
    588                  DEBUG_PRINT(MSG_ALWAYS, "\tTX%d [COMP: %X, DEV: %X, TPI: %X]\n", instance,
    589                                          txRevision.component, txRevision.deviceId, txRevision.tpi);
    590          
    591          		TRACE_DEBUG((0, "TX%d [COMP: %X, DEV: %X, TPI: %X]", instance,
    592                                          txRevision.component, txRevision.deviceId, txRevision.tpi ));
    593          
    594                  // Configure Audio Mixer to bypass audio and other packets
    595                  SiiDrvRxAudioMixInstanceSet(instance);
    596                  SiiDrvRxAudioMixPassThroughConfig(true, true);
    597                  // GCP packets shall never be passed through
    598                  // as AVMUTE status must be controlled by repeater (not the upstream source only)
    599                  SiiDrvRxAudioMixGcpPassThroughConfig(false);
    600              }
    601          
    602              return (true);
    603          }
    604          
    605          SiiTimer_t testTimer;       	// used in wake-up detection by switching between instances
    606          
    607          //-------------------------------------------------------------------------------------------------
    608          //! @brief      TX main task routine.
    609          //!
    610          //!             TX related background tasks run here.
    611          //-------------------------------------------------------------------------------------------------
    612          
    613          void SkAppTaskTx(void)
    614          {
    615              uint8_t instance;
    616              txFeedbackMsg_t     fbMsg = SI_TX_FB_MSG_NONE;
    617              static clock_time_t lastTimeMs[SII_NUM_TX];
    618              clock_time_t        currentTimeMs = SiiOsTimerTotalElapsed();
    619              clock_time_t        timeStep;
    620          
    621              for (instance = 0; instance < SII_NUM_TX; instance++)
    622              {
    623                  timeStep = SkTimeDiffMs(lastTimeMs[instance], currentTimeMs);
    624          
    625                  SkAppTxInstanceSet(instance);
    626          
    627                  // Call Task Processor periodically, but not too frequently
    628                  // However, call it right away if TX interrupt is pending
    629                  if (SiiTxStatusGet().isIrqPending || (timeStep > SI_TX_TIME_STEP_MIN_MS))
    630                  {
    631                      fbMsg = SiiTxTaskProcess(timeStep);
    632              
    633                      // React on feedback messages
    634                      switch (fbMsg)
    635                      {
    636                          default:
    637                          case SI_TX_FB_MSG_NONE:
    638          #if INC_CEC
    639                              if ( app.cecEnable && app.txSendOneTouch )
    640                              {
    641                                  // Wake up TV and tell it we're the one!
    642                                  // Keep trying until task queue is free
    643              
    644                                  SkAppCecInstanceSet( CEC_INSTANCE_AVR );
    645                                  if ( SiiCecOneTouchPlay())
    646                                  {
    647                                      app.txSendOneTouch = false;
    648                                  }
    649                              }
    650          #endif
    651                              break;
    652              
    653                          case SI_TX_FB_MSG_HDCP_AUTH_DONE:
    654                              SkAppTxHdcpAuthDone();
    655                              SiiRepeaterForceShaSet(instance, false); // release SHA
    656                              DEBUG_PRINT(MSG_ALWAYS, "APP TX%d: HDCP Auth SUCCESSFUL\n", instance);
    657          					TRACE_DEBUG((0, "APP TX%d: HDCP Auth SUCCESSFUL", instance ));
    658                              {
    659                              	unsigned long timeElapsed = SkTimeDiffMs( testTimer.msStart, SiiOsTimerTotalElapsed());
    660                              	DEBUG_PRINT(MSG_ALWAYS, "\n Port Switching Time: %d millisec\n", timeElapsed);
    661          						TRACE_DEBUG((0, "Port Switching Time: %d millisec", timeElapsed ));
    662                              }
    663          
    664                              break;
    665              
    666                          case SI_TX_FB_MSG_ERR_HDCP_AUTH_FAILED:
    667                              DEBUG_PRINT(MSG_ALWAYS, "APP TX%d: HDCP Auth FAILED!\n", instance);
    668          					TRACE_DEBUG((0, "APP TX%d: HDCP Auth FAILED!", instance ));
    669                              //if (!app.isTxBypassMode[instance])
    670                              {
    671                                  // Mute AV if HDCP failed
    672                                  // (unmuting will be done after successful HDCP authentication)
    673                                  SiiTxAvMute();
    674                              }
    675                              break;
    676              
    677                          case SI_TX_FB_MSG_HOT_PLUG_RECONNECT:
    678                              // Put special handling for short HPD disconnection here, if required.
    679                              DEBUG_PRINT(MSG_ALWAYS, "APP TX%d: HPD Reconnecting\n", instance);
    680          					TRACE_DEBUG((0, " APP TX%d: HPD Reconnecting ", instance ));
    681                          	app.isTxDisconnectedImmed=false;
    682                              if (app.isTxBypassMode[instance])
    683                              {
    684                                  // Propagate HPD Toggle event to the upstream
    685                                  SkAppTxHpdConnection(SI_RPT_TX_HPD_TOGGLE);
    686                              }
    687                              break;
    688          
    689              
    690                          case SI_TX_FB_MSG_HOT_PLUG_CONNECTED:
    691          
    692                              DEBUG_PRINT(MSG_ALWAYS, "APP TX%d: HPD Connected\n", instance);
    693          
    694          #if 0					
    695          					TRACE_DEBUG((0, " APP TX%d: HPD Connected ", instance ));
    696          					TRACE_DEBUG((0, " APP TX: app.isTxRepeaterMode = %d", app.isTxRepeaterMode[instance] ));
    697          					TRACE_DEBUG((0, " APP TX: app.repeaterEnable = %d", app.repeaterEnable ));
    698          					TRACE_DEBUG((0, " APP TX: app.cecEnable = %d", app.cecEnable ));
    699          #endif 					
    700          					
    701                          	app.isTxDisconnectedImmed=true;
    702                              if (app.isTxRepeaterMode[instance])
    703                              {
    704                                  SkAppTxHpdConnection(OFF);
    705                              }
    706                              else   // Bug 33051 - [CP9533_FW] MHL1/2:Video color is incorrect after hotplug DS HDMI cable of 9533
    707                              {
    708                                  SiiDrvRepeaterSwitchRxHotPlug(OFF);
    709                              }
    710          
    711                              // Read & process DS EDID, if a new DS device has been connected
    712                              if (SiiTxStatusGet().isHotPlugDetected)
    713                              {
    714                                  SkAppProcessTxEdid(instance);
    715              
    716          #if INC_CEC
    717                                  if ( app.cecEnable )
    718                                  {						
    719          							// Get our CEC physical address (possible new DS EDID)
    720          							// and allocate a (possibly) new logical address.
    721          							SkAppCecInstanceSet( CEC_INSTANCE_AVR );
    722          							SiiCecEnumerateDevices( appCecSourceLaList );
    723          							SiiCecEnumerateDeviceLa( appCecSourceLaList );
    724          							//                                app.txSendOneTouch = true;
    725          
    726                                      SiiCecSetDevicePA( SiiTxPhysicalAddressGet() );
    727          #if ( configSII_DEV_953x_PORTING == 1 )
    728                                      AmTCecTaskAssign(Cec_TASK_CHANGE_PA);
    729          #endif
    730                                  }
    731          #endif
    732                              }
    733                              break;
    734              
    735                          case SI_TX_FB_MSG_HOT_PLUG_DISCONNECTED:
    736                              DEBUG_PRINT(MSG_ALWAYS, "APP TX%d: HPD Disconnected\n", instance);
    737          					TRACE_DEBUG((0, "APP TX%d: HPD Disconnected ", instance ));
    738                              SiiTxStandby();
    739              
    740                              SkAppDismissTxEdid(instance);
    741          
    742                              if (app.isTxRepeaterMode[instance])
    743                              {
    744                                  SkAppTxHpdConnection(OFF);
    745                              }
    746                              else    // Bug 33051 - [CP9533_FW] MHL1/2:Video color is incorrect after hotplug DS HDMI cable of 9533
    747                              {
    748                                  SiiDrvRepeaterSwitchRxHotPlug(OFF);
    749                              }
    750          
    751          #if INC_CEC
    752                              if ( app.cecEnable && (instance == 0))
    753                              {
    754                                  // Set sink mode CEC
    755                                  SkAppCecInstanceSet( CEC_INSTANCE_AVR );
    756                                  SiiCecSetDevicePA( 0x0000 );
    757                              }
    758          #endif  //INC_CEC
    759                              break;
    760              
    761                          case SI_TX_FB_MSG_SINK_READY:
    762                          	app.isTxDisconnectedImmed=false;
    763                              DEBUG_PRINT(MSG_ALWAYS, "APP TX%d: Downstream sink is ready and Tx Bypasmode is %d\n", instance, (int)app.isTxBypassMode[instance]);
    764          					TRACE_DEBUG((0, " APP TX%d: Downstream sink is ready and Tx Bypasmode is %d ", instance, (int)app.isTxBypassMode[instance] ));
    765          					/*if (app.isTxBypassMode[instance])
    766          					{
    767          						StopTx(instance);
    768          					}
    769          					else*/
    770                              {
    771                                  StartTx(instance);
    772                              }
    773          
    774                              if (app.isTxRepeaterMode[instance])
    775                              {
    776                                  SkAppTxHpdConnection(ON);
    777                              }
    778                              else    // Bug 33051 - [CP9533_FW] MHL1/2:Video color is incorrect after hotplug DS HDMI cable of 9533
    779                              {
    780                                  SiiDrvRepeaterSwitchRxHotPlug(ON);
    781                              }
    782                              break;
    783                      }
    784              
    785                      lastTimeMs[instance] = currentTimeMs;
    786                  }
    787              }
    788          
    789          }
    790          
    791          
    792          //-------------------------------------------------------------------------------------------------
    793          //! @brief      Process EDID from newly connected transmitter.
    794          //!
    795          //! @param[in]  txInstance - instance of the current TX
    796          //-------------------------------------------------------------------------------------------------
    797          
    798          void SkAppProcessTxEdid(uint8_t txInstance)
    799          {
    800              if (app.numOfEdidTxInst == 2)
    801              {
    802                  // In 2 instance mode of EdidTx, only single Tx is serviced
    803                  SiiEdidTxInstanceSet(txInstance);
    804                  SiiEdidTxProcessEdid(0);
    805              }
    806              else
    807              {
    808                  // In 1 instance mode of EdidTx, both Tx instances are serviced
    809                  SiiEdidTxProcessEdid(txInstance);
    810              }
    811          }
    812          
    813          //-------------------------------------------------------------------------------------------------
    814          //! @brief      Get rid of EDID from disconnected transmitter.
    815          //!
    816          //! @param[in]  txInstance - instance of the current TX
    817          //-------------------------------------------------------------------------------------------------
    818          
    819          void SkAppDismissTxEdid(uint8_t txInstance)
    820          {
    821              uint8_t rxPort;
    822          
    823              if (app.numOfEdidTxInst == 2)
    824              {
    825                  // Only one EDID exist in 2 pipe mode
    826                  SiiEdidTxInstanceSet(txInstance);
    827                  SiiEdidTxDismissEdid(0);
    828                  // The Rx EDID RAM associated with the disconnected Tx
    829                  // must be replaced with NVRAM EDID
    830                  SiiDrvNvramCopyToSram( NVRAM_HDMI_EDID, txInstance, true );
    831              }
    832              else
    833              {
    834                  // Try to re-make US EDID from other TX EDID.
    835                  // If all TXs are disconnected, this function won't be able to create a new EDID
    836                  SiiEdidTxDismissEdid(txInstance);
    837                  if (SiiEdidTxGetLastResult() == SI_TX_EDID_ERROR_CODE_NO_US_EDID_CREATED)
    838                  {
    839                      // Replace DS EDID in all RX ports by the default EDID,
    840                      // if both TXs are disconnected
    841                      for (rxPort = 0; rxPort < SII_INPUT_PORT_COUNT; ++rxPort)
    842                      {
    843                          SiiDrvNvramCopyToSram( NVRAM_HDMI_EDID, rxPort, true );
    844                      }
    845                  }
    846              }
    847          }
    848          
    849          //-------------------------------------------------------------------------------------------------
    850          //! @brief      Copy AIF from Rx pipe to Tx.
    851          //!
    852          //!             This function is used in audio overlay mode, when audio stream gets extracted
    853          //!             from main or sub pipe and inserted into Tx.
    854          //!
    855          //! @param[in]  txInstance - instance of the current TX
    856          //! @param[in]  isMainPipe - source pipe
    857          //-------------------------------------------------------------------------------------------------
    858          
    859          void SkAppTxCopyAif(uint8_t txInstance, bool_t isMainPipe)
    860          {
    861              uint8_t pIfData[32];
    862              uint8_t len;
    863              uint8_t audioMode;
    864              uint8_t audioLayout;
    865              uint8_t audioSampleRate;
    866          
    867              SkAppTxInstanceSet(txInstance);
    868          
    869              // Get source audio format
    870              SiiDrvRxAudioInstanceSet(isMainPipe ? 0 : 1);
    871              audioMode = SiiDrvRxAudioModeGet();
    872              audioLayout = SiiDrvRxAudioLayoutGet();
    873              audioSampleRate = SiiDrvRxAudioSampleRateGet();
    874          
    875              switch (audioMode)
    876              {
    877                  case SII_AUD_HBRA_MODE:
    878                      app.currentAudioType[txInstance] = SI_TX_AUDIO_SRC_HBRA;
    879                      break;
    880                  case SII_AUD_DSD_MODE:
    881                      app.currentAudioType[txInstance] = (audioLayout == SII_AUD_MULTI_CHANNEL) ?  SI_TX_AUDIO_SRC_DSD_L1 :
    882                                                                                                SI_TX_AUDIO_SRC_DSD_L0 ;
    883                      break;
    884                  default:
    885                  case SII_AUD_PCM_MODE:
    886                      app.currentAudioType[txInstance] = (audioLayout == SII_AUD_MULTI_CHANNEL) ?  SI_TX_AUDIO_SRC_I2S_L1 :
    887                                                                                                SI_TX_AUDIO_SRC_I2S_L0 ;
    888                      break;
    889              }
    890          
    891              app.audioSampleRate[txInstance] = audioSampleRate + 1;
    892          
    893              // Set up Tx to transmit audio of given format
    894              InputAudVidConfig(app.currentVideoSrc[txInstance],
    895                                app.currentVideoFormat[txInstance],
    896                                app.currentAudioType[txInstance],
    897                                app.audioSampleRate[txInstance], true);
    898          
    899              // Copy AIF to TX
    900              SiiDrvSwitchInfoFrameGet(isMainPipe, IF_AIF, pIfData, &len);
    901              SiiTxInfoFrameSet(SI_INFO_FRAME_AUDIO, pIfData);
    902              SiiTxInfoFrameEnable(SI_INFO_FRAME_AUDIO);
    903          }
    904          
    905          //-------------------------------------------------------------------------------------------------
    906          //! @brief      Copy Vsif from Rx pipe to Tx.
    907          //!
    908          //!             This function is used in audio overlay mode, when audio stream gets extracted
    909          //!             from main or sub pipe and inserted into Tx.
    910          //!
    911          //! @param[in]  txInstance - instance of the current TX
    912          //! @param[in]  isMainPipe - source pipe
    913          //-------------------------------------------------------------------------------------------------
    914          
    915          void SkAppTxCopyVsif(uint8_t txInstance, bool_t isMainPipe)
    916          {
    917              uint8_t pIfData[32];
    918              uint8_t len;
    919          
    920              SkAppTxInstanceSet(txInstance);
    921          
    922              // Copy Vsi to TX
    923              SiiDrvSwitchInfoFrameGet(isMainPipe, IF_VSI, pIfData, &len);
    924              SiiTxInfoFrameSet(SI_INFO_FRAME_VSIF, pIfData);
    925              SiiTxInfoFrameEnable(SI_INFO_FRAME_VSIF);
    926          }
    927          
    928          //-------------------------------------------------------------------------------------------------
    929          //! @brief      Adjust TMDS analog settings (termination impedance, etc.) based on pixel clock
    930          //!             of video coming from Rx in bypass mode.
    931          //!
    932          //! @param[in]  txInstance - transmitter instance (zone)
    933          //! @param[in]  pixClock   - video TMDS clock frequency in 10kHz units
    934          //-------------------------------------------------------------------------------------------------
    935          
    936          void SkAppTxAdjustAnalogSettings(int_t txInstance, int_t pixClock)
    937          {
    938              SiiTxInstanceSet(txInstance);
    939          
    940              switch (app.txTmdsFreqRange[txInstance])
    941              {
    942                  default:
    943                  case 0: // AUTO (default)
    944                      // use provided pixClock value
    945                      break;
    946                  case 1: // 30 MHz < 165 MHz
    947                      pixClock = 7500;
    948                      break;
    949                  case 2: // < 225 MHz
    950                      pixClock = 17000;
    951                      break;
    952                  case 3: // < 300 MHz
    953                      pixClock = 23000;
    954                      break;
    955              }
    956          
    957              SiiDrvTpiVideoModeDataSet(pixClock, 0,0,0);
    958          }
    959          
    960          //-------------------------------------------------------------------------------------------------
    961          //! @brief      Adjust audio clock divider settings based on tmds clock
    962          //!             of video coming from Rx in bypass mode.
    963          //!
    964          //! @param[in]  txInstance - transmitter instance (zone)
    965          //! @param[in]  tmdsClock   - video TMDS clock frequency in 10kHz units
    966          //-------------------------------------------------------------------------------------------------
    967          
    968          void SkAppTxAdjustAudioClkDivider(int_t txInstance, int_t tmdsClock)
    969          {
    970              bool_t toSet;
    971          
    972              toSet = (app.currentAudioType[txInstance] == SI_TX_AUDIO_SRC_SPDIF);
    973          
    974              SiiTxInstanceSet(txInstance);
    975              //SiiDrvTpiAudioClkDividerSet(tmdsClock, toSet);
    976          
    977          }
    978          //-------------------------------------------------------------------------------------------------
    979          //! @brief      Adjust video settings in HDMI bypass mode based on Rx AVI InfoFrame
    980          //!
    981          //! @param[in]  txInstance - transmitter instance (zone)
    982          //! @param[in]  pAvi       - pointer to Rx AVI InfoFrame
    983          //! @param[in]  aviLen     - length of Rx AVI InfoFrame in bytes
    984          //-------------------------------------------------------------------------------------------------
    985          
    986          void SkAppTxAdjustVideoSettings(int_t txInstance, uint8_t *pAvi, uint8_t aviLen)
    987          {
    988              txVideoBusMode_t    busMode;
    989          
    990              if (app.isTxBypassMode[txInstance])
    991              {
    992                  if (aviLen < 7)
    993                  {
    994                      // Default to RGB
    995                      busMode.colorSpace = SI_TX_VBUS_COLOR_SPACE_RGB;
    996                      busMode.quantRange = SI_TX_VIDEO_QRANGE_DEFAULT;
    997                  }
    998                  else
    999                  {
   1000                      // Take from AVI
   1001                      busMode.colorSpace = (pAvi[4] & 0x60) >> 5;
   1002                      busMode.quantRange = (pAvi[6] & 0x0C) >> 2;
   1003                  }
   1004          
   1005                  SiiTxInstanceSet(txInstance);
   1006                  SiiTxVideoSourceConfig(SI_TX_VIDEO_SOURCE_HDMI, &busMode);
   1007              }
   1008          }
   1009          
   1010          
   1011          //-------------------------------------------------------------------------------------------------
   1012          //! @brief      Adjust video settings in HDMI bypass mode based on Rx AVI InfoFrame
   1013          //!
   1014          //! @param[in]  txInstance - transmitter instance (zone)
   1015          //! @param[in]  pAvi       - pointer to Rx AVI InfoFrame
   1016          //! @param[in]  aviLen     - length of Rx AVI InfoFrame in bytes
   1017          //-------------------------------------------------------------------------------------------------
   1018          
   1019          void SkAppTxInfoFrameUpdate(bool_t isMainPipeSrc, bool_t isAvi, bool_t isAud, bool_t isVsi)
   1020          {
   1021              int_t instance = 0;
   1022              bool_t isForwardVsif = false;
   1023          
   1024              if (isAud)
   1025              {
   1026                  for (instance = 0 ; instance < SII_NUM_TX; instance++)
   1027          
   1028                  {
   1029                      if ((!app.isTxBypassMode[instance]) && (app.currentAudioSource[instance] == (isMainPipeSrc ? SiiSwitchAudioSourceMainPipe : SiiSwitchAudioSourceSubPipe)))
   1030                      // Copy AIF from selected Rx source if in audio overlay mode
   1031                      {
   1032                          SkAppTxInstanceSet(instance);
   1033                          // Copy AIF to TX
   1034                          SkAppTxCopyAif(instance, isMainPipeSrc);
   1035                          SiiTxRecoverAfterSourceClockInterruption();
   1036                      }
   1037                  }
   1038              }
   1039          #if (MHL_20 == DISABLE)
   1040              if(isVsi)
   1041              {
   1042                  DEBUG_PRINT( MSG_ALWAYS, "VSIF new Frames ready to pass to TX\n");
   1043          
   1044              	switch(SiiDrvSwitchSelectedPorttype())
   1045              	{
   1046              	case SiiPortType_HDMI:
   1047              		if (!app.isTxBypassMode[0])
   1048              		{
   1049              			isForwardVsif = true;
   1050              		}
   1051              		break;
   1052              	case SiiPortType_MHL:
   1053                      DEBUG_PRINT( MSG_ALWAYS, "VSIF new Frames are from MHL\n");
   1054              		isForwardVsif = true;
   1055              		break;
   1056              	default:
   1057              		break;
   1058              	}
   1059                  if ( isForwardVsif )
   1060                  {
   1061                 	SkAppTxInstanceSet(instance);
   1062                  	//copy VSIF to TX
   1063                  	SkAppTxCopyVsif(instance, isMainPipeSrc);
   1064                     DEBUG_PRINT( MSG_ALWAYS, "VSIF new Frames Copied to Tx\n");
   1065                  }
   1066              }
   1067          #else
   1068              if(isVsi)
   1069              {
   1070                  DEBUG_PRINT( MSG_ALWAYS, "VSIF new Frames ready to pass to TX\n");
   1071          
   1072              	switch(SiiDrvSwitchSelectedPorttype())
   1073              	{
   1074              	case SiiPortType_HDMI:
   1075              		if (!app.isTxBypassMode[0])
   1076              		{
   1077              			DEBUG_PRINT(MSG_DBG, "Bypass HDMI VSIF!\n");
   1078              			// Disable sending VSIF at Tx
   1079              			if (SiiDrvSwitchMatrixModeEnableGet()){  // Matrix mode, setup for each pipe
   1080              				SkAppTxInstanceSet(isMainPipeSrc? 0 : 1);
   1081              				SiiDrvTpiInfoFrameEnable(false, false, SI_INFO_FRAME_VSIF);
   1082              			}else{  // InstaPrevue mode, setup for both pipe
   1083              				for (instance = 0; instance < SII_NUM_TX; instance++){
   1084              					SkAppTxInstanceSet(instance);
   1085              					SiiDrvTpiInfoFrameEnable(false, false, SI_INFO_FRAME_VSIF);
   1086              				}
   1087              			}
   1088              			// pass through VSIF
   1089              			SiiDrvRxAudioMixInstanceSet(isMainPipeSrc? 0 : 1);
   1090              			SiiDrvRxAudioMixVsifPassThroughConfig(true); // pass through
   1091              			isForwardVsif = true;
   1092              		}
   1093              		break;
   1094              	case SiiPortType_MHL:
   1095                      DEBUG_PRINT( MSG_ALWAYS, "VSIF new Frames are from MHL\n");
   1096          			uint8_t pIfData[32];
   1097          			uint8_t len;
   1098          
   1099          			SiiDrvSwitchInfoFrameGet(isMainPipeSrc, IF_VSI, pIfData, &len);
   1100          			if (!CheckMhl3DVsi(pIfData)) return;//if MHL VSIF detects (without converting into HDMI then come down and process to hdmi otherwise return)
   1101          
   1102          			DEBUG_PRINT(MSG_DBG, "MHL 3D VSIF is detected!\n");
   1103          
   1104          			// Convert MHL 3D VSI to HDMI 3D VSI and set InfoFrame to Tx
   1105          			if (SiiDrvSwitchMatrixModeEnableGet())
   1106          			{  // Matrix mode, setup for each pipe
   1107          				SkAppTxInstanceSet(isMainPipeSrc? 0 : 1);
   1108          				SkAppTxConvertMhlVSI(pIfData);//in case MHL VSIF detect then we have to convert it into HDMI
   1109          				SiiDrvTpiInfoFrameEnable(true, false, SI_INFO_FRAME_VSIF);
   1110          			}
   1111          			else
   1112          			{  // InstaPrevue mode, setup for both pipe
   1113          				for (instance = 0; instance < SII_NUM_TX; instance++){
   1114          					SkAppTxInstanceSet(instance);
   1115          					SkAppTxConvertMhlVSI(pIfData);
   1116          					SiiDrvTpiInfoFrameEnable(true, false, SI_INFO_FRAME_VSIF);
   1117          				}
   1118          			}
   1119          			// Block VSIF
   1120          			SiiDrvRxAudioMixInstanceSet(isMainPipeSrc? 0 : 1);
   1121          			SiiDrvRxAudioMixVsifPassThroughConfig(false); // block
   1122              		isForwardVsif = true;
   1123              		break;
   1124              	default:
   1125              		break;
   1126              	}
   1127          //        if ( isForwardVsif )
   1128          //        {
   1129          //        	SkAppTxInstanceSet(instance);
   1130          //        	//copy VSIF to TX
   1131          //        	SkAppTxCopyVsif(instance, isMainPipeSrc);
   1132          //            DEBUG_PRINT( MSG_ALWAYS, "VSIF new Frames Copied to Tx\n");
   1133          //        }
   1134              }
   1135          #endif
   1136          }
   1137          
   1138          //-------------------------------------------------------------------------------------------------
   1139          // Callbacks from TX module (Source: HDCP)
   1140          //
   1141          // TX Component has repeater links that must be satisfied even if no repeater exists
   1142          //-------------------------------------------------------------------------------------------------
   1143          
   1144          //-------------------------------------------------------------------------------------------------
   1145          //! @brief      TX callback function. Informs App/Repeater that downstream HDCP authentication
   1146          //!             is already done. Only upstream has to be authenticated.
   1147          //-------------------------------------------------------------------------------------------------
   1148          
   1149          void SiiTxCbHdcpUsOnlyAuthentication(void)
   1150          {
   1151              SkAppRepeaterHdcpUsOnlyAuthentication();
   1152          }
   1153          
   1154          
   1155          //-------------------------------------------------------------------------------------------------
   1156          //! @brief      TX callback function. Informs App/Repeater if downstream HDCP is available.
   1157          //!
   1158          //! @param[in]  isAcknowledged - true:  DS HDCP responded, false: no DDC acknowledge at DS
   1159          //-------------------------------------------------------------------------------------------------
   1160          
   1161          void SiiTxCbHdcpDsDdcAck(bool_t isAcknowledged)
   1162          {
   1163          	SkAppRepeaterHdcpDsDdcAck(isAcknowledged);
   1164          }
   1165          
   1166          
   1167          //-------------------------------------------------------------------------------------------------
   1168          //! @brief      TX callback function. Send BSTATUS from TX to App/Repeater for processing.
   1169          //!
   1170          //! @param[in]  dsBstatus - 2-byte array carrying BSTATUS data
   1171          //-------------------------------------------------------------------------------------------------
   1172          
   1173          bool_t SiiTxCbHdcpProcessDsBstatus(uint8_t dsBstatus[2])
   1174          {
   1175              return SkAppRepeaterHdcpProcessDsBstatus(dsBstatus);
   1176          }
   1177          
   1178          
   1179          //-------------------------------------------------------------------------------------------------
   1180          //! @brief      TX callback function. Send 20-bit BKSV from TX to App/Repeater in order to
   1181          //!             finalize 2nd part of repeater HDCP authentication.
   1182          //!
   1183          //! @param[in]  aDsBksv - 5-byte array carrying downstream BKSV data
   1184          //-------------------------------------------------------------------------------------------------
   1185          
   1186          void SiiTxCbHdcpFinishUsPart2(uint8_t aDsBksv[5])
   1187          {
   1188              SkAppRepeaterHdcpFinishUsPart2(aDsBksv);
   1189          }
   1190          
   1191          
   1192          //-------------------------------------------------------------------------------------------------
   1193          //! @brief      TX callback function. Forward portion of KSV list to App/Repeater in order to
   1194          //!             do black listing.
   1195          //!
   1196          //! @param[in]  pKsvBuffer - pointer to a buffer containing a portion of KSV list
   1197          //! @param[in]  len - length of the buffer (number of bytes)
   1198          //-------------------------------------------------------------------------------------------------
   1199          
   1200          void SiiTxCbHdcpProcessKsvListPortion(uint8_t *pKsvBuffer, uint8_t len)
   1201          {
   1202          
   1203          }
   1204          
   1205          
   1206          //-------------------------------------------------------------------------------------------------
   1207          //! @brief      TX callback function. Informs App/Repeater if BCAPS FIFO is ready.
   1208          //!
   1209          //! @param[in]  isFifoReady - BCAPS FIFO ready flag.
   1210          //-------------------------------------------------------------------------------------------------
   1211          
   1212          void SiiTxCbHdcpSetUsRepeaterBcaps(bool_t isFifoReady)
   1213          {
   1214              SkAppRepeaterHdcpSetBcapsFifoRdyBits(isFifoReady);
   1215          }
   1216          
   1217          
   1218          //-------------------------------------------------------------------------------------------------
   1219          //! @brief      TX callback function. Informs App/Repeater that TX is about to receive KSV List.
   1220          //-------------------------------------------------------------------------------------------------
   1221          
   1222          bool_t SiiTxCbHdcpPrepareForKsvListProcessing(void)
   1223          {
   1224              return (SkAppRepeaterHdcpPrepareForKsvListProcessing());
   1225          }
   1226          
   1227          //-------------------------------------------------------------------------------------------------
   1228          //! @brief      TX callback function. Informs App/Repeater that TX is about to receive KSV List.
   1229          //-------------------------------------------------------------------------------------------------
   1230          
   1231          bool_t SiiTxCbHdcpPrepareFor0KsvListProcessing(void)
   1232          {
   1233              return(SkAppRepeaterHdcpPrepareFor0KsvListProcessing());
   1234          }
   1235          
   1236          //-------------------------------------------------------------------------------------------------
   1237          //! @brief      TX callback function. Informs App/Repeater about HDCP failure.
   1238          //!
   1239          //! @param[in]  isFatal - true:  fatal HDCP issue, TX won't retry,
   1240          //!                       false: minor issue, TX will retry to authenticate
   1241          //-------------------------------------------------------------------------------------------------
   1242          
   1243          void SiiTxCbHdcpInformUsDeviceAboutFailure(bool_t isFatal)
   1244          {
   1245              SkAppRepeaterHdcpInformUsDeviceAboutFailure(isFatal);
   1246          }
   1247          
   1248          //-------------------------------------------------------------------------------------------------
   1249          // Callback functions from Repeater module
   1250          //-------------------------------------------------------------------------------------------------
   1251          
   1252          
   1253          //-------------------------------------------------------------------------------------------------
   1254          //! @brief      Repeater callback function. Enables Tx in repeater mode.
   1255          //!             Repeater is expected to set instance for Tx App before calling this function.
   1256          //-------------------------------------------------------------------------------------------------
   1257          
   1258          void SiiRepeaterCbTxResume(void)
   1259          {
   1260              int_t txInstance = SiiTxInstanceGet();
   1261          
   1262              if(app.isTxRepeaterMode[txInstance])
   1263              {
   1264                  if (app.isTxBypassMode[txInstance])
   1265                  {
   1266                      SiiTxResume();
   1267          
   1268                      SiiTxOutputInterfaceSet(SI_TX_OUTPUT_MODE_HDMI);
   1269                      // Bug 33044 - Melbourne SiI9535/9533 MHL QD882 HDCP CTS 3AB fails at test item 3B-02
   1270                      // Bug 33042 - Melbourne SiI9535/9533 HDMI QD882 HDCP CTS 3AB fails at test item 3B-2
   1271                      // Fix for HDCP1.4 CTS Test case 3A-05 failue
   1272                      if (SiiTxGetLastResult().lastErrorCode == SI_TX_ERROR_CODE_HDMI_NOT_SUPPORTED_BY_DS)
   1273                      {
   1274                          SiiTxOutputInterfaceSet(SI_TX_OUTPUT_MODE_DVI);
   1275                          SiiDrvRxAudioMixPassThroughConfig(false, false);
   1276                      }
   1277                      else
   1278                      {
   1279                          SiiDrvRxAudioMixPassThroughConfig(true, true);
   1280          
   1281          				if(app.newAudioSource[txInstance] == SiiSwitchAudioSourceExternal)
   1282          				{
   1283          					SiiDrvRxAudioMixPassThroughConfig(false, true);
   1284          				}
   1285          				else
   1286          				{
   1287          					SiiDrvRxAudioMixPassThroughConfig(true, true);
   1288          				}
   1289                      }
   1290                  }
   1291                  else
   1292                  {
   1293                      EnableTransmitter(txInstance, true);
   1294                  }
   1295                  DEBUG_PRINT(MSG_DBG, "Tx App%d: Resume from RPTR. Bypass: %d\n", txInstance, app.isTxBypassMode[txInstance]);
   1296                  app.isRepeaterResume[txInstance] = true;
   1297              }
   1298          }
   1299          
   1300          //-------------------------------------------------------------------------------------------------
   1301          //! @brief      Repeater callback function. Disables Tx in repeater mode
   1302          //!             Repeater is expected to set instance for Tx App before calling this function.
   1303          //-------------------------------------------------------------------------------------------------
   1304          
   1305          void SiiRepeaterCbTxStandby(void)
   1306          {
   1307              int_t txInstance = SiiTxInstanceGet();
   1308          
   1309              if(app.isTxRepeaterMode[txInstance])
   1310              {
   1311                  SkAppTxInstanceSet(txInstance);
   1312          
   1313                  if (app.isTxBypassMode[txInstance])
   1314                  {
   1315                      SiiTxStandby();
   1316                  }
   1317                  else
   1318                  {
   1319                      SiiTxStandby();
   1320                      //EnableTransmitter(txInstance, false);
   1321                  }
   1322                  DEBUG_PRINT(MSG_DBG, "Tx App%d: Standby from RPTR. Bypass: %d\n", txInstance, app.isTxBypassMode[txInstance]);
   1323                  app.isRepeaterResume[txInstance] = false;
   1324              }
   1325          }
   1326          
   1327          
   1328          
   1329          //-------------------------------------------------------------------------------------------------
   1330          // Callback from EDID TX module
   1331          //-------------------------------------------------------------------------------------------------
   1332          
   1333          //-------------------------------------------------------------------------------------------------
   1334          //! @brief      Distribute generated EDID from TX to all input port EDID SRAMs.
   1335          //!
   1336          //!             Works in Passthrough mode only. CEC Physical Address isn't inherited from DS
   1337          //!             because DS CEC network is separated from the US CEC. The upstream will consider
   1338          //!             SiI953x as a CEC root.
   1339          //!
   1340          //! @param[in]  blockIndex          - zero based EDID block number,
   1341          //! @param[in]  pEdidBlock          - pointer to an EDID block,
   1342          //! @param[in]  cecPhysAddrLocation - shift (in bytes) of the CEC physical address first byte
   1343          //!                                   relative to the EDID Block 1 beginning.
   1344          //!
   1345          //! @return     success flag.
   1346          //-------------------------------------------------------------------------------------------------
   1347          bool_t SiiTxEdidCbBlockWrite(uint_t blockIndex, uint8_t* const pEdidBlock, uint8_t cecPhysAddrLocation)
   1348          {
   1349              bool_t  isSuccess = true;
   1350              uint8_t rxTxChannel = 0;  // Index of Rx-Tx channel serviced by dedicated instance of EDID Tx component
   1351          
   1352          
   1353              if (app.isTxBypassMode[SiiTxInstanceGet()])
   1354              {
   1355                  rxTxChannel = SiiEdidTxInstanceGet();
   1356                  // This function finds Physical Address location by internal parsing of CEA extension block
   1357                  isSuccess = SiiDrvNvramEdidBlockWrite (rxTxChannel, pEdidBlock, blockIndex);
   1358          
   1359                  if (!isSuccess)
   1360                  {
   1361                      DEBUG_PRINT( MSG_ERR, "EDID Write Error!\n");
   1362                  }
   1363          		else
   1364          		{
   1365          			TRACE_DEBUG((0, "[ HDMI MSG ]: EDID Write RX is success "));
   1366          		}
   1367              }
   1368          
   1369              return isSuccess;
   1370          }
   1371          #if (MHL_20 == ENABLE)
   1372          static bool_t CheckMhl3DVsi(uint8_t *pVsi)
   1373          {
   1374          	if (pVsi[4] != 0x1D || pVsi[5] != 0xA6 || pVsi[6] != 0x7C) return false;  // check OUI
   1375          	if ((pVsi[7] & 0x03) != 0x01) return false;  // Check MHL_VID_FMT (3D present)
   1376          	return true;
   1377          }
   1378          
   1379          //-------------------------------------------------------------------------------------------------
   1380          //! @brief      Convert VSI from MHL to HDMI.
   1381          //!
   1382          //! @param[in]  txInstance - instance of the current TX
   1383          //! @param[in]  isMainPipe - source pipe
   1384          
   1385          //-------------------------------------------------------------------------------------------------
   1386          
   1387          void SkAppTxConvertMhlVSI(uint8_t *pMhlIf)
   1388          {
   1389          	uint8_t pHdmiIf[32];
   1390          
   1391          	memset (pHdmiIf, 0, 32);
   1392          
   1393          	// Header
   1394          	pHdmiIf[0] = 0x81;
   1395          	pHdmiIf[1] = 0x01;
   1396          	// Content
   1397          	pHdmiIf[3] = 0; // checksum will be calculate later
   1398          	pHdmiIf[4] = 0x03;
   1399          	pHdmiIf[5] = 0x0C;
   1400          	pHdmiIf[6] = 0x00;
   1401          	pHdmiIf[7] = 0x40;  // 3D format present
   1402          	switch (pMhlIf[7]&0x3C){  // MHL_3D_FMT_TYPE
   1403          		case (0<<2): // Frame sequential
   1404          			pHdmiIf[8] = 0 << 4;  // 3D_structure
   1405          			pHdmiIf[2] = 5; // Length
   1406          			break;
   1407          		case (1<<2):  // Top-Bottom
   1408          			pHdmiIf[8] = 6 << 4;  // 3D_structure
   1409          			pHdmiIf[2] = 5; // Length
   1410          			break;
   1411          		case (2<<2): // Left-Right
   1412          			pHdmiIf[8] = 8 << 4;  // 3D_structure
   1413          			pHdmiIf[9] = 0;  // 3D_Ext_Data
   1414          			pHdmiIf[2] = 6; // Length
   1415          			break;
   1416          	}
   1417          
   1418          	SiiTxInfoFrameSet(SI_INFO_FRAME_VSIF, pHdmiIf);
   1419          	SiiTxInfoFrameEnable(SI_INFO_FRAME_VSIF);
   1420          }
   1421          #endif
   1422          
   1423          //------------------------------------------------------------------------------
   1424          // Function:    SkAppTxRepeaterIsResume
   1425          // Description: return the tx resume  status
   1426          // Parameters:  - inst
   1427          // Returns:		- true if connected; false if it is not connected
   1428          //------------------------------------------------------------------------------
   1429          
   1430          bool_t SkAppTxRepeaterIsResume( uint8_t inst)
   1431          {
   1432             	return app.isRepeaterResume[inst];
   1433          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  EnableTransmitter
             16 -> InputAudVidConfig
             16 -> SiiDrvRxAudioMixInstanceSet
              0 -> SiiDrvRxAudioMixPassThroughConfig
             16 -> SiiDrvRxAudioMixPassThroughConfig
             16 -> SiiRepeaterForceShaSet
             16 -> SiiTxHdcpDisable
             16 -> SiiTxStatusGet
             16 -> SkAppTxInstanceSet
              0 -> StartTx
       72  InputAudVidConfig
             72 -> SiiDrvTpiHdcpRi128Comp
             72 -> SiiTxAudioSourceConfig
             72 -> SiiTxInputAudioModeSet
             72 -> SiiTxInputAudioUnmute
             72 -> SiiTxInputVideoModeSet
             72 -> SiiTxInstanceGet
             72 -> SiiTxVideoSourceConfig
             72 -> __aeabi_memclr4
       24  SiiRepeaterCbTxResume
             24 -> EnableTransmitter
             24 -> SiiDrvRxAudioMixPassThroughConfig
             24 -> SiiTxGetLastResult
             24 -> SiiTxInstanceGet
             24 -> SiiTxOutputInterfaceSet
             24 -> SiiTxResume
       16  SiiRepeaterCbTxStandby
             16 -> SiiTxInstanceGet
             16 -> SiiTxStandby
             16 -> SkAppTxInstanceSet
        0  SiiRtpiCbDeviceInitTx
              0 -> SkAppDeviceInitEdidTx
        0  SiiTxCbHdcpDsDdcAck
              0 -> SkAppRepeaterHdcpDsDdcAck
        0  SiiTxCbHdcpFinishUsPart2
              0 -> SkAppRepeaterHdcpFinishUsPart2
        0  SiiTxCbHdcpInformUsDeviceAboutFailure
              0 -> SkAppRepeaterHdcpInformUsDeviceAboutFailure
        0  SiiTxCbHdcpPrepareFor0KsvListProcessing
              0 -> SkAppRepeaterHdcpPrepareFor0KsvListProcessing
        0  SiiTxCbHdcpPrepareForKsvListProcessing
              0 -> SkAppRepeaterHdcpPrepareForKsvListProcessing
        0  SiiTxCbHdcpProcessDsBstatus
              0 -> SkAppRepeaterHdcpProcessDsBstatus
        0  SiiTxCbHdcpProcessKsvListPortion
        0  SiiTxCbHdcpSetUsRepeaterBcaps
              0 -> SkAppRepeaterHdcpSetBcapsFifoRdyBits
        0  SiiTxCbHdcpUsOnlyAuthentication
              0 -> SkAppRepeaterHdcpUsOnlyAuthentication
       16  SiiTxEdidCbBlockWrite
             16 -> Debug_printDebug
             16 -> SiiDrvNvramEdidBlockWrite
             16 -> SiiEdidTxInstanceGet
             16 -> SiiTxInstanceGet
       24  SkAppDeviceInitEdidTx
             24 -> Debug_printDebug
             24 -> SiiDrvNvramEdidModeSet
             24 -> SiiEdidTxConfigure
             24 -> SiiEdidTxInitialize
             24 -> SiiEdidTxInstanceSet
       16  SkAppDeviceInitTx
             16 -> Debug_printDebug
             16 -> SiiDrvRxAudioMixGcpPassThroughConfig
             16 -> SiiDrvRxAudioMixInstanceSet
             16 -> SiiDrvRxAudioMixPassThroughConfig
             16 -> SiiTxHdcpConfigure
             16 -> SiiTxInitialize
             16 -> SiiTxRevisionGet
             16 -> SkAppTxInstanceSet
        8  SkAppDismissTxEdid
              0 -> SiiDrvNvramCopyToSram
              8 -> SiiDrvNvramCopyToSram
              8 -> SiiEdidTxDismissEdid
              8 -> SiiEdidTxGetLastResult
              8 -> SiiEdidTxInstanceSet
       24  SkAppExtAudioInsertConfig
             24 -> InputAudVidConfig
             24 -> SiiDrvRxAudioSampleRateGet
        8  SkAppInternalVideoConfig
              0 -> EnableTransmitter
        8  SkAppProcessTxEdid
              8 -> SiiEdidTxInstanceSet
              0 -> SiiEdidTxProcessEdid
       32  SkAppTaskTx
             32 -> AmTCecTaskAssign
             32 -> Debug_printDebug
             32 -> SiiCecEnumerateDeviceLa
             32 -> SiiCecEnumerateDevices
             32 -> SiiCecOneTouchPlay
             32 -> SiiCecSetDevicePA
             32 -> SiiDrvRepeaterSwitchRxHotPlug
             32 -> SiiOsTimerTotalElapsed
             32 -> SiiRepeaterForceShaSet
             32 -> SiiTxAvMute
             32 -> SiiTxPhysicalAddressGet
             32 -> SiiTxStandby
             32 -> SiiTxStatusGet
             32 -> SiiTxTaskProcess
             32 -> SkAppCecInstanceSet
             32 -> SkAppDismissTxEdid
             32 -> SkAppProcessTxEdid
             32 -> SkAppTxHdcpAuthDone
             32 -> SkAppTxHpdConnection
             32 -> SkAppTxInstanceSet
             32 -> StartTx
       16  SkAppTpgEnable
              0 -> SiiDrvExtTpgEnable
             16 -> SiiDrvExtTpgEnable
             16 -> SiiDrvExtTpgPatternSet
             16 -> SiiDrvRxAudioInstanceSet
             16 -> SiiDrvRxAudioPllConfig
             16 -> SiiDrvTpgEnable
             16 -> SiiDrvTpgVideoFormatSet
              0 -> SiiOsTimerWait
       16  SkAppTxAdjustAnalogSettings
              0 -> SiiDrvTpiVideoModeDataSet
             16 -> SiiTxInstanceSet
        0  SkAppTxAdjustAudioClkDivider
              0 -> SiiTxInstanceSet
       16  SkAppTxAdjustVideoSettings
             16 -> SiiTxInstanceSet
             16 -> SiiTxVideoSourceConfig
       64  SkAppTxCopyAif
             64 -> InputAudVidConfig
             64 -> SiiDrvRxAudioInstanceSet
             64 -> SiiDrvRxAudioLayoutGet
             64 -> SiiDrvRxAudioModeGet
             64 -> SiiDrvRxAudioSampleRateGet
             64 -> SiiDrvSwitchInfoFrameGet
             64 -> SiiTxInfoFrameEnable
             64 -> SiiTxInfoFrameSet
             64 -> SkAppTxInstanceSet
       48  SkAppTxCopyVsif
             48 -> SiiDrvSwitchInfoFrameGet
             48 -> SiiTxInfoFrameEnable
             48 -> SiiTxInfoFrameSet
             48 -> SkAppTxInstanceSet
       24  SkAppTxInfoFrameUpdate
             24 -> SiiDrvSwitchSelectedPorttype
             24 -> SiiTxRecoverAfterSourceClockInterruption
             24 -> SkAppTxCopyAif
              0 -> SkAppTxCopyVsif
             24 -> SkAppTxInstanceSet
        8  SkAppTxInstanceSet
              0 -> SiiEdidTxInputSet
              8 -> SiiEdidTxInstanceSet
              8 -> SiiTxInstanceSet
        0  SkAppTxRepeaterIsResume
       32  StartTx
             32 -> InputAudVidConfig
             32 -> SiiDrvRxAudioFifoRedirSet
             32 -> SiiDrvRxAudioInstanceSet
             32 -> SiiDrvRxAudioMixPassThroughConfig
             32 -> SiiDrvTpiAudioRxSource
             32 -> SiiRepeaterForceShaSet
             32 -> SiiTxAvMute
              0 -> SiiTxAvUnmute
             32 -> SiiTxGetLastResult
             32 -> SiiTxHdcpDisable
              0 -> SiiTxHdcpEnable
             32 -> SiiTxInputAudioUnmute
             32 -> SiiTxOutputInterfaceSet
             32 -> SiiTxRecoverAfterSourceClockInterruption
             32 -> SiiTxResume
             32 -> SkAppTxCopyAif


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      60  ?<Constant " APP TX%d: Downstream...">
      32  ?<Constant " APP TX%d: HPD Reconn...">
      28  ?<Constant "APP TX%d: HDCP Auth F...">
      32  ?<Constant "APP TX%d: HDCP Auth S...">
      28  ?<Constant "APP TX%d: HPD Disconn...">
      28  ?<Constant "MHL limits to TX EDID...">
       2  ?<Constant "N">
      36  ?<Constant "Port Switching Time: ...">
      36  ?<Constant "TX%d [COMP: %X, DEV: ...">
       2  ?<Constant "Y">
      36  ?<Constant "[ HDMI MSG ] SkAppDev...">
      40  ?<Constant "[ HDMI MSG ]: EDID Wr...">
       8  ?<Constant {{0, 0, 127}, {0, 127, 127}}>
       4  ??DataTable23
       4  ??DataTable24
       4  ??DataTable30
       4  ??DataTable30_1
       4  ??DataTable30_2
      20  ?Subroutine0
      24  ?Subroutine1
       6  ?Subroutine2
      12  ?Subroutine3
     112  EnableTransmitter
     274  InputAudVidConfig
     110  SiiRepeaterCbTxResume
      40  SiiRepeaterCbTxStandby
       4  SiiRtpiCbDeviceInitTx
       4  SiiTxCbHdcpDsDdcAck
       4  SiiTxCbHdcpFinishUsPart2
       4  SiiTxCbHdcpInformUsDeviceAboutFailure
       4  SiiTxCbHdcpPrepareFor0KsvListProcessing
       4  SiiTxCbHdcpPrepareForKsvListProcessing
       4  SiiTxCbHdcpProcessDsBstatus
       2  SiiTxCbHdcpProcessKsvListPortion
       4  SiiTxCbHdcpSetUsRepeaterBcaps
       4  SiiTxCbHdcpUsOnlyAuthentication
      52  SiiTxEdidCbBlockWrite
     124  SkAppDeviceInitEdidTx
      80  SkAppDeviceInitTx
      72  SkAppDismissTxEdid
      56  SkAppExtAudioInsertConfig
      46  SkAppInternalVideoConfig
      30  SkAppProcessTxEdid
     406  SkAppTaskTx
     144  SkAppTpgEnable
      66  SkAppTxAdjustAnalogSettings
       6  SkAppTxAdjustAudioClkDivider
      64  SkAppTxAdjustVideoSettings
     132  SkAppTxCopyAif
      40  SkAppTxCopyVsif
      92  SkAppTxInfoFrameUpdate
      38  SkAppTxInstanceSet
      10  SkAppTxRepeaterIsResume
     198  StartTx
      16  testTimer
          lastTimeMs

 
    16 bytes in section .bss
     4 bytes in section .rodata
 2 676 bytes in section .text
 
 2 676 bytes of CODE  memory
     4 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: 11

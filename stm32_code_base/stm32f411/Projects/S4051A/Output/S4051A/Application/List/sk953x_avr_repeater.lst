###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:24:26 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\application\sk953x_avr_ #
#                    repeater.c                                               #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\application\sk953x_avr_ #
#                    repeater.c -D S4051A -D DEBUG -D FREE_RTOS -D            #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D __ARM_CORTEX_MX__ -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -lcN                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\ #
#                    DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applica #
#                    tion\Obj\ --debug --endian=little --cpu=Cortex-M4 -e     #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\sk953x_avr_repeater.lst                               #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\sk953x_avr_repeater.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\application\sk953x_avr_repeater.c
      1          //***************************************************************************
      2          //!file     sk9535_avr_repeater.c
      3          //!brief    SiI9535 Starter Kit firmware main module.
      4          //
      5          // No part of this work may be reproduced, modified, distributed,
      6          // transmitted, transcribed, or translated into any language or computer
      7          // format, in any form or by any means without written permission of
      8          // Silicon Image, Inc., 1140 East Arques Avenue, Sunnyvale, California 94085
      9          //
     10          // Copyright 2010-2012, Silicon Image, Inc.  All rights reserved.
     11          //***************************************************************************/
     12          
     13          #include "sk_application.h"
     14          #if INC_CBUS
     15          #include "sk_app_cbus.h"
     16          #endif
     17          #include "si_debugger_hdmigear.h"
     18          #include "si_eeprom.h"
     19          #include "si_gpio.h"
     20          #if INC_RTPI
     21          #include "si_rtpi_component.h"
     22          #endif
     23          
     24          #if ( configSII_DEV_953x_PORTING == 1 )
     25          #include "Debug.h"
     26          #include "GPIOMiddleLevel.h"
     27          #include "HdmiDeviceManager.h"
     28          
     29          #if INC_ARC
     30          #include "sk_app_arc.h"
     31          #endif
     32          
     33          #if INC_CEC_SAC
     34          #include "si_sac_main.h"
     35          #endif
     36          
     37          #endif
     38          
     39          //------------------------------------------------------------------------------
     40          #define HDMI_REPEATER_TIME_TICK TASK_MSEC2TICKS(50) /*Smith todo: it could be 100 msec*/
     41          #define HDMI_RST_TIME_TICK TASK_MSEC2TICKS(5000)
     42          //------------------------------------------------------------------------------
     43          
     44          typedef struct HDMI_MANAGER_VOL_PARAMETERS 
     45          {
     46              xTaskHandle hdmi_avr_repeater_task_handle;
     47              TaskHandleState hdmi_avr_repeater_state;
     48          	xTaskHandle hdmi_service_handle;
     49          	TaskHandleState ServiceState;
     50          	xQueueParameters QParams;
     51              xOS_TaskErrIndicator xOS_ErrId;
     52          } xOS_HDMI_Params;
     53          
     54          
     55          //------------------------------------------------------------------------------
     56          //  Application Data
     57          //------------------------------------------------------------------------------
     58          #if ( configSII_DEV_9535 == 1 )
     59          const char lSignonMsg [] = "SK9535 Firmware v";
     60          #else
     61          const char lSignonMsg [] = "SK9533 Firmware v";
     62          #endif
     63          
     64          const char lCopyrightMsg [] = "Copyright Silicon Image Inc, 2010-2013";
     65          extern char *buildTime;     // From buildtime.c
     66          extern char *buildVersion;  // From buildtime.c
     67          
     68          AppInstanceData_t app;
     69          AppInstanceData_t *pApp = &app;
     70          
     71          xOS_HDMI_Params xOS_HDMI_Parms;
     72          
     73          #if ( configSII_DEV_953x_PORTING == 1 )
     74          uint8_t SYS_CEC_ARC_APP_TASK = 0x00;
     75          uint16_t SYS_CEC_SAC_APP_TASK = 0x00;
     76          #endif
     77          
     78          extern uint16_t SiiDrvDeviceIdGet(void);
     79          extern uint8_t SiiDrvDeviceRevGet(void);
     80          
     81          //------------------------------------------------------------------------------
     82          static void HdmiDeviceManager_CreateTask( void );
     83          
     84          static void HdmiManager_DeviceEnable( bool enable );
     85          
     86          static bool HdmiDeviceManager_InstrSender( void *params ) ;
     87          
     88          static bool HdmiDeviceManager_GetMultiChannel(void);
     89          
     90          xHMI_SiiAppPowerStatus_t HdmiDeviceManager_GetHDMIPowerStatus(void);
     91          
     92          void AmTArcAppTaskAssign( AmTArcTaskEvent event);
     93          
     94          void AmTSacAppTaskAssign(AmTSacTaskEvent sac_event);
     95          
     96          const HDMI_DEVICE_MANAGER_OBJECT HdmiDeviceManager =
     97          {
     98              HdmiDeviceManager_CreateTask,
     99              HdmiDeviceManager_InstrSender,
    100              HdmiDeviceManager_GetMultiChannel,
    101              HdmiDeviceManager_GetHDMIPowerStatus,
    102          };
    103          const HDMI_DEVICE_MANAGER_OBJECT *pHDMI_DM_ObjCtrl = &HdmiDeviceManager;
    104          
    105          
    106          //------------------------------------------------------------------------------
    107          // Function:    SkAppSignon
    108          // Description: Display signon and configuration information
    109          //-----------------------------------------------------------------------------c
    110          void SkAppSignon ( void )
    111          {
    112          
    113          #if ( configSII_DEV_953x_PORTING == 0 )
    114              DEBUG_PRINT( MSG_ALWAYS, "\n\n%s%s\n%s\n", lSignonMsg, buildVersion, lCopyrightMsg );
    115              PrintAlways( buildTime );   // From buildtime.c
    116              DEBUG_PRINT( MSG_ALWAYS, "\nChipdID:0x%x\tChip Rev:0x%x\n", SiiDrvDeviceIdGet(), SiiDrvDeviceRevGet() );
    117          #else
    118              TRACE_DEBUG(( 0, "%s %s %s", lSignonMsg, buildVersion, lCopyrightMsg ));
    119              TRACE_DEBUG((0, " 0x%X, 0x%X", SiiDrvDeviceIdGet(), SiiDrvDeviceRevGet() ));
    120          #endif 
    121          
    122          }
    123          
    124          //------------------------------------------------------------------------------
    125          // Function:    main
    126          // Description: Main entry point for SK9535 Starter Kit firmware
    127          // Parameters:  none
    128          // Returns:     none
    129          //------------------------------------------------------------------------------
    130          #if ( configSII_DEV_953x_PORTING == 0 )
    131          int main(void)
    132          {
    133              if ( !SiiPlatformInitialize() )
    134              {
    135                  SkAppBlinkTilReset( ERRLED_BAD_INIT );
    136              }
    137              SkAppInitialize();
    138              SkAppSignon();
    139          
    140          #if ( SII_POWER_TYPE == APP_POWERTYPE_FULL )
    141              // In this power type, power is always on to the entire chip
    142              SiiPlatformGpioSetPower(SII_GPIO_POWER_ALL, ON );
    143          #endif
    144          
    145          #if ( INC_CBUS_WAKEUP )
    146              SkAppDeviceInitCbusWakeup();
    147          #endif
    148          
    149          #if ( SII_POWER_TYPE != APP_POWERTYPE_MAIN )
    150              SkAppDeviceInitialize();    // Initialize anything that can be done with PWD and/or AON power on
    151          #ifndef POWER_UP_ONLY    
    152              SkAppLowPowerStandby();     // Place most of the chip into low power standby mode
    153          #if INC_CEC
    154              SkAppCecResume(false);      // Resume the CEC component so it can handle wake up messages
    155          #endif
    156          #endif // #ifndef POWER_UP_ONLY
    157          #endif
    158          
    159              for ( ;; )  // Main loop
    160          	{
    161                  // Only check the debugger if power is on.
    162          #if ( SII_POWER_TYPE != APP_POWERTYPE_FULL )
    163                  if ( app.powerState == APP_POWERSTATUS_ON)
    164          #endif
    165                  {
    166                      if ( SkRemoteRequestHandler() )
    167                      {
    168                          continue;
    169                      }
    170                  }
    171          
    172                  //---------------------------------------------------------------------
    173                  // The code in the following tasks can modify the power state of the
    174                  // system, so they must be run in any power state.  They do not
    175                  // access the SiI9535 I2C registers in case the system is designed
    176                  // to not provide standby power to the SiI9535.
    177                  //---------------------------------------------------------------------
    178                  SkAppTaskCbusStandByMonitoring();
    179                  SkAppDevicePower();
    180          #ifndef POWER_UP_ONLY
    181                  SkAppTaskIrRemote( app.powerState == APP_POWERSTATUS_ON );
    182          #if INC_CBUS && INC_CBUS_WAKEUP
    183          
    184                  SkAppCbusWakeupSequence(app.powerState == APP_POWERSTATUS_ON);
    185          #endif
    186                  //---------------------------------------------------------------------
    187                  // From this point on it is assumed that the SiI9535 Always On power
    188                  // domain has power, but not necessarily the power down domain.
    189                  //
    190                  // Service the Silicon Image device interrupts.  If the system is in
    191                  // standby, a reduced interrupt check is performed only on those
    192                  // systems that are capable of waking up the system.
    193                  //---------------------------------------------------------------------
    194                  SkAppTaskSiiDevice();
    195          #if INC_CEC
    196                  SkAppTaskCec();
    197          #endif
    198                  if ( app.powerState != APP_POWERSTATUS_ON )
    199                  {
    200                      continue;
    201              	}
    202          
    203                  //---------------------------------------------------------------------
    204                  // From this point on it is assumed that the SiI9535 is at full power.
    205                  //---------------------------------------------------------------------
    206          #if INC_CBUS
    207                 	SkAppTaskCbus();
    208          #endif
    209                	SkAppTaskSwitch();
    210                  SkAppTaskRepeater();
    211                  SkAppTaskTx();
    212          #if INC_IPV
    213                  SkAppTaskIpv();
    214          #endif
    215          
    216          #if INC_OSD
    217          		SkAppTaskOsd();
    218          #endif
    219          
    220          		SkAppTaskAudio();
    221          
    222          
    223          #if INC_RTPI
    224          		SiiRtpiProcessRtpi();
    225          #endif
    226          
    227                  // Run the appropriate UI
    228                  switch ( app.modeSelect )
    229                  {
    230                      case SK_MODE_TV:
    231                          SkAppTv();
    232                          break;
    233                      case SK_MODE_DEMO:
    234                          SkAppDemo();
    235                          break;
    236                      case SK_MODE_SETUP:
    237                          SkAppSetup();
    238                          break;
    239          #if INC_BENCH_TEST
    240                      case SK_MODE_BTST:
    241                          SkAppBenchTest();
    242                          break;
    243          #endif
    244          
    245                      default:
    246                          break;
    247                  }
    248          
    249                  if( pApp->isThxDemo )
    250                  {
    251                  	SkAppTaskThx();
    252                  }
    253          
    254                  SkAppSwitchPortUpdate();    // Check for port updates from any of the tasks.
    255          #endif // #ifndef POWER_UP_ONLY
    256              }
    257          
    258          
    259              return( 0 );
    260          }
    261          #endif /*( configSII_DEV_953x_PORTING == 0 )*/ 
    262          
    263          
    264          static void sii953x_repeater_task( void )
    265          {
    266              //---------------------------------------------------------------------
    267              // The code in the following tasks can modify the power state of the
    268              // system, so they must be run in any power state.	They do not
    269              // access the SiI9535 I2C registers in case the system is designed
    270              // to not provide standby power to the SiI9535.
    271              //---------------------------------------------------------------------
    272          
    273          #if ( configSII_DEV_953x_PORTING_CBUS == 1 )	 
    274              SkAppTaskCbusStandByMonitoring();
    275          #endif
    276              SkAppDevicePower();
    277          
    278          #if ( configSII_DEV_953x_PORTING_CBUS == 1 )	 
    279          #if INC_CBUS && INC_CBUS_WAKEUP
    280              SkAppCbusWakeupSequence(app.powerState == APP_POWERSTATUS_ON);
    281          #endif
    282          #endif
    283          
    284              //---------------------------------------------------------------------
    285              // From this point on it is assumed that the SiI9535 Always On power
    286              // domain has power, but not necessarily the power down domain.
    287              //
    288              // Service the Silicon Image device interrupts.  If the system is in
    289              // standby, a reduced interrupt check is performed only on those
    290              // systems that are capable of waking up the system.
    291              //---------------------------------------------------------------------
    292              SkAppTaskSiiDevice();
    293          
    294          #if INC_CEC
    295              SkAppTaskCec();
    296          #endif
    297          
    298          	if ( app.powerState == APP_POWERSTATUS_ON )
    299          	{
    300          	
    301          #if ( configSII_DEV_953x_PORTING == 1 )	 
    302              AmTArcTaskAssign(SYS_CEC_ARC_APP_TASK);	//Assign task event to ARC after powered on sil953x
    303              SYS_CEC_ARC_APP_TASK = 0;	//Reset app task event
    304          	
    305              AmTSacTaskAssign(SYS_CEC_SAC_APP_TASK);	//Assign task event to SAC after powered on sil953x
    306              SYS_CEC_SAC_APP_TASK = 0;	//Reset app task event
    307          #endif
    308          		//---------------------------------------------------------------------
    309          		// From this point on it is assumed that the SiI9535 is at full power.
    310          		//---------------------------------------------------------------------
    311          #if ( configSII_DEV_953x_PORTING_CBUS == 1 )	 
    312          #if INC_CBUS
    313          		SkAppTaskCbus();
    314          #endif
    315          #endif
    316                  SkAppTaskSwitch();
    317                  SkAppTaskRepeater();
    318                  SkAppTaskTx();
    319                  
    320          #if INC_IPV
    321          		SkAppTaskIpv();
    322          #endif
    323          
    324          #if INC_OSD
    325          		SkAppTaskOsd();
    326          #endif
    327          		SkAppTaskAudio();
    328          		
    329          #if INC_RTPI
    330          		SiiRtpiProcessRtpi();
    331          #endif
    332          
    333          		switch ( app.modeSelect )
    334          		{
    335          			case SK_MODE_TV:
    336          				SkAppTv();
    337          				break;
    338          			case SK_MODE_DEMO:
    339          				SkAppDemo();
    340          				break;
    341          			case SK_MODE_SETUP:
    342          				SkAppSetup();
    343          				break;
    344          #if INC_BENCH_TEST
    345          			case SK_MODE_BTST:
    346          				SkAppBenchTest();
    347          				break;
    348          #endif
    349          
    350          			default:
    351          				break;
    352          		}
    353          
    354          		if( pApp->isThxDemo )
    355          		{
    356          			SkAppTaskThx();
    357          		}
    358          
    359          		SkAppSwitchPortUpdate();	// Check for port updates from any of the tasks.
    360          
    361          	}
    362          
    363          }
    364          
    365          static void HdmiDeviceManager_RstDevice( void )
    366          {
    367          	GPIOMiddleLevel_Clr(__O_RST_HDMI_SIL953x );
    368          	vTaskDelay(1);
    369          	GPIOMiddleLevel_Set(__O_RST_HDMI_SIL953x );
    370          	vTaskDelay(1);
    371          }
    372          
    373          static bool_t HdmiDeviceManager_Initializie( void )
    374          {
    375          	bool_t ret = true;
    376          	
    377              ret = SkAppInitialize();
    378              SkAppSignon();
    379          
    380          #if ( configSII_DEV_953x_PORTING_CBUS == 1 )
    381          #if ( INC_CBUS_WAKEUP )
    382              ret = SkAppDeviceInitCbusWakeup();
    383          #endif
    384          #endif
    385          
    386          	ret= SkAppDeviceInitialize(); // Initialize anything that can be done with PWD and/or AON power on
    387              SkAppLowPowerStandby();     // Place most of the chip into low power standby mode
    388              
    389          #if INC_CEC
    390              SkAppCecResume(false);      // Resume the CEC component so it can handle wake up messages
    391          #endif
    392          
    393          	return ( ret );
    394          
    395          }
    396          
    397          //_______________________________AMTRAN IMPLEMENTED_____________________________________________
    398          static void HdmiManager_DeviceEnable( bool enable )
    399          {
    400          	if ( enable == TRUE )
    401          	{
    402          		if ( app.powerState == APP_POWERSTATUS_STANDBY )
    403          		{
    404          			app.powerState = APP_POWERSTATUS_STANDBY_TO_ON;
    405          			TRACE_DEBUG((0, "sil9533 powered up !! "));
    406          		}
    407          	}
    408          	else if ( enable == FALSE )
    409          	{
    410          		if ( app.powerState == APP_POWERSTATUS_ON )
    411          		{
    412          			app.powerState = APP_POWERSTATUS_ON_TO_STANDBY;
    413          			TRACE_DEBUG((0, "sil9533 powered down !! "));
    414          		}	
    415          	}
    416          }
    417          
    418          static void HdmiDeviceManager_handleCommand( xHMISystemParams params  )
    419          {
    420          	switch( params.sys_event )
    421          	{
    422                      case SYS_EVENT_SYSTEM_UP:
    423                      case SYS_EVENT_CEC_SYSTEM_UP:
    424                      case SYS_EVENT_SAC_SYSTEM_UP:
    425                      case SYS_EVENT_ARC_SYSTEM_UP:
    426          		{
    427          			if ( params.input_src == AUDIO_SOURCE_HDMI_ARC )
    428          			{
    429                                          HdmiManager_DeviceEnable( TRUE );
    430          								
    431                                          #if INC_ARC
    432          				AmTArcAppTaskAssign(ARC_TASK_INIT_OUTRIGHT);
    433                                          #endif	
    434          								
    435                                          #if INC_CEC_SAC
    436          		                AmTSacAppTaskAssign(SAC_TASK_INITIATE_DIRECTLY);
    437                                          #endif	
    438          			}
    439          			else if ( params.input_src == AUDIO_SOURCE_HDMI_IN )
    440          			{
    441                                          HdmiManager_DeviceEnable( TRUE );
    442          								
    443                                          #if INC_ARC
    444          				AmTArcAppTaskAssign(ARC_TASK_TERM_PRIVATELY);	//terminate ARC but keep flag enable		
    445                                          #endif	
    446          								
    447                                          #if INC_CEC_SAC
    448          		                AmTSacAppTaskAssign(SAC_TASK_INITIATE_POWER_ON);
    449                                          #endif	
    450          			}
    451          			/*else
    452          			{
    453          #if INC_ARC
    454                                  AmTArcTaskAssign(ARC_TASK_TERM_PRIVATELY);	//terminate ARC but keep flag enable
    455          #endif								
    456          			}*/
    457                          }
    458          			break;
    459          
    460                      case SYS_EVENT_SYSTEM_DOWN:
    461          		{
    462                              //HdmiManager_DeviceEnable( FALSE );
    463          					
    464          #if INC_CEC_SAC
    465                              //Need use this api to pass event when HDMI is off
    466                              AmTSacTaskAssign(CEC_SAC_TASK_TERMINATE);
    467          #endif
    468          
    469          #if INC_ARC
    470                              //Need use this api to pass event when HDMI is off
    471                              AmTArcTaskAssign(SYS_CEC_TASK_ARC_TERMINATE);	//terminate ARC but keep flag enable		
    472          #endif
    473                              vTaskDelay(200);
    474                              HdmiManager_DeviceEnable( FALSE );
    475          
    476                          }
    477          			break;
    478          
    479          		case SYS_EVENT_SEL_SRC:
    480          		{
    481          			TRACE_DEBUG((0, "port select = %d", params.input_src ));
    482          
    483          			if ( params.input_src == AUDIO_SOURCE_HDMI_ARC )
    484          			{
    485                                       HdmiManager_DeviceEnable( TRUE );
    486          #if INC_ARC
    487                                      AmTArcAppTaskAssign(ARC_TASK_INIT_OUTRIGHT);
    488          #endif
    489          #if INC_CEC_SAC
    490           	                    AmTSacAppTaskAssign(SAC_TASK_INITIATE_DIRECTLY);
    491          #endif	
    492          			}
    493          			else if ( params.input_src == AUDIO_SOURCE_HDMI_IN )
    494          			{
    495                                      HdmiManager_DeviceEnable( TRUE );
    496          #if INC_ARC
    497                                      AmTArcAppTaskAssign(ARC_TASK_TERM_PRIVATELY);	//terminate ARC but keep flag enable		
    498          #endif
    499          #if INC_CEC_SAC
    500          		            AmTSacAppTaskAssign(SAC_TASK_INITIATE_POWER_ON);
    501          #endif	
    502          			}
    503          			else
    504          			{
    505                                      HdmiManager_DeviceEnable( FALSE );
    506          #if INC_ARC
    507                                      //Need use this api to pass event when HDMI is off
    508                                      AmTArcTaskAssign(SYS_CEC_TASK_ARC_TERMINATE);	//terminate ARC but keep flag enable
    509          #endif
    510          
    511          #if INC_CEC_SAC
    512                                      //Need use this api to pass event when HDMI is off
    513                                      AmTSacTaskAssign(CEC_SAC_TASK_TERMINATE);
    514          #endif
    515          			}
    516          		}
    517          			break;
    518          
    519          	}
    520          }
    521          
    522          static bool HdmiDeviceManager_InstrSender( void *params ) 
    523          {
    524             xHMISystemParams* pInstr = ( xHMISystemParams *)params;
    525          
    526              if ( pInstr == NULL )
    527              {
    528                  TRACE_ERROR((0, "HdmiDeviceManager_InstrSender parameters error !! "));
    529                  return FALSE;
    530              }
    531              
    532              if (xOS_HDMI_Parms.QParams.xQueue == NULL )
    533              {
    534                  TRACE_ERROR((0, "HdmiDeviceManager_InstrSender xqueue is null !! "));
    535                  return FALSE;
    536              }
    537              
    538              if ( xQueueSend( xOS_HDMI_Parms.QParams.xQueue, pInstr, xOS_HDMI_Parms.QParams.xBlockTime ) != pdPASS )
    539          	{
    540          		TRACE_ERROR((0, "HdmiDeviceManager_InstrSender sends queue failure "));
    541          		return FALSE;
    542          	}
    543              return TRUE;
    544          
    545          }
    546          
    547          static uint8 HdmiDeviceManager_GetQueueNumber( void )
    548          {
    549          	return (uint8)uxQueueMessagesWaiting(xOS_HDMI_Parms.QParams.xQueue);
    550          }
    551          
    552          static bool HdmiDeviceManager_InstrReceiver( xHMISystemParams *pInstr ) 
    553          {
    554              if ( pInstr == NULL )
    555              {
    556                  TRACE_ERROR((0, " HdmiDeviceManager_InstrReceiver instruction recevier error !! "));
    557              }
    558              
    559          	if ( xOS_HDMI_Parms.QParams.xQueue == NULL )
    560          	{
    561                  TRACE_ERROR((0, "HdmiDeviceManager_InstrReceiver queue is null !! "));
    562                  return FALSE;
    563          	}
    564          
    565          	if ( xQueueReceive( xOS_HDMI_Parms.QParams.xQueue, pInstr, xOS_HDMI_Parms.QParams.xBlockTime ) != pdPASS )
    566          	{
    567          		TRACE_ERROR((0, " HdmiDeviceManager_InstrReceiver receiver queue is failure "));
    568          		return FALSE;
    569          	}
    570          
    571          	return TRUE;
    572          }
    573          
    574          static void HdmiManager_RepeaterTask( void *pvParameters )
    575          {
    576              for ( ;; )
    577              {
    578          		switch( xOS_HDMI_Parms.hdmi_avr_repeater_state )
    579          		{
    580          			case TASK_SUSPENDED:
    581          				break;
    582          			
    583          			case TASK_READY:
    584          			{
    585          				HdmiDeviceManager_RstDevice( );
    586          				if( HdmiDeviceManager_Initializie( ) == true )
    587          				{
    588          					xOS_HDMI_Parms.hdmi_avr_repeater_state = TASK_RUNING;
    589          				}
    590          				else
    591          				{
    592          					TRACE_ERROR((0, "SIL9533 cannot be connected !! "));
    593          					xOS_HDMI_Parms.hdmi_avr_repeater_state = TASK_BLOCKED;
    594          				}
    595          			}
    596          				break;
    597          
    598          			case TASK_RUNING:
    599          			{
    600          				sii953x_repeater_task( );
    601          			}
    602          				break;
    603          
    604          			case TASK_BLOCKED:
    605          			{
    606          
    607          			}
    608          				break;
    609          
    610          		}
    611          		
    612                  vTaskDelay( HDMI_REPEATER_TIME_TICK );
    613              }
    614          }
    615          
    616          
    617          static void HdmiDeviceManager_ServiceHandle( void *pvParameters )
    618          {
    619          	xHMISystemParams systemParams;
    620          	
    621          	for( ;; )
    622          	{
    623          		switch( xOS_HDMI_Parms.ServiceState )
    624          		{
    625          			case TASK_SUSPENDED:
    626          			{
    627                          if( ( HdmiDeviceManager_GetQueueNumber() > 0 )  && (xOS_HDMI_Parms.hdmi_avr_repeater_state == TASK_RUNING) )
    628                          {
    629                              xOS_HDMI_Parms.ServiceState = TASK_READY;
    630                          }
    631          			}
    632          				break;
    633          		
    634          			case TASK_READY:
    635          			{
    636                          if ( HdmiDeviceManager_InstrReceiver( (xHMISystemParams*)&systemParams ) == TRUE )
    637          				{
    638          					xOS_HDMI_Parms.ServiceState = TASK_RUNING;
    639          				}
    640          				else
    641          				{
    642          					xOS_HDMI_Parms.ServiceState = TASK_SUSPENDED;
    643          				}
    644          				
    645          			}
    646          				break;
    647          
    648          			case TASK_RUNING:
    649          			{
    650          				HdmiDeviceManager_handleCommand( systemParams );
    651          				xOS_HDMI_Parms.ServiceState = TASK_BLOCKED;
    652          			}
    653          				break;
    654          
    655          			case TASK_BLOCKED:
    656          			{
    657                          xOS_HDMI_Parms.ServiceState = TASK_SUSPENDED;
    658          			}
    659          				break;	
    660          		}
    661          
    662          		vTaskDelay( TASK_MSEC2TICKS(1) );
    663          	}
    664          
    665          }
    666          
    667          static void HdmiDeviceManager_CreateTask( void )
    668          {
    669          	xOS_HDMI_Parms.QParams.xQueue = xQueueCreate( 5, FRTOS_SIZE(xHMISystemParams) );
    670          	xOS_HDMI_Parms.QParams.xBlockTime = BLOCK_TIME(0);
    671          	if( xOS_HDMI_Parms.QParams.xQueue == NULL )
    672          	{
    673          	}
    674          
    675              if ( xTaskCreate( HdmiManager_RepeaterTask, 
    676                      ( portCHAR * ) "SII9535_ENTRY", 
    677                      (STACK_SIZE*2), NULL, tskSII9535_PRIORITY,&xOS_HDMI_Parms.hdmi_avr_repeater_task_handle) != pdPASS )
    678              {
    679                  vTaskDelete( xOS_HDMI_Parms.hdmi_avr_repeater_task_handle );
    680                  xOS_HDMI_Parms.xOS_ErrId = xOS_TASK_CREATE_FAIL;
    681          		xOS_HDMI_Parms.hdmi_avr_repeater_state = TASK_SUSPENDED;
    682              }
    683              else
    684              {
    685          		SiiPlatformInitialize();
    686                  //vTaskSuspend( xOS_HDMI_Parms.hdmi_avr_repeater_task_handle );
    687                  xOS_HDMI_Parms.xOS_ErrId = xOS_TASK_ERR_NULL;
    688          		xOS_HDMI_Parms.hdmi_avr_repeater_state = TASK_READY;
    689              }
    690          
    691          	if ( xTaskCreate( 
    692          		HdmiDeviceManager_ServiceHandle, 
    693          		( portCHAR * ) "HDMI_SRV", 
    694          		(STACK_SIZE), 
    695          		NULL, 
    696          		tskHDMI_SERVICE_PRIORITY, 
    697          		&xOS_HDMI_Parms.hdmi_service_handle ) != pdPASS )
    698          	{
    699          		xOS_HDMI_Parms.xOS_ErrId = xOS_TASK_CREATE_FAIL;
    700          		xOS_HDMI_Parms.ServiceState = TASK_SUSPENDED;
    701          		vTaskDelete( xOS_HDMI_Parms.hdmi_service_handle );
    702          	}
    703              
    704          }
    705          
    706          bool HdmiDeviceManager_GetMultiChannel(void)
    707          {
    708              return AmTAudiogetMultiChannel();
    709          }
    710          
    711          xHMI_SiiAppPowerStatus_t HdmiDeviceManager_GetHDMIPowerStatus(void)
    712          {
    713              return (xHMI_SiiAppPowerStatus_t)app.powerState;
    714          }
    715          
    716          
    717          //-------------------------------------------------------------------------------------------------
    718          //! @brief      
    719          //-------------------------------------------------------------------------------------------------
    720          void AmTArcAppTaskAssign( AmTArcTaskEvent event)
    721          {
    722          	xHMISystemParams SysPrams;
    723          
    724          	SysPrams = AmTCecGetSyspramsFromHMI();
    725          	
    726          	switch (event)
    727          	{
    728          		case ARC_TASK_INIT_OUTRIGHT:
    729          		{			
    730          	                AmTCecEventPassToHMI(USER_EVENT_CEC_SET_ARC_ON);
    731          	                SYS_CEC_ARC_APP_TASK |= SYS_CEC_TASK_ARC_INITIONAL;
    732          		}
    733          			break;
    734          			
    735          		case ARC_TASK_INIT_PRIVATELY:
    736          		{
    737          			if ( SysPrams.cec_arc == TRUE )
    738          			{
    739          	                        SYS_CEC_ARC_APP_TASK |= SYS_CEC_TASK_ARC_INITIONAL;
    740          			}
    741          		}
    742          			break;
    743          
    744          		case ARC_TASK_INIT_REQUESTED:
    745          		{			
    746          /*			if ( !AmTIPowerOnSystem() )	//if need power on system, then no need to set task here
    747          			{
    748          	                        AmTCecEventPassToHMI(USER_EVENT_CEC_SET_ARC_ON);
    749          	                        SYS_CEC_TASK |= SYS_CEC_TASK_ARC_INITIONAL;
    750          			}
    751          			if ( SysPrams.input_src != AUDIO_SOURCE_HDMI_ARC )
    752          			    AmTCecEventPassToHMI(USER_EVENT_SEL_HDMI_ARC);
    753          */
    754          			AmTCecEventPassToHMI(USER_EVENT_CEC_SET_ARC_ON);
    755          			AmTCecEventPassToHMI(USER_EVENT_ARC_POWER_ON);
    756          	                SYS_CEC_ARC_APP_TASK |= SYS_CEC_TASK_ARC_INITIONAL;
    757          		}
    758          			break;
    759          
    760          		case ARC_TASK_TERM_REQUESTED:
    761          		{
    762          			if ( SysPrams.cec_arc == TRUE )
    763          			{
    764          	                        AmTCecEventPassToHMI(USER_EVENT_CEC_SET_ARC_OFF);
    765          	                        SYS_CEC_ARC_APP_TASK |= SYS_CEC_TASK_ARC_TERMINATE;
    766          			}
    767          		}
    768          			break;
    769          
    770          		case ARC_TASK_TERM_PRIVATELY:
    771          		{
    772          			if ( SysPrams.cec_arc == TRUE )
    773          			{
    774          	                        SYS_CEC_ARC_APP_TASK |= SYS_CEC_TASK_ARC_TERMINATE;
    775          			}
    776          		}
    777          			break;
    778          
    779          		case ARC_TASK_REPORT_INIT:
    780          		{
    781          	                SYS_CEC_ARC_APP_TASK |= SYS_CEC_TASK_ARC_REPORT_INITIONAL;
    782          		}
    783          			break;
    784          
    785          		case ARC_TASK_REPORT_TERM:
    786          		{
    787          	                SYS_CEC_ARC_APP_TASK |= SYS_CEC_TASK_ARC_REPORT_TERMINATE;
    788          		}
    789          			break;
    790          
    791          		default:
    792          			break;
    793          	}
    794              //TRACE_DEBUG((0, "SYS_CEC_ARC_APP_TASK %d", SYS_CEC_ARC_APP_TASK ));
    795          }
    796          
    797          
    798          //-------------------------------------------------------------------------------------------------
    799          //! @brief    
    800          //-------------------------------------------------------------------------------------------------
    801          void AmTSacAppTaskAssign(AmTSacTaskEvent sac_event)
    802          {		
    803                  switch ( sac_event )
    804          	{
    805          	        case SAC_TASK_TERMINATE_POWER_OFF:
    806          		{
    807          		    SYS_CEC_SAC_APP_TASK |= CEC_SAC_TASK_TERMINATE;
    808          	        }
    809          			break;
    810          
    811          		case SAC_TASK_INITIATE_POWER_ON:
    812          		{
    813          		    SYS_CEC_SAC_APP_TASK |= CEC_SAC_TASK_INITIATE;
    814          	        }
    815          		        break;
    816          
    817          		case SAC_TASK_INITIATE_WAIT_TV_RESPONSE:
    818          		{
    819                              SYS_CEC_SAC_APP_TASK |= CEC_SAC_TASK_WAIT_TV_RESPONSE;
    820          	        }
    821          		        break;
    822          
    823          		case SAC_TASK_INITIATE_DIRECTLY:
    824          		{
    825                              SYS_CEC_SAC_APP_TASK |= CEC_SAC_TASK_INITIATE_DIRECTLY;
    826          		}
    827          		        break;
    828          
    829          		default:
    830          		{
    831          		        break;
    832          		}
    833                  }
    834          }
    835          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  AmTArcAppTaskAssign
             40 -> AmTCecEventPassToHMI
             40 -> AmTCecGetSyspramsFromHMI
        0  AmTSacAppTaskAssign
       32  HdmiDeviceManager_CreateTask
             32 -> SiiPlatformInitialize
              0 -> vTaskDelete
             32 -> vTaskDelete
             32 -> xQueueGenericCreate
             32 -> xTaskGenericCreate
        0  HdmiDeviceManager_GetHDMIPowerStatus
        0  HdmiDeviceManager_GetMultiChannel
              0 -> AmTAudiogetMultiChannel
        8  HdmiDeviceManager_InstrSender
              8 -> Debug_printError
              8 -> xQueueGenericSend
       48  HdmiDeviceManager_ServiceHandle
             48 -> AmTArcAppTaskAssign
             48 -> AmTArcTaskAssign
             48 -> AmTSacAppTaskAssign
             48 -> AmTSacTaskAssign
             48 -> Debug_printDebug
             48 -> Debug_printError
             48 -> HdmiManager_DeviceEnable
             48 -> uxQueueMessagesWaiting
             48 -> vTaskDelay
             48 -> xQueueGenericReceive
        0  HdmiManager_DeviceEnable
              0 -> Debug_printDebug
       24  HdmiManager_RepeaterTask
             24 -> AmTArcTaskAssign
             24 -> AmTSacTaskAssign
             24 -> Debug_printError
             24 -> GPIOMiddleLevel_Clr
             24 -> GPIOMiddleLevel_Set
             24 -> SiiRtpiProcessRtpi
             24 -> SkAppCecResume
             24 -> SkAppDemo
             24 -> SkAppDeviceInitialize
             24 -> SkAppDevicePower
             24 -> SkAppInitialize
             24 -> SkAppLowPowerStandby
             24 -> SkAppSetup
             24 -> SkAppSignon
             24 -> SkAppSwitchPortUpdate
             24 -> SkAppTaskAudio
             24 -> SkAppTaskCec
             24 -> SkAppTaskIpv
             24 -> SkAppTaskRepeater
             24 -> SkAppTaskSiiDevice
             24 -> SkAppTaskSwitch
             24 -> SkAppTaskThx
             24 -> SkAppTaskTx
             24 -> SkAppTv
             24 -> vTaskDelay
       16  SkAppSignon
              0 -> Debug_printDebug
             16 -> Debug_printDebug
             16 -> SiiDrvDeviceIdGet
             16 -> SiiDrvDeviceRevGet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant " 0x%X, 0x%X">
      60  ?<Constant " HdmiDeviceManager_In...">
      12  ?<Constant "%s %s %s">
      12  ?<Constant "HDMI_SRV">
      52  ?<Constant "HdmiDeviceManager_Ins...">
      52  ?<Constant "HdmiDeviceManager_Ins...">_1
      52  ?<Constant "HdmiDeviceManager_Ins...">_2
      52  ?<Constant "HdmiDeviceManager_Ins...">_3
      16  ?<Constant "SII9535_ENTRY">
      32  ?<Constant "SIL9533 cannot be con...">
      20  ?<Constant "port select = %d">
      28  ?<Constant "sil9533 powered down !! ">
      24  ?<Constant "sil9533 powered up !! ">
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
     122  AmTArcAppTaskAssign
      44  AmTSacAppTaskAssign
      16  HdmiDeviceManager
     136  HdmiDeviceManager_CreateTask
       6  HdmiDeviceManager_GetHDMIPowerStatus
       4  HdmiDeviceManager_GetMultiChannel
      52  HdmiDeviceManager_InstrSender
     242  HdmiDeviceManager_ServiceHandle
      50  HdmiManager_DeviceEnable
     212  HdmiManager_RepeaterTask
      60  SkAppSignon
     204  app
      40  lCopyrightMsg
      20  lSignonMsg
       4  pHDMI_DM_ObjCtrl
      40  xOS_HDMI_Parms
          SYS_CEC_ARC_APP_TASK
          SYS_CEC_SAC_APP_TASK
          pApp

 
   204 bytes in section .bss
    44 bytes in section .data
    16 bytes in section .rodata
 1 432 bytes in section .text
 
 1 432 bytes of CODE  memory
    16 bytes of CONST memory
   248 bytes of DATA  memory

Errors: none
Warnings: 1

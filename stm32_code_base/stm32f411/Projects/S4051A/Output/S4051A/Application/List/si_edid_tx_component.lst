###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:24:44 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\edid_tx\si_ed #
#                    id_tx_component.c                                        #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\edid_tx\si_ed #
#                    id_tx_component.c -D S4051A -D DEBUG -D FREE_RTOS -D     #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D __ARM_CORTEX_MX__ -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -lcN                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\ #
#                    DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applica #
#                    tion\Obj\ --debug --endian=little --cpu=Cortex-M4 -e     #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\si_edid_tx_component.lst                              #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\si_edid_tx_component.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\component\edid_tx\si_edid_tx_component.c
      1          //************************************************************************************************
      2          //! @file   si_edid_tx_component.c
      3          //! @brief  Silicon Image EDID Tx Component
      4          //
      5          // No part of this work may be reproduced, modified, distributed,
      6          // transmitted, transcribed, or translated into any language or computer
      7          // format, in any form or by any means without written permission of
      8          // Silicon Image, Inc., 1060 East Arques Avenue, Sunnyvale, California 94085
      9          //
     10          // Copyright 2002-2010, Silicon Image, Inc.  All rights reserved.
     11          //***********************************************************************************************/
     12          
     13          #include "string.h"
     14          #include <stdio.h>
     15          #include "si_edid_tx_component.h"
     16          #include "si_edid_tx_internal.h"
     17          #include "si_tx_config.h"
     18          #include "si_scaler_tables.h"
     19          #include "si_video_tables.h"
     20          #include "si_cbus_internal.h"
     21          #include "si_cbus_config.h"
     22          
     23          #if (MHL_20 == ENABLE)
     24          extern MHL3DSupportData_t gMHL3D_VIC[SII_NUM_EDID_TX];
     25          extern MHL3DSupportData_t gMHL3D_DTD[SII_NUM_EDID_TX];
     26          extern MHL3DSupportData_t  *pMHL3D_VIC;
     27          extern MHL3DSupportData_t  *pMHL3D_DTD;
     28          #endif
     29          
     30          
     31          //------------------------------------------------------------------------------
     32          //  EdidTx Component Instance Data
     33          //------------------------------------------------------------------------------
     34          
     35          EdidTxDecodData_t    edidDecodData[SII_NUM_TX];
     36          EdidTxInstanceData_t edidTxInstance[SII_NUM_EDID_TX];
     37          EdidTxInstanceData_t *pEdidTx = &edidTxInstance[0];
     38          
     39          
     40          //-------------------------------------------------------------------------------------------------
     41          //  Local service functions
     42          //-------------------------------------------------------------------------------------------------
     43          
     44          //-------------------------------------------------------------------------------------------------
     45          //! @brief      Print EDID TX related error messages.
     46          //!
     47          //! @param[in]  errors - error mask. @see TX_EDID_ERROR_MASKS
     48          //-------------------------------------------------------------------------------------------------
     49          
     50          static void PrintErrors(uint32_t errors)
     51          {
     52              if (errors)
     53              {
     54                  DEBUG_PRINT(EDID_TX_MSG_DBG, ("EDID Errors: "));
     55                  if (errors & EDID_ERROR__INCORRECT_VERSION)
     56                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("INCORRECT VERSION "));
     57                  if (errors & EDID_ERROR__CHECK_SUM_MISMATCH)
     58                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("CHECK SUM MISMATCH "));
     59                  if (errors & EDID_ERROR__INCORRECT_HEADER)
     60                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("INCORRECT HEADER "));
     61                  if (errors & EDID_ERROR__DEFAULT_EDID_USED)
     62                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DEFAULT EDID USED "));
     63                  if (errors & EDID_ERROR__CANNOT_READ_BL0)
     64                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("CANNOT READ BL0 "));
     65                  if (errors & EDID_ERROR__CANNOT_READ_EXT)
     66                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("CANNOT READ EXT "));
     67                  if (errors & EDID_ERROR__INCORRECT_MAP_TAG)
     68                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("INCORRECT MAP TAG "));
     69                  if (errors & EDID_ERROR__TOO_MANY_EXTENSIONS)
     70                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("TOO MANY EXTENSIONS "));
     71                  if (errors & EDID_ERROR__EXT_BLOCK_VIOLATION)
     72                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("EXT BLOCK VIOLATION "));
     73                  if (errors & EDID_ERROR__BLOCK_0_VIOLATION)
     74                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("BLOCK 0 VIOLATION "));
     75                  if (errors & EDID_ERROR__DATA_COLLECT_VIOLATION)
     76                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DATA COLLECTION VIOLATION "));
     77                  if (errors & EDID_ERROR__NOT_ENOUGH_ROOM)
     78                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("NOT ENOUGH ROOM "));
     79                  if (errors & EDID_ERROR__FOUND_UNSUPPORTED_DTD)
     80                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("FOUND UNSUPPORTED DTD "));
     81                  if (errors & EDID_ERROR__DTD_VIOLATION)
     82                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DTD VIOLATION "));
     83                  if (errors & EDID_ERROR__INTERNAL_ERROR)
     84                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("INTERNAL ERROR "));
     85                  if (errors & EDID_ERROR__CANNOT_WRITE)
     86                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("CANNOT WRITE "));
     87                  if (errors & EDID_ERROR__RANGE_LIMITATION)
     88                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("RANGE LIMITATION "));
     89                  if (errors & EDID_ERROR__NO_SPACE_FOR_DBC)
     90                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("NO SPACE FOR DBC "));
     91                  if (errors & EDID_ERROR__INCORRECT_AR_IN_DTD_FIX)
     92                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("INCORRECT AR IN DTD FIX "));
     93                  if (errors & EDID_ERROR__RANGE_LIMITS_CORRECTED)
     94                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("RANGE LIMITS CORRECTED "));
     95                  if (errors & EDID_ERROR__INCORRECT_PICTURE_SIZE)
     96                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("INCORRECT PICTURE SIZE "));
     97                  DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("\n"));
     98              }
     99          }
    100          
    101          
    102          //-------------------------------------------------------------------------------------------------
    103          //! @brief      Print a list of features supported by DS.
    104          //!
    105          //-------------------------------------------------------------------------------------------------
    106          
    107          static void PrintFeatures(void)
    108          {
    109              DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DS Device Supports: "));
    110              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_HDMI))
    111                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("HDMI "));}
    112              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_AI))
    113                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("AI "));}
    114              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_ENCODED_AUDIO))
    115                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("Encoded_Audio "));}
    116              else if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_AUDIO))
    117                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("PCM_Audio "));}
    118              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_1BIT_AUDIO))
    119                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DSD "));}
    120              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_HBR_AUDIO))
    121                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("HBRA "));}
    122              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_YCbCr))
    123                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("YCbCr "));}
    124              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_NTSC))
    125                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("NTSC "));}
    126              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_PAL))
    127                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("PAL "));}
    128              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_AR_16x9))
    129                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("16x9 "));}
    130              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_AR_4x3))
    131                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("4x3 "));}
    132              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_DEEP_COLOR_30_BIT))
    133                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DC30 "));}
    134              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_DEEP_COLOR_36_BIT))
    135                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DC36 "));}
    136              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_DEEP_COLOR_48_BIT))
    137                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DC48 "));}
    138              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_DEEP_COLOR_YCbCr_444))
    139                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("DC_Y444 "));}
    140              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_XVYCC_P0))
    141                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("xvYCC "));}
    142              if (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_3D))
    143                  {DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("3D "));}
    144              DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, ("\n"));
    145          
    146              if (SiiEdidTxDsDeviceRemedyMaskGet())
    147                  DEBUG_PRINT(EDID_TX_MSG_DBG, "DS Remedy Mask: 0x%04X\n", (int) SiiEdidTxDsDeviceRemedyMaskGet());
    148          
    149          }
    150          
    151          
    152          
    153          //------------------------------------------------------------------------------
    154          // Function:    EdidFixDecodedEdid
    155          // Description: Modifies decoded EDID information in the parsing structure filled
    156          //              by the EdidTxDecodeEdid() function.  Fixes some common
    157          //              problems found when reading downstream EDIDs.
    158          //------------------------------------------------------------------------------
    159          
    160          static void EdidFixDecodedEdid ( void )
    161          {
    162              bool_t use_default_cec_pa = false;
    163          
    164              // Attempt to recover CEC PA when DS EDID is not readable
    165          
    166              if ( pEdidTx->pEdidDecodData->edidInfo.ErrorCode & EDID_ERROR__DEFAULT_EDID_USED )
    167              {
    168          #if (SI_USE_CEC == ENABLE)
    169                  uint16_t old_pa = SiiCecGetDevicePA();
    170          
    171                  if ((0 != old_pa) && (0xFFFF != old_pa))
    172                  {
    173                      DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, "Attempt to recover CEC PA- old CEC PA is used\n" );
    174                      parsing->HDMI_VSDB.cec.a = (old_pa >> 12) & 0x0F;
    175                      parsing->HDMI_VSDB.cec.b = (old_pa >> 8) & 0x0F;
    176                      parsing->HDMI_VSDB.cec.c = (old_pa >> 4) & 0x0F;
    177                      parsing->HDMI_VSDB.cec.d = old_pa & 0x0F;
    178                  }
    179                  else
    180          #endif // SI_USE_CEC
    181                  {
    182                      use_default_cec_pa = true;
    183                  }
    184              }
    185          
    186              // 080403
    187              // A fix for downstream DVI devices.
    188              if (0 == pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.a)
    189                  use_default_cec_pa = true;
    190          
    191              if (use_default_cec_pa)
    192              {
    193                  DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, "CEC PA is defaulted to 1000\n" );
    194                  pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.a = 1;
    195                  pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.b = 0;
    196                  pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.c = 0;
    197                  pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.d = 0;
    198              }
    199          
    200              // 080403
    201              // A fix for DVI devices declaring audio or other HDMI features.
    202              // Example: Dell W1900 DVI Monitor declares audio support.
    203              if ( !pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.HdmiMode )
    204              {
    205                  pEdidTx->pEdidDecodData->edidInfo.SupportAudio = false;
    206                  pEdidTx->pEdidDecodData->edidInfo.SupportYCbCr = false;
    207                  //memset(pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.Extras, 0, sizeof(pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.Extras));
    208                  pEdidTx->pEdidDecodData->edidInfo.SadCount = 0;
    209              }
    210          }
    211          
    212          
    213          
    214          
    215          
    216          //-------------------------------------------------------------------------------------------------
    217          //  EDID TX API functions
    218          //-------------------------------------------------------------------------------------------------
    219          
    220          //-------------------------------------------------------------------------------------------------
    221          //! @brief      Returns index of an instance selected in context
    222          //!
    223          //! @return     Index of an instance record
    224          //-------------------------------------------------------------------------------------------------
    225          
    226          uint8_t SiiEdidTxInstanceGet(void)
    227          {
    228              return (pEdidTx - &edidTxInstance[0]);
    229          }
    230          
    231          
    232          //-------------------------------------------------------------------------------------------------
    233          //! @brief      Brings an instance referred by given index into current context.
    234          //!
    235          //! @param[in]  instance - index of an instance record
    236          //-------------------------------------------------------------------------------------------------
    237          
    238          void SiiEdidTxInstanceSet(uint8_t instance)
    239          {
    240          #if (SII_NUM_EDID_TX > 1)
    241              if (instance < SII_NUM_EDID_TX)
    242              {
    243                  pEdidTx = &edidTxInstance[instance];
    244                  pEdidTx->instanceIndex = instance;
    245          #if (MHL_20 == ENABLE)
    246                  pMHL3D_VIC = &gMHL3D_VIC[instance];
    247                  pMHL3D_DTD = &gMHL3D_DTD[instance];
    248          #endif
    249              }
    250          #endif
    251          }
    252          
    253          
    254          //-------------------------------------------------------------------------------------------------
    255          //! @brief      Switch EDID input to come from hooked TX component.
    256          //!
    257          //! @param[in]  input - EDID TX input accepting the EDID data from TX. Should be different
    258          //!                     for different TX instances in multi-input model.
    259          //! @return     success flag.
    260          //-------------------------------------------------------------------------------------------------
    261          
    262          bool_t SiiEdidTxInputSet(uint8_t input)
    263          {
    264              bool_t isSuccess = true;
    265          
    266              pEdidTx->lastResultCode = SI_TX_EDID_ERROR_CODE_NO_ERROR;
    267          
    268              if(input < pEdidTx->numOfTx)
    269              {
    270                  pEdidTx->pEdidDecodData = &edidDecodData[input];
    271              }
    272              else
    273              {
    274                  pEdidTx->lastResultCode = SI_TX_EDID_ERROR_CODE_BAD_INPUT_INDEX;
    275                  isSuccess = false;
    276              }
    277          
    278              return isSuccess;
    279          }
    280          
    281          //-------------------------------------------------------------------------------------------------
    282          //! @brief      Configures the EDID TX component to operate with the feature set
    283          //!             of the system video and audio, as well as sets system EDID options.
    284          //!
    285          //! @param[in]  numOfTx          - Number of transmitters providing EDID per the component instance
    286          //! @param[in]  videoFeatureMask - Video option mask. @see TX_EDID_VIDEO_CFG_MASKS
    287          //! @param[in]  audioFeatureMask - Audio option mask. @see TX_EDID_AUDIO_CFG_MASKS
    288          //! @param[in]  miscOptionsMask  - Miscellaneous EDID option mask. @see TX_EDID_MISC_CFG_MASKS
    289          //!
    290          //! @return     true if the configuration was successful, or false if some
    291          //!             failure occurred
    292          //-------------------------------------------------------------------------------------------------
    293          
    294          bool_t SiiEdidTxConfigure ( uint8_t  numOfTx, uint16_t videoFeatureMask,
    295                                      uint16_t audioFeatureMask, uint16_t miscOptionsMask)
    296          {
    297              pEdidTx->numOfTx = numOfTx;
    298          
    299              // Limits of this device
    300              if (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_ENABLE_MHL_LIMITS)
    301              {
    302                  pEdidTx->edidConfig.maxHorizKhz = MHL__MAX_H_KHZ, // Max Horiz. Freq
    303                  pEdidTx->edidConfig.minHorizKhz = MHL__MIN_H_KHZ, // Min Horiz. Freq
    304                  pEdidTx->edidConfig.maxVertHz = MHL__MAX_V_HZ, // Max Vertical Freq
    305                  pEdidTx->edidConfig.minVertHz = MHL__MIN_V_HZ, // Min Vertical Freq
    306                  pEdidTx->edidConfig.maxPixClock10Mhz = MHL__MAX_PIX_CLK_10MHZ; // Pixel Clock in 10MHz
    307              }
    308              else
    309              {
    310                  pEdidTx->edidConfig.maxHorizKhz = VIDEO__MAX_H_KHZ, // Max Horiz. Freq
    311                  pEdidTx->edidConfig.minHorizKhz = VIDEO__MIN_H_KHZ, // Min Horiz. Freq
    312                  pEdidTx->edidConfig.maxVertHz = VIDEO__MAX_V_HZ, // Max Vertical Freq
    313                  pEdidTx->edidConfig.minVertHz = VIDEO__MIN_V_HZ, // Min Vertical Freq
    314                  pEdidTx->edidConfig.maxPixClock10Mhz = VIDEO__MAX_PIX_CLK_10MHZ; // Pixel Clock in 10MHz
    315              }
    316          
    317          
    318              pEdidTx->usEdidBlockCount   = 2;
    319          
    320              pEdidTx->isSoundBarMode     = (0 != (miscOptionsMask & SI_TX_EDID_CFG_OPTIONS_SOUNDBAR_MODE));
    321              pEdidTx->isHdmi3DEnabled    = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_ENABLE_3D));
    322              pEdidTx->isXvYccProfile0    = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_ENABLE_XVYCC));
    323          
    324              pEdidTx->parseOptions.AllowCheckSumMismatchForBlock0 = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_ALLOW_BAD_CSUM_FOR_BLOCK0));
    325              pEdidTx->parseOptions.AllowPcModesOnScalerBypass = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_ALLOW_PC_MODES_NO_SCALER));
    326              pEdidTx->parseOptions.BypassScaler  = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_BYPASS_SCALER ));
    327              pEdidTx->parseOptions.OutIdx        = SII_PREFERRED_OUT_IDX;
    328              pEdidTx->parseOptions.AudioBypass   = (0 != (audioFeatureMask & SI_TX_EDID_AUDIO_CFG_BYPASS));
    329              pEdidTx->parseOptions.DviInput      = (0 != (miscOptionsMask & SI_TX_EDID_CFG_OPTIONS_FORCE_DVI_INPUT));
    330              pEdidTx->parseOptions.enableRemedies    = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_ENABLE_REMEDIES));
    331          
    332              pEdidTx->isDeepColor3036      = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_DC30_36));
    333              pEdidTx->isDeepColorOvrd      = (0 != (videoFeatureMask & SI_TX_EDID_VIDEO_CFG_DC_OVRD));
    334              pEdidTx->isSpdifOnly          = (0 != (audioFeatureMask & SI_TX_EDID_AUDIO_CFG_SPDIF_INPUT));
    335          
    336              return( true );
    337          }
    338          
    339          
    340          //-------------------------------------------------------------------------------------------------
    341          //! @brief      Returns a status flag word containing EdidTx-specific
    342          //!             information about the state of the device.
    343          //! @return     Sixteen-bit status flags word for the EdidTx Component
    344          //-------------------------------------------------------------------------------------------------
    345          
    346          uint16_t SiiEdidTxStatusGet ( void )
    347          {
    348          
    349              return( pEdidTx->statusFlags );
    350          }
    351          
    352          
    353          //-------------------------------------------------------------------------------------------------
    354          //! @brief      Places the EdidTx component into standby mode if available
    355          //!
    356          //!             This is a dummy call. EDID component doesn't control any hardware
    357          //!             directly.
    358          //!
    359          //! @return     Success flag.
    360          //-------------------------------------------------------------------------------------------------
    361          
    362          bool_t SiiEdidTxStandby ( void )
    363          {
    364          
    365              return( true );
    366          }
    367          
    368          
    369          //-------------------------------------------------------------------------------------------------
    370          //! @brief      Causes operation of the EdidTx component to return to the state
    371          //!             it was prior to the previous call to SiiEdidTxStandby.
    372          //!             Dummy call.
    373          //-------------------------------------------------------------------------------------------------
    374          
    375          bool_t SiiEdidTxResume ( void )
    376          {
    377          
    378              return( true );
    379          }
    380          
    381          
    382          //-------------------------------------------------------------------------------------------------
    383          //! @brief      Returns the result of the last SiiEdidTxxxx function called.
    384          //!
    385          //-------------------------------------------------------------------------------------------------
    386          
    387          txEdidErrCode_t SiiEdidTxGetLastResult ( void )
    388          {
    389          
    390              return( pEdidTx->lastResultCode );
    391          }
    392          
    393          
    394          //-------------------------------------------------------------------------------------------------
    395          //! @brief      EDID Tx component initialization.
    396          //!
    397          //! @return     Success flag.
    398          //-------------------------------------------------------------------------------------------------
    399          
    400          bool_t SiiEdidTxInitialize ( void )
    401          {
    402              memset(pEdidTx, 0, sizeof(EdidTxInstanceData_t));
    403          
    404              // By default one-TX configuration is set
    405              pEdidTx->numOfTx = 1;
    406              pEdidTx->pEdidDecodData = &edidDecodData[0];
    407              memset(pEdidTx->pEdidDecodData, 0, sizeof(EdidTxDecodData_t));
    408              pEdidTx->pEdidDecodData->isActive = false;
    409          
    410              // Credentials of this device
    411              pEdidTx->edidConfig.mfgId = EDID__MANUFACTURER_ID; // Two byte manufacturer ID
    412              pEdidTx->edidConfig.productId = EDID__PRODUCT_ID; // Two byte product ID
    413              pEdidTx->edidConfig.serialNumber = 0; // Four byte serial number (may be last 4 digits)
    414              pEdidTx->edidConfig.mfgWeek = SET_MANUFACTURER_WEEK; // week manufactured
    415              pEdidTx->edidConfig.mfgYear = SET_MANUFACTURER_YEAR; // year manufactured
    416          
    417              // Default limits of this device
    418              pEdidTx->edidConfig.maxHorizKhz = DEFAULT__MAX_H_KHZ, // Max Horiz. Freq
    419              pEdidTx->edidConfig.minHorizKhz = DEFAULT__MIN_H_KHZ, // Min Horiz. Freq
    420              pEdidTx->edidConfig.maxVertHz = DEFAULT__MAX_V_HZ, // Max Vertical Freq
    421              pEdidTx->edidConfig.minVertHz = DEFAULT__MIN_V_HZ, // Min Vertical Freq
    422              pEdidTx->edidConfig.maxPixClock10Mhz = DEFAULT__MAX_PIX_CLK_10MHZ; // Pixel Clock in 10MHz
    423              pEdidTx->edidConfig.maxTmdsClock5Mhz = DEFAULT__MAX_TMDS_CLK_5MHZ; // maxTmdsClock in 5Mhz units
    424          
    425              return (true);
    426          }
    427          
    428          //-------------------------------------------------------------------------------------------------
    429          //! @brief      Initialize the EDID decode info structure
    430          //!
    431          //!             Call before starting SiiEdidTxProcessEdid().
    432          //!
    433          //-------------------------------------------------------------------------------------------------
    434          
    435          static void EdidTxInitProcessing ( void )
    436          {
    437              memset( &pEdidTx->pEdidDecodData->edidInfo, 0, sizeof( decodedEdid_t ));
    438              pEdidTx->pEdidDecodData->SVD_idx    = 0;
    439              pEdidTx->pEdidDecodData->nmbOfDecodedExtBlocks = 0;
    440          }
    441          
    442          
    443          //-------------------------------------------------------------------------------------------------
    444          //! @brief      Creates new EDID data for upstream based on all active TX EDIDs.
    445          //!             Call upon TX connection or disconnection.
    446          //-------------------------------------------------------------------------------------------------
    447          
    448          static void EdidTxCreateUsEdid(void)
    449          {
    450              uint8_t i;
    451              bool_t  isFirstActiveTx = true;
    452              EdidTxDecodData_t *pEdidDecodData;
    453          
    454              DEBUG_PRINT(EDID_TX_MSG_DBG_PLAIN, "DS EDIDs Attached: %d\n", pEdidTx->numOfActiveTx);
    455          
    456              // If more than one parsed EDID input exists, merge them into a "greatest common denominator" data
    457              // in order to leave only those capability declarations that are supported by all
    458              // active transmitters
    459              for (i = 0; i < pEdidTx->numOfTx; i++)
    460              {
    461                  pEdidDecodData = &edidDecodData[i];
    462                  if (pEdidDecodData->isActive)
    463                  {
    464                      if (!isFirstActiveTx)
    465                      {
    466                          // Apply the Feature Meet Filter (FMF)
    467                          EdidTxFeatureMeetFilter(&(pEdidDecodData->edidInfo));
    468                      }
    469                      else
    470                      {
    471                          // Copy first active edidInfo into output edidInfo
    472                          memcpy(&pEdidTx->edidInfo, &(pEdidDecodData->edidInfo), sizeof(decodedEdid_t));
    473                          // Make sure other active TXs added through the FMF
    474                          isFirstActiveTx = false;
    475                      }
    476                  }
    477              }
    478          
    479              EdidTxConvert();
    480              PrintErrors( pEdidTx->edidInfo.ErrorCode );
    481          
    482              EdidTxCompose();
    483              PrintErrors( pEdidTx->edidInfo.ErrorCode );
    484          }
    485          
    486          #if (MHL_20 == ENABLE)
    487          
    488          extern  uint8_t g3DEdidTableVIC [ EDID_3D_VIC_TABLE_LEN ];
    489          extern  uint8_t g3DEdidTableDTD [ EDID_3D_DTD_TABLE_LEN ];
    490          
    491          void CreateMHL3DData(bool_t isDismissEDID)
    492          {
    493          	uint8_t tot;
    494          	uint8_t i, j;
    495          	uint8_t mhl_3d_all;
    496          	uint8_t unsupported_vic[2] = {16, 31};
    497          	uint16_t hdmi_3d_structure_all = pEdidTx->edidInfo.HDMI_VSDB.hdmi_3d_structure_all;
    498          
    499          	memset( pMHL3D_VIC, 0, sizeof( MHL3DSupportData_t ));
    500          	memset( pMHL3D_DTD, 0, sizeof( MHL3DSupportData_t ));
    501          
    502          	//DEBUG_PRINT(MSG_ALWAYS, "\n\nCreateMHL3DData:: \n\n");
    503          
    504          	// DTD
    505          	// Nothing to do at EDID process
    506          
    507              if(isDismissEDID)
    508              {
    509                  uint8_t *pg3DEdidTableVIC;
    510                  uint8_t *pg3DEdidTableDTD;
    511                  uint16_t idx = 0;
    512          
    513                  pg3DEdidTableVIC = g3DEdidTableVIC;
    514                  pMHL3D_VIC->tot = pg3DEdidTableVIC[3];
    515          
    516                  for (i=0; i<5; i++)
    517                  {
    518                      pg3DEdidTableVIC += 5;  // move to number of 2 byte entries in a WRITE_BURST
    519                      tot = *pg3DEdidTableVIC++; // Read number of 2 byte entries in this WRITE_BURST
    520                      for (j=0; j<tot; j++)
    521                      {
    522                          pMHL3D_VIC->vdi[idx].vdi_h = *pg3DEdidTableVIC++;
    523                          pMHL3D_VIC->vdi[idx++].vdi_l = *pg3DEdidTableVIC++;
    524                      }
    525                  }
    526          
    527                  pg3DEdidTableDTD = g3DEdidTableDTD;
    528                  pMHL3D_DTD->tot = pg3DEdidTableDTD[3];
    529          
    530                  for (i=0; i<2; i++)
    531                  {
    532                      *pg3DEdidTableDTD += 5;  // move to number of 2 byte entries in a WRITE_BURST
    533                      tot = *pg3DEdidTableDTD++; // Read number of 2 byte entries in this WRITE_BURST
    534                      for (j=0; j<tot; j++)
    535                      {
    536                          pMHL3D_DTD->vdi[idx].vdi_h = *pg3DEdidTableDTD++;
    537                          pMHL3D_DTD->vdi[idx++].vdi_l = *pg3DEdidTableDTD++;
    538                      }
    539                  }
    540          
    541                  return;
    542              }
    543          
    544          	// VIC
    545          	pMHL3D_VIC->tot = pEdidTx->edidInfo.numOfVic;
    546          	tot = pMHL3D_VIC->tot;
    547          	DEBUG_PRINT(MSG_ALWAYS, "pMHL3D_VIC->tot: %d %x\n", pMHL3D_VIC->tot ,hdmi_3d_structure_all);
    548          
    549          	// Add 3D structure and Masked mode
    550          	if (hdmi_3d_structure_all)
    551          	{
    552                  mhl_3d_all = (hdmi_3d_structure_all&BIT8)>>6 |(hdmi_3d_structure_all&BIT6)>>5 | (hdmi_3d_structure_all&BIT0);
    553                  //mhl_3d_all = (hdmi_3d_structure_all&BIT8)>>6 |(hdmi_3d_structure_all&BIT6)>>5;  // Frame Sequential is not supported
    554          
    555          		if (pEdidTx->edidInfo.HDMI_VSDB.mask_3d_support){
    556          			for (i=0; i<tot; i++){
    557          				if (pEdidTx->edidInfo.SDTD[i].Valid){
    558          					if (pEdidTx->edidInfo.SDTD[i].masked_3d){
    559          						pMHL3D_VIC->vdi[i].vdi_l= mhl_3d_all;
    560          					}
    561          					else	{
    562          						pMHL3D_VIC->vdi[i].vdi_l= 0;
    563          					}
    564          				}
    565          			}
    566          		}
    567          		else{
    568          			for (i=0; i<tot; i++)
    569          				pMHL3D_VIC->vdi[i].vdi_l= mhl_3d_all;
    570          		}
    571          	}
    572          
    573          	// Add individual 3D mode
    574          	for (i=0; i<tot; i++)
    575          	{
    576          		uint8_t indivLength = pEdidTx->edidInfo.SDTD[i].indiv3dModeLength;
    577          
    578          		if (pEdidTx->edidInfo.SDTD[i].Valid && (indivLength != 0))
    579          		{
    580          			uint8_t j;
    581          			Indiv3dMode_t *pIndiv3d = pEdidTx->edidInfo.SDTD[i].indiv3dModes;
    582          			for (j=0; j<indivLength; j++){
    583          				if (!pIndiv3d[j].struct_3d_present) continue;
    584          				switch (pIndiv3d[j].struct_3d)
    585          				{
    586          					case 0:  // Frame packing
    587          						pMHL3D_VIC->vdi[i].vdi_l |= BIT_FS_SUPP;  // Frame Sequential is not supported
    588          						break;
    589          					case 6:  // Top-and-Bottom
    590          						pMHL3D_VIC->vdi[i].vdi_l |= BIT_TB_SUPP;
    591          						break;
    592          					case 8:  // Side-by-Side(half)
    593          						pMHL3D_VIC->vdi[i].vdi_l |= BIT_LR_SUPP;
    594          						break;
    595          				}
    596          			}
    597          		}
    598          	}
    599          
    600          	// Remove a bit of unsupported format
    601          	for (i=0; i<tot; i++)
    602          	{
    603          		for (j=0; j<sizeof(unsupported_vic); j++)
    604          			if (pEdidTx->edidInfo.SDTD[i].Vic == unsupported_vic[j]) 
    605          				pMHL3D_VIC->vdi[i].vdi_l = 0;
    606          	}
    607          }
    608          #endif
    609          
    610          
    611          //-------------------------------------------------------------------------------------------------
    612          //! @brief      Decode, analyze, convert input EDID, and compose a new EDID.
    613          //!
    614          //!             This function shall be called upon downstream HPD event.
    615          //!
    616          //! @param[in]  input - EDID TX input accepting the EDID data from TX. Should be different
    617          //!                     for different TX instances in multi-input model.
    618          //-------------------------------------------------------------------------------------------------
    619          
    620          void SiiEdidTxProcessEdid ( uint8_t input )
    621          {
    622              if (SiiEdidTxInputSet(input))
    623              {
    624                  if (!pEdidTx->pEdidDecodData->isActive)
    625                  {
    626                      pEdidTx->numOfActiveTx++;
    627                      // Activate instance when EDID processing is requested
    628                      memset(pEdidTx->pEdidDecodData, 0, sizeof(EdidTxDecodData_t));
    629                      pEdidTx->pEdidDecodData->isActive = true;
    630                  }
    631          
    632                  EdidTxInitProcessing();
    633                  EdidTxDecodeEdid();
    634                  SiiDrvTpiDdcErrorsPrint();
    635                  EdidFixDecodedEdid();
    636          
    637                  EdidTxAnalyze();
    638                  PrintErrors(pEdidTx->pEdidDecodData->edidInfo.ErrorCode);
    639          
    640                  // Print a list of supported features
    641                  PrintFeatures();
    642          
    643                  // Make US EDID based on already parsed data, if any, and the newly attached DS EDID
    644                  EdidTxCreateUsEdid();
    645          
    646          #if (MHL_20 == ENABLE)
    647                  CreateMHL3DData(false);    // BUGID 30677 - Melbourne protocol-systems testing is failing
    648          #endif
    649              }
    650          }
    651          
    652          
    653          //-------------------------------------------------------------------------------------------------
    654          //! @brief      Remove one of the input EDIDs and re-compose US EDID.
    655          //!
    656          //!             This function shall be called upon downstream disconnection event.
    657          //!
    658          //! @param[in]  input - EDID TX input accepting the EDID data from TX. Should be different
    659          //!                     for different TX instances in multi-input model.
    660          //-------------------------------------------------------------------------------------------------
    661          
    662          void SiiEdidTxDismissEdid( uint8_t input )
    663          {
    664              if (SiiEdidTxInputSet(input))
    665              {
    666                  pEdidTx->lastResultCode = SI_TX_EDID_ERROR_CODE_NO_US_EDID_CREATED;
    667          
    668          #if ( MHL_20 == ENABLE ) /*Smith modifies*/
    669                  CreateMHL3DData(true);
    670          #endif         
    671          
    672                  if (pEdidTx->pEdidDecodData->isActive)
    673                  {
    674          ////            if (pEdidTx->numOfActiveTx > 0)// for melbourne we have only one TX.
    675          ////            {
    676          //                pEdidTx->numOfActiveTx--;
    677          //            //}
    678                      // Deactivate instance when TX is disconnected
    679                      pEdidTx->pEdidDecodData->isActive = false;
    680          
    681          
    682                      // Re-make US EDID based on already parsed data if at least one active DS EDID is left
    683          //            if (pEdidTx->numOfActiveTx > 0)
    684          //            {
    685          //                EdidTxCreateUsEdid();
    686          //                pEdidTx->lastResultCode = SI_TX_EDID_ERROR_CODE_NO_ERROR;
    687          //                return;
    688          //            }
    689                  }
    690          
    691              }
    692          }
    693          
    694          
    695          //-------------------------------------------------------------------------------------------------
    696          //! @brief      Return CEC physical address of downstream device.
    697          //!
    698          //-------------------------------------------------------------------------------------------------
    699          
    700          uint16_t SiiEdidTxCecPhysAddrGet(void)
    701          {
    702          
    703              return  ((((uint16_t) pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.a) << 12) |
    704                       (((uint16_t) pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.b) << 8)  |
    705                       (((uint16_t) pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.c) << 4)  |
    706                       ((uint16_t)  pEdidTx->pEdidDecodData->edidInfo.HDMI_VSDB.cec.d));
    707          
    708          }
    709          
    710          
    711          //-------------------------------------------------------------------------------------------------
    712          //! @brief      Read the specified single block from the specified EDID source.
    713          //!
    714          //! @param[in]  blockIndex - zero based EDID block number,
    715          //! @param[in]  pEdidBlock - pointer to a buffer for the EDID block data
    716          //!
    717          //! @return     Success flag.
    718          //-------------------------------------------------------------------------------------------------
    719          
    720          bool_t EdidTxReadBlock ( int blockIndex, uint8_t *pEdidBlock )
    721          {
    722              bool_t success = false;
    723          
    724              // NOTE: correct TX instance must be selected for the read to happen from the right DDC bus
    725              success = (SI_TX_DDC_ERROR_CODE_NO_ERROR == SiiDrvTpiDdcReadBlock( blockIndex / 2,
    726                                                                  (blockIndex & 1) ? 128 : 0,
    727                                                                  pEdidBlock, EDID_BLOCK_SIZE ));
    728          
    729              if ( success )
    730              {
    731                  // Verify checksum
    732                  if ( !EdidTxCheckBlockCheckSum( pEdidBlock ))
    733                  {
    734                      pEdidTx->pEdidDecodData->edidInfo.ErrorCode |= EDID_ERROR__CHECK_SUM_MISMATCH;
    735                  }
    736              }
    737          
    738              return( success );
    739          }
    740          
    741          
    742          //-------------------------------------------------------------------------------------------------
    743          //! @brief      Write an EDID block prepared by the EDID Composer to Rx EDID memory that
    744          //!             is exposed to the upstream.
    745          //!
    746          //!             IMPORTANT: This function requires pEdidBlock to point to 128 byte array (1 EDID block).
    747          //!             Some bytes of this array are going to be modified (CEC PA and Check Sum).
    748          //!
    749          //! @param[in]  blockNumber - zero based EDID block number,
    750          //! @param[in]  pEdidBlock  - pointer to a 128-byte size buffer of EDID block,
    751          //!
    752          //! @return     success flag.
    753          //-------------------------------------------------------------------------------------------------
    754          
    755          bool_t EdidTxWriteBlockToRx(int blockNumber, uint8_t *pEdidBlock, uint8_t cecPhysAddrLocation)
    756          {
    757              bool_t status = SiiTxEdidCbBlockWrite(blockNumber, pEdidBlock, cecPhysAddrLocation);
    758          
    759              return( status );
    760          }
    761          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  EdidTxReadBlock
             16 -> EdidTxCheckBlockCheckSum
             16 -> SiiDrvTpiDdcReadBlock
        0  EdidTxWriteBlockToRx
              0 -> SiiTxEdidCbBlockWrite
        0  SiiEdidTxCecPhysAddrGet
       16  SiiEdidTxConfigure
        8  SiiEdidTxDismissEdid
              8 -> SiiEdidTxInputSet
        0  SiiEdidTxGetLastResult
        8  SiiEdidTxInitialize
              8 -> __aeabi_memclr4
        8  SiiEdidTxInputSet
        0  SiiEdidTxInstanceGet
        0  SiiEdidTxInstanceSet
       16  SiiEdidTxProcessEdid
             16 -> EdidTxAnalyze
              0 -> EdidTxCompose
             16 -> EdidTxConvert
             16 -> EdidTxDecodeEdid
             16 -> EdidTxFeatureMeetFilter
             16 -> SiiDrvTpiDdcErrorsPrint
             16 -> SiiEdidTxDoesDsSupport
             16 -> SiiEdidTxDsDeviceRemedyMaskGet
             16 -> SiiEdidTxInputSet
             16 -> __aeabi_memclr4
             16 -> __aeabi_memcpy4
        0  SiiEdidTxResume
        0  SiiEdidTxStandby
        0  SiiEdidTxStatusGet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
      60  EdidTxReadBlock
       4  EdidTxWriteBlockToRx
      36  SiiEdidTxCecPhysAddrGet
     266  SiiEdidTxConfigure
      28  SiiEdidTxDismissEdid
       8  SiiEdidTxGetLastResult
     112  SiiEdidTxInitialize
      44  SiiEdidTxInputSet
      24  SiiEdidTxInstanceGet
       2  SiiEdidTxInstanceSet
     382  SiiEdidTxProcessEdid
       4  SiiEdidTxResume
       4  SiiEdidTxStandby
       8  SiiEdidTxStatusGet
    2036  pEdidTx
          edidDecodData
          edidTxInstance

 
 2 036 bytes in section .data
   986 bytes in section .text
 
   986 bytes of CODE memory
 2 036 bytes of DATA memory

Errors: none
Warnings: 1

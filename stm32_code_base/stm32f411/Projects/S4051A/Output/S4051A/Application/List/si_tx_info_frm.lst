###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:24:30 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\tx\si_tx_info #
#                    _frm.c                                                   #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\tx\si_tx_info #
#                    _frm.c -D S4051A -D DEBUG -D FREE_RTOS -D                #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D __ARM_CORTEX_MX__ -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -lcN                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\ #
#                    DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applica #
#                    tion\Obj\ --debug --endian=little --cpu=Cortex-M4 -e     #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\si_tx_info_frm.lst                                    #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\si_tx_info_frm.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\component\tx\si_tx_info_frm.c
      1          //************************************************************************************************
      2          //! @file   si_tx_info_frm.c
      3          //! @brief  Info frame and HDMI packet control
      4          //
      5          // No part of this work may be reproduced, modified, distributed,
      6          // transmitted, transcribed, or translated into any language or computer
      7          // format, in any form or by any means without written permission of
      8          // Silicon Image, Inc., 1060 East Arques Avenue, Sunnyvale, California 94085
      9          //
     10          // Copyright 2002-2010, Silicon Image, Inc.  All rights reserved.
     11          //************************************************************************************************/
     12          
     13          
     14          #include "si_tx_component_internal.h"
     15          #include "si_tx_info_frm.h"
     16          #include "si_drv_tpi_system.h"
     17          #include "si_tx_audio.h"
     18          #include "si_edid_tx_internal.h"
     19          
     20          
     21          //-------------------------------------------------------------------------------------------------
     22          // Module Instance Data
     23          //-------------------------------------------------------------------------------------------------
     24          
     25          txInfoRecord_t InfoInstRec[SII_NUM_TX];
     26          txInfoRecord_t *pInfoFrm = &InfoInstRec[0];
     27          
     28          //-------------------------------------------------------------------------------------------------
     29          //  Local service functions
     30          //-------------------------------------------------------------------------------------------------
     31          
     32          //-------------------------------------------------------------------------------------------------
     33          //! @brief      Check if an InfoFrame has been loaded into chip.
     34          //!
     35          //! @param[in]  ifType - Info Frame type.
     36          //-------------------------------------------------------------------------------------------------
     37          
     38          static bool_t IsInfoFrameLoaded(infoFrameType_t ifType)
     39          {
     40              switch (ifType)
     41              {
     42                  case SI_INFO_FRAME_AVI:
     43                      return pInfoFrm->isLoadedAvi;
     44                  case SI_INFO_FRAME_AUDIO:
     45                      return pInfoFrm->isLoadedAudio;
     46                  case SI_INFO_FRAME_SPD:
     47                      return pInfoFrm->isLoadedSpd;
     48                  case SI_INFO_FRAME_MPEG:
     49                      return pInfoFrm->isLoadedMpeg;
     50                  case SI_INFO_FRAME_ISRC1:
     51                      return pInfoFrm->isLoadedIsrc1;
     52                  case SI_INFO_FRAME_ISRC2:
     53                      return pInfoFrm->isLoadedIsrc2;
     54                  case SI_INFO_FRAME_ACP:
     55                      return pInfoFrm->isLoadedAcp;
     56                  case SI_INFO_FRAME_GBD:
     57                      return pInfoFrm->isLoadedGbd;
     58                  case SI_INFO_FRAME_VSIF:
     59                      return pInfoFrm->isLoadedVsif;
     60              }
     61          
     62              return false;
     63          }
     64          
     65          
     66          //-------------------------------------------------------------------------------------------------
     67          //! @brief      Set the InfoFrame loaded flag.
     68          //!
     69          //! @param[in]  ifType - Info Frame type.
     70          //-------------------------------------------------------------------------------------------------
     71          
     72          static void InfoFrameLoadedFlagSet(infoFrameType_t ifType, bool_t isLoaded)
     73          {
     74              switch (ifType)
     75              {
     76                  case SI_INFO_FRAME_AVI:
     77                      pInfoFrm->isLoadedAvi = isLoaded;
     78                      break;
     79                  case SI_INFO_FRAME_AUDIO:
     80                      pInfoFrm->isLoadedAudio = isLoaded;
     81                      break;
     82                  case SI_INFO_FRAME_SPD:
     83                      pInfoFrm->isLoadedSpd = isLoaded;
     84                      break;
     85                  case SI_INFO_FRAME_MPEG:
     86                      pInfoFrm->isLoadedMpeg = isLoaded;
     87                      break;
     88                  case SI_INFO_FRAME_ISRC1:
     89                      pInfoFrm->isLoadedIsrc1 = isLoaded;
     90                      break;
     91                  case SI_INFO_FRAME_ISRC2:
     92                      pInfoFrm->isLoadedIsrc2 = isLoaded;
     93                      break;
     94                  case SI_INFO_FRAME_ACP:
     95                      pInfoFrm->isLoadedAcp = isLoaded;
     96                      break;
     97                  case SI_INFO_FRAME_GBD:
     98                      pInfoFrm->isLoadedGbd = isLoaded;
     99                      break;
    100                  case SI_INFO_FRAME_VSIF:
    101                      pInfoFrm->isLoadedVsif = isLoaded;
    102                      break;
    103              }
    104          }
    105          
    106          
    107          //-------------------------------------------------------------------------------------------------
    108          //! @brief      Identify Info Frames that require checksum to be sent as a part of a packet.
    109          //!
    110          //! @param[in]  ifType - Info Frame type.
    111          //!
    112          //! @return     indication of whether or not the checksum is required.
    113          //-------------------------------------------------------------------------------------------------
    114          
    115          static bool_t IsChecksumRequired(infoFrameType_t ifType)
    116          {
    117              bool_t hasChecksum;
    118          
    119              switch (ifType)
    120              {
    121                  case SI_INFO_FRAME_AVI:
    122                  case SI_INFO_FRAME_SPD:
    123                  case SI_INFO_FRAME_AUDIO:
    124                  case SI_INFO_FRAME_VSIF:
    125                      hasChecksum = true;
    126                      break;
    127                  default:
    128                      hasChecksum = false;
    129              }
    130              return hasChecksum;
    131          }
    132          
    133          
    134          //-------------------------------------------------------------------------------------------------
    135          //! @brief      Calculate checksum of a packet fields.
    136          //!
    137          //! @param[in]  pFrame  - pointer to an InfoFrame packet.
    138          //! @param[in]  version - InfoFrame version as per HDMI specification.
    139          //! @param[in]  length  - number of bytes in the InfoFrame body (excluding header).
    140          //!
    141          //! @return     checksum byte.
    142          //-------------------------------------------------------------------------------------------------
    143          
    144          static uint8_t CalculateChecksum(uint8_t *pFrame, uint8_t version, uint8_t length)
    145          {
    146              uint8_t i;
    147              uint8_t checksum = pFrame[IF_TITLE_INDEX] + version + length;
    148          
    149              for (i = 0; i < length; i++)
    150              {
    151                  checksum += pFrame[IF_HEADER_LENGTH + i];
    152              }
    153          
    154              return (0 - checksum);
    155          }
    156          
    157          
    158          //-------------------------------------------------------------------------------------------------
    159          //! @brief      Return true, if audio is being transmitted to a device ensuring
    160          //!             audio content protection.
    161          //-------------------------------------------------------------------------------------------------
    162          
    163          static bool_t IsProtectedAudioTransmitting(void)
    164          {
    165              return (SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_AI) && TxAudioIsTransmitting());
    166          }
    167          
    168          
    169          //-------------------------------------------------------------------------------------------------
    170          //! @brief      Create SPD InfoFrame locally based on the data from NVRAM.
    171          //-------------------------------------------------------------------------------------------------
    172          
    173          static void ComposeDefaultSpdInfoFrame(uint8_t *pFrame)
    174          {
    175              pFrame[IF_TITLE_INDEX] = SI_INFO_FRAME_SPD;
    176              pFrame[IF_VERSION_INDEX] = 1;
    177              pFrame[IF_LENGTH_INDEX] = IF_MIN_SPD_LENGTH;
    178              pFrame[IF_CHECKSUM_INDEX] = 0; // to be replaced later
    179          
    180              // TODO:OEM - Fill up vendor specific source product description info frame
    181              //pFrame[IF_DATA_INDEX] = 0;
    182              //pFrame[IF_DATA_INDEX + 1] = 0;
    183              // ...
    184          
    185              DEBUG_PRINT(TX_MSG_DBG, "TxInfo: SPD Created\n");
    186          }
    187          
    188          
    189          //-------------------------------------------------------------------------------------------------
    190          //  TX Info Frame manipulation functions
    191          //-------------------------------------------------------------------------------------------------
    192          
    193          //-------------------------------------------------------------------------------------------------
    194          //! @brief      Select Tx device instance in multi-transmitter system.
    195          //!
    196          //! @param[in]  deviceIndex - zero based index of an instance.
    197          //-------------------------------------------------------------------------------------------------
    198          
    199          #if SII_NUM_TX > 1
    200          void TxInfoInstanceSet(uint8_t deviceIndex)
    201          {
    202              if(deviceIndex < SII_NUM_TX)
    203              {
    204                  pInfoFrm = &InfoInstRec[deviceIndex];
    205              }
    206          }
    207          #endif // SII_NUM_TX > 1
    208          
    209          
    210          //-------------------------------------------------------------------------------------------------
    211          //! @brief      Initialization of Info Frame module.
    212          //-------------------------------------------------------------------------------------------------
    213          
    214          void TxInfoInit(void)
    215          {
    216              memset(pInfoFrm, 0, sizeof(txInfoRecord_t));
    217              // Make sure all info packets aren't being sent
    218              TxInfoAllPacketsStop();
    219          }
    220          
    221          
    222          //-------------------------------------------------------------------------------------------------
    223          //! @brief      Enable/Disable transmission of Info frames that must be already loaded to the chip.
    224          //!
    225          //! @param[in]  ifType    - InfoFrame type,
    226          //! @param[in]  isEnabled - true, if the InfoFrame has to be enabled,
    227          //!                         false, otherwise.
    228          //-------------------------------------------------------------------------------------------------
    229          
    230          void TxInfoPacketTransmissionEnable(infoFrameType_t ifType, bool_t isEnabled)
    231          {
    232              // Enabling requires that frame has been loaded,
    233              // disabling does not.
    234              if (!isEnabled || IsInfoFrameLoaded(ifType))
    235              {
    236                  SiiDrvTpiInfoFrameEnable(isEnabled, false, ifType);
    237              }
    238          }
    239          
    240          
    241          //-------------------------------------------------------------------------------------------------
    242          //! @brief      Terminate sending all InfoFrames/Packets.
    243          //-------------------------------------------------------------------------------------------------
    244          
    245          void TxInfoAllPacketsStop(void)
    246          {
    247              SiiDrvTpiInfoFrameEnable(false, true, 0); // disable all
    248          }
    249          
    250          
    251          //-------------------------------------------------------------------------------------------------
    252          //! @brief      Load InfoFrame/Packet data.The frame transmission state remains intact
    253          //!             (enabled or disabled).
    254          //!
    255          //!             Exception is the AVI InfoFrame that is enabled all the time.
    256          //!             For Info Frame types, pFrame should be a pointer to
    257          //!             a structure starting with 4 byte header.
    258          //!
    259          //! @param[in]  ifType - InfoFrame type,
    260          //! @param[in]  pFrame - pointer to the InfoFrame data.
    261          //!
    262          //! @retval     true   - loaded successfully,
    263          //! @retval     false  - failed to load the frame.
    264          //-------------------------------------------------------------------------------------------------
    265          
    266          bool_t TxInfoPacketSet(infoFrameType_t ifType, uint8_t *pFrame)
    267          {
    268              bool_t  isSuccess = true;
    269              uint8_t checksum;
    270              uint8_t frameLength;
    271              uint8_t aSpdFrameBuf[IF_HEADER_LENGTH + IF_MIN_SPD_LENGTH];
    272          
    273              // Only re-enable locked IFs and quit
    274              if (TxIsInfoFrameLocked(ifType))
    275              {
    276                  SiiDrvTpiInfoFrameEnable(true, false, ifType);
    277                  return true;
    278              }
    279          
    280              // Check pointer validity and try to create default IF,
    281              // when the pointer is NULL, if possible
    282              if (!pFrame)
    283              {
    284                  if (ifType == SI_INFO_FRAME_SPD)
    285                  {
    286                      // (pFrame == NULL) means a request of using default SPD packet
    287                      ComposeDefaultSpdInfoFrame(aSpdFrameBuf);
    288                      pFrame = aSpdFrameBuf;
    289                  }
    290                  else
    291                  {
    292                      return false; // failure to provide valid pointer
    293                  }
    294              }
    295          
    296              // Verify if downstream device supports the InfoFrame,
    297              // do specific actions for a particular type of InfoFrames
    298              switch (ifType)
    299              {
    300                  case SI_INFO_FRAME_AVI:
    301                      // AVI is a specially treated case
    302                      checksum = CalculateChecksum(pFrame, 2, IF_MIN_AVI_LENGTH);
    303                      SiiDrvTpiAviFrameStart(&pFrame[IF_DATA_INDEX], IF_MIN_AVI_LENGTH, checksum);
    304                      pInfoFrm->isLoadedAvi = true;
    305                      pFrame = NULL; // avoid further processing
    306                      isSuccess = true;
    307                      break;
    308          
    309                  case SI_INFO_FRAME_ACP:
    310                      if (!IsProtectedAudioTransmitting())
    311                      {
    312                          pFrame = NULL;
    313                          isSuccess = false;
    314                      }
    315                      break;
    316          
    317                  case SI_INFO_FRAME_GBD:
    318                      if (!SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_XVYCC_P0))
    319                      {
    320                          pFrame = NULL;
    321                          isSuccess = false;
    322                      }
    323                      break;
    324          
    325                  case SI_INFO_FRAME_VSIF:
    326                      if (!SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_3D))
    327                      {
    328                          pFrame = NULL;
    329                          isSuccess = false;
    330                      }
    331                      break;
    332          
    333                  case SI_INFO_FRAME_ISRC1:
    334                  case SI_INFO_FRAME_ISRC2:
    335                      if (!IsProtectedAudioTransmitting())
    336                      {
    337                          // Disable transmission as ISRC frames shall be stopped
    338                          // if Audio protection is not supported by DS device
    339                          SiiDrvTpiInfoFrameEnable(false, false, ifType);
    340                      }
    341                      break;
    342                  default:
    343                      break;
    344              }
    345          
    346              // Load InfoFrame to the chip
    347              if (pFrame)
    348              {
    349                  if (IsChecksumRequired(ifType))
    350                  {
    351                      // checksum field is present in the packet
    352                      frameLength = pFrame[IF_LENGTH_INDEX];
    353                      checksum = CalculateChecksum(pFrame, pFrame[IF_VERSION_INDEX], frameLength);
    354                      pFrame[IF_CHECKSUM_INDEX] = checksum;
    355                      SiiDrvTpiInfoFrameLoad(ifType, pFrame, frameLength, true);
    356                  }
    357                  else
    358                  {
    359                      // If checksum is not used, assume that provided frame has
    360                      // complete set of bytes (including stuffing bytes) up to the maximum size
    361                      frameLength = IF_MAX_LENGTH;
    362                      SiiDrvTpiInfoFrameLoad(ifType, pFrame, frameLength, false);
    363                  }
    364          
    365                  InfoFrameLoadedFlagSet(ifType, true); // Mark this InfoFrame as loaded
    366              }
    367          
    368              return isSuccess;
    369          }
    370          
    371          
    372          //-------------------------------------------------------------------------------------------------
    373          //! @brief      Mute AV content display on sink device.
    374          //!
    375          //! @param[in]  isMuted - true, if AV shall be muted.
    376          //-------------------------------------------------------------------------------------------------
    377          
    378          void TxInfoAvMute(bool_t isMuted)
    379          {
    380          	SiiDrvTpiAvMuteSourceSet( true );
    381              SiiDrvTpiAvMuteSendingEnable(isMuted);
    382              pInfoFrm->isAvMuted = isMuted;
    383              //DEBUG_PRINT(TX_MSG_DBG, "AV %s\n", isMuted ? "MUTED" : "UNMUTED");
    384          }
    385          
    386          
    387          //-------------------------------------------------------------------------------------------------
    388          //! @brief      Update all loaded InfoFrames as they could have been filled
    389          //!             while the chip was in power down.
    390          //!
    391          //!             AVI packet is not updated by this function;
    392          //!             AVI update occurs in TxAviInfoFrameUpdate().
    393          //!             Updating of the audio buffer is not needed as it is done
    394          //!             in TxAudioOnHdmiModeChange().
    395          //-------------------------------------------------------------------------------------------------
    396          
    397          void TxAllInfoFramesUpdate(void)
    398          {
    399              uint8_t i = 0;
    400              uint8_t framesToUpdate[] =
    401              {
    402                      SI_INFO_FRAME_AVI,
    403                      SI_INFO_FRAME_SPD,
    404                      SI_INFO_FRAME_AUDIO,
    405                      SI_INFO_FRAME_MPEG,
    406                      SI_INFO_FRAME_ISRC1,
    407                      SI_INFO_FRAME_ISRC2,
    408                      SI_INFO_FRAME_ACP,
    409                      SI_INFO_FRAME_GBD,
    410                      SI_INFO_FRAME_VSIF,
    411                      0                       // marker of list end
    412              };
    413          
    414              while (framesToUpdate[i])
    415              {
    416                  if (IsInfoFrameLoaded(framesToUpdate[i])) // skip unloaded frames
    417                  {
    418                      SiiDrvTpiInfoFrameEnable(true, false, framesToUpdate[i]);
    419                  }
    420                  i++;
    421              }
    422          }
    423          
    424          //-------------------------------------------------------------------------------------------------
    425          //! @brief      Update AVI info frame in the chip to apply any changes made in AVI structure.
    426          //-------------------------------------------------------------------------------------------------
    427          
    428          void TxAviInfoFrameUpdate(void)
    429          {
    430              SiiDrvTpiAviFrameUpdate();
    431          }
    432          
    433          
    434          //-------------------------------------------------------------------------------------------------
    435          //! @brief      Check if an InfoFrame has been locked (no implicit modification allowed)
    436          //!
    437          //! @param[in]  ifType - Info Frame type.
    438          //-------------------------------------------------------------------------------------------------
    439          
    440          bool_t TxIsInfoFrameLocked(infoFrameType_t ifType)
    441          {
    442              switch (ifType)
    443              {
    444                  case SI_INFO_FRAME_AVI:
    445                      return pInfoFrm->isLockedAvi;
    446                  case SI_INFO_FRAME_AUDIO:
    447                      return pInfoFrm->isLockedAudio;
    448                  case SI_INFO_FRAME_SPD:
    449                      return pInfoFrm->isLockedSpd;
    450                  case SI_INFO_FRAME_MPEG:
    451                      return pInfoFrm->isLockedMpeg;
    452                  case SI_INFO_FRAME_ISRC1:
    453                      return pInfoFrm->isLockedIsrc1;
    454                  case SI_INFO_FRAME_ISRC2:
    455                      return pInfoFrm->isLockedIsrc2;
    456                  case SI_INFO_FRAME_ACP:
    457                      return pInfoFrm->isLockedAcp;
    458                  case SI_INFO_FRAME_GBD:
    459                      return pInfoFrm->isLockedGbd;
    460                  case SI_INFO_FRAME_VSIF:
    461                      return pInfoFrm->isLockedVsif;
    462              }
    463          
    464              return false;
    465          }
    466          
    467          
    468          //-------------------------------------------------------------------------------------------------
    469          //! @brief      Set the InfoFrame locking flag.
    470          //!
    471          //! @param[in]  ifType - Info Frame type.
    472          //-------------------------------------------------------------------------------------------------
    473          
    474          void TxInfoFrameLockSet(infoFrameType_t ifType, bool_t isLocked)
    475          {
    476              switch (ifType)
    477              {
    478                  case SI_INFO_FRAME_AVI:
    479                      pInfoFrm->isLockedAvi = isLocked;
    480                      break;
    481                  case SI_INFO_FRAME_AUDIO:
    482                      pInfoFrm->isLockedAudio = isLocked;
    483                      break;
    484                  case SI_INFO_FRAME_SPD:
    485                      pInfoFrm->isLockedSpd = isLocked;
    486                      break;
    487                  case SI_INFO_FRAME_MPEG:
    488                      pInfoFrm->isLockedMpeg = isLocked;
    489                      break;
    490                  case SI_INFO_FRAME_ISRC1:
    491                      pInfoFrm->isLockedIsrc1 = isLocked;
    492                      break;
    493                  case SI_INFO_FRAME_ISRC2:
    494                      pInfoFrm->isLockedIsrc2 = isLocked;
    495                      break;
    496                  case SI_INFO_FRAME_ACP:
    497                      pInfoFrm->isLockedAcp = isLocked;
    498                      break;
    499                  case SI_INFO_FRAME_GBD:
    500                      pInfoFrm->isLockedGbd = isLocked;
    501                      break;
    502                  case SI_INFO_FRAME_VSIF:
    503                      pInfoFrm->isLockedVsif = isLocked;
    504                      break;
    505              }
    506          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  CalculateChecksum
        0  IsInfoFrameLoaded
        8  IsProtectedAudioTransmitting
              8 -> SiiEdidTxDoesDsSupport
              8 -> TxAudioIsTransmitting
       24  TxAllInfoFramesUpdate
             24 -> IsInfoFrameLoaded
             24 -> SiiDrvTpiInfoFrameEnable
        0  TxAviInfoFrameUpdate
              0 -> SiiDrvTpiAviFrameUpdate
        0  TxInfoAllPacketsStop
              0 -> SiiDrvTpiInfoFrameEnable
        8  TxInfoAvMute
              8 -> SiiDrvTpiAvMuteSendingEnable
              8 -> SiiDrvTpiAvMuteSourceSet
        0  TxInfoFrameLockSet
        8  TxInfoInit
              0 -> TxInfoAllPacketsStop
              8 -> __aeabi_memclr
       56  TxInfoPacketSet
             56 -> CalculateChecksum
             56 -> IsProtectedAudioTransmitting
             56 -> SiiDrvTpiAviFrameStart
             56 -> SiiDrvTpiInfoFrameEnable
             56 -> SiiDrvTpiInfoFrameLoad
             56 -> SiiEdidTxDoesDsSupport
             56 -> TxIsInfoFrameLocked
       16  TxInfoPacketTransmissionEnable
             16 -> IsInfoFrameLoaded
              0 -> SiiDrvTpiInfoFrameEnable
        0  TxIsInfoFrameLocked


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {130, 131, 132, 133, 5, 6, 4, 10, 1
       4  ??DataTable6
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
       6  ?Subroutine3
       6  ?Subroutine4
       6  ?Subroutine5
       6  ?Subroutine6
      36  CalculateChecksum
       4  InfoInstRec
      86  IsInfoFrameLoaded
      20  IsProtectedAudioTransmitting
      48  TxAllInfoFramesUpdate
       4  TxAviInfoFrameUpdate
      10  TxInfoAllPacketsStop
      30  TxInfoAvMute
     118  TxInfoFrameLockSet
      18  TxInfoInit
     326  TxInfoPacketSet
      30  TxInfoPacketTransmissionEnable
      84  TxIsInfoFrameLocked
       4  pInfoFrm

 
   4 bytes in section .bss
   4 bytes in section .data
 868 bytes in section .text
 
 868 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: 4

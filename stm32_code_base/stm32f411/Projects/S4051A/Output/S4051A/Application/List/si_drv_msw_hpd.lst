###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:24:54 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\si #
#                    _drv_msw_hpd.c                                           #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\si #
#                    _drv_msw_hpd.c -D S4051A -D DEBUG -D FREE_RTOS -D        #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D __ARM_CORTEX_MX__ -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -lcN                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\ #
#                    DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applica #
#                    tion\Obj\ --debug --endian=little --cpu=Cortex-M4 -e     #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\si_drv_msw_hpd.lst                                    #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\si_drv_msw_hpd.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\si_drv_msw_hpd.c
      1          //**************************************************************************
      2          //!file     si_drv_hpd.c
      3          //!brief    SiI9535 HPD-Rx Driver functions.
      4          //
      5          // No part of this work may be reproduced, modified, distributed,
      6          // transmitted, transcribed, or translated into any language or computer
      7          // format, in any form or by any means without written permission of
      8          // Silicon Image, Inc., 1060 East Arques Avenue, Sunnyvale, California 94085
      9          //
     10          // Copyright 2008-2010, Silicon Image, Inc.  All rights reserved.
     11          //***************************************************************************/
     12          
     13          #include "si_drv_device.h"
     14          #include "si_drv_internal.h"
     15          #include "si_drv_switch.h"
     16          #include "si_regs_rxedid953x.h"
     17          #include "si_regs_mhl953x.h"
     18          #include "si_drv_cbus_internal.h"
     19          #if INC_CDC
     20          #   include "si_cdc_component.h"
     21          #endif
     22          //  Bug 31921 - Melbourne on power up, Unconnected port to MHL connected port switch not working 
     23          #if INC_CBUS
     24          #include "si_cbus_component.h"
     25          #endif
     26          
     27          extern CbusDrvInstanceData_t *pDrvCbus;
     28          
     29          //-------------------------------------------------------------------------------------------------
     30          //! @brief      Determine the pipe that the specified port is attached to, if any.
     31          //!             attached to the specified pipe.
     32          //!
     33          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
     34          //!
     35          //! @return     Pipe that is connected to the specified port, or -1 if none.
     36          //-------------------------------------------------------------------------------------------------
     37          int_t SiiDrvRxPipeGet ( int_t portIndex )
     38          {
     39              int_t           i, pipe;
     40              uint8_t         rpMask;
     41          
     42              if ( portIndex == (SiiRegRead( REG_RX_PORT_SEL ) & MSK_MP_PORT_SEL))
     43              {
     44                  pipe = 0;
     45              }
     46              else
     47              {
     48                  // Compare the portIndex to the current roving port by converting
     49                  // from the one-hot roving port select status register(s).
     50                  pipe = -1;
     51                  rpMask = (SiiRegRead( REG_SELECTED_PORT_0 ) & ROVE_PIPE_MASK) >> 4;   //Bug 31744 - With samsung S3 and S4 as MHL source, video out is not consistent when plug/unplug cable at source side
     52          
     53          
     54                  for ( i = 0; i < SII_INPUT_PORT_COUNT; i++ )
     55                  {
     56                      if (( 0x01 << i ) == rpMask )
     57                      {
     58                          pipe = 1;
     59                          break;
     60                      }
     61                  }
     62              }
     63          
     64              return( pipe );
     65          }
     66          
     67          //-------------------------------------------------------------------------------------------------
     68          //! @brief      Determine the port that is attached to the specified pipe.
     69          //!
     70          //! @param[in]  pipe    - 0: Main pipe
     71          //!                       1: Roving pipe
     72          //! @return     port index for specified pipe
     73          //-------------------------------------------------------------------------------------------------
     74          int_t SiiDrvRxPipePortGet ( int_t pipe )
     75          {
     76              int_t           i, portIndex;
     77              uint8_t         rpMask;
     78          
     79              if ( pipe == 0 )
     80              {
     81                  portIndex = SiiRegRead( REG_RX_PORT_SEL ) & MSK_MP_PORT_SEL;
     82              }
     83              else
     84              {
     85                  // Convert the current roving port by from a one-hot bit value
     86                  // to an index.
     87                  portIndex = 0;
     88                  rpMask = (SiiRegRead( REG_SELECTED_PORT_0 ) & ROVE_PIPE_MASK) >> 4;  //Bug 31744 - With samsung S3 and S4 as MHL source, video out is not consistent when plug/unplug cable at source side
     89                  for ( i = 0; i < SII_INPUT_PORT_COUNT; i++ )
     90                  {
     91                      if (( 0x01 << i ) == rpMask )
     92                      {
     93                          portIndex = i;
     94                          break;
     95                      }
     96                  }
     97              }
     98          
     99              return( portIndex );
    100          }
    101          
    102          //-------------------------------------------------------------------------------------------------
    103          //! @brief      Trigger an automatic hot plug event sequence (ON-OFF) on the port
    104          //!             attached to the specified pipe.
    105          //!
    106          //! @param[in]  pipe    - 0: HPE on port attached to main pipe
    107          //!                       1: HPE on port attached to roving pipe
    108          //! @param[in]  noHpd   - true: do not include physical HPD, false - include physical HPD
    109          //-------------------------------------------------------------------------------------------------
    110          void SiiDrvRxPipeHpeTrigger ( int_t pipe, bool_t noHpd )
    111          {
    112              uint8_t triggerMask;
    113          
    114              triggerMask = pipe ? (BIT_OVR_RP | BIT_TRIGGER_RP) : (BIT_OVR_MP | BIT_TRIGGER_MP);
    115              if ( noHpd )
    116              {
    117                  // Set end time of HPD HPE timer to 0 so that the auto-HPE hardware
    118                  // will NOT controlled during HPE sequence.
    119                  SiiRegWrite( REG_IP_HPE_HPD_END, 0x00 );
    120              }
    121              else
    122              {
    123                  // Set end time of HPD HPE timer to 1200ms.
    124                  SiiRegWrite( REG_IP_HPE_HPD_END, 0x0C );
    125              }
    126          
    127              // Toggle the HW HPE for the selected pipe, leave HPE in automatic hardware control
    128              SiiRegModify( REG_HPE_TRIGGER, triggerMask, SET_BITS );
    129              SiiRegModify( REG_HPE_TRIGGER, triggerMask, CLEAR_BITS );
    130          }
    131          
    132          //-------------------------------------------------------------------------------------------------
    133          //! @brief      Add or remove the specified HEC port in the Auto-HPD Software Interrupt mask.
    134          //!             The type of port decides how we handle Hot Plug Events (HPE) on that port.
    135          //!             If it is regular HDMI, we do standard a Hot Plug. Otherwise, when the
    136          //!             pre-authentication logic determines that the port needs an HPE, it fires off a
    137          //!             SW HPE interrupt and lets the software send the appropriate HPE message over
    138          //!             CDC(CEC) or CBUS(MHL).
    139          //!
    140          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
    141          //!                         SiiPORT_ALL         - All ports are acted on simultaneously.
    142          //! @param[in]  setEnable - true - enable, false - disable
    143          //! @remarks    This function is a 'cross-instance' function that affects both instances at once.
    144          //-------------------------------------------------------------------------------------------------
    145          void SiiDrvRxAutoHpeConfigure ( int_t portIndex, SiiPortType_t portType )
    146          {
    147              uint8_t portMask, mask;
    148          
    149              // Clear the mask bit position in the Auto-HPD mask register (default to HDMI)
    150              mask        = (1 << portIndex) << 2;
    151              portMask    = (SiiRegRead( REG_PHYS_HPD_DISABLE ) & ~mask);
    152          
    153              // If NOT an HDMI port, set the corresponding bit in the HEC/CBUS port HPD mask
    154              // set for both instances
    155              drvSwitchInstance[0].portType[ portIndex] = portType;
    156          #if (SII_NUM_SWITCH > 1)
    157              drvSwitchInstance[1].portType[ portIndex] = portType;
    158          #endif
    159              if ( portType != SiiPortType_HDMI )
    160              {
    161                  portMask |= mask;
    162              }
    163          
    164              SiiRegBitsSet( REG_INT_ENABLE_IP1, BIT_MP_CEC_HPE|BIT_RP_CEC_HPE, (portType != SiiPortType_HDMI) );
    165              SiiRegModify( REG_PHYS_HPD_DISABLE, VAL_FW_HPE_MASK, portMask );   // Update the hardware
    166          
    167              if ( ( portType == SiiPortType_MHL ) && (portIndex == 1) )
    168              {
    169              	//SiiRegWrite(REG_CDSENSE_CTRL, BIT_MHL_SEL_CDSENSE1);
    170              	SiiRegBitsSet(REG_CDSENSE_CTRL,BIT3,0x01);
    171              }//
    172              else if ( ( portType == SiiPortType_HDMI ) && (portIndex == 1) )
    173              {
    174              	SiiRegBitsSet(REG_CDSENSE_CTRL,BIT3,0x00);
    175              }
    176          
    177              //Bug 31744 - With samsung S3 and S4 as MHL source, video out is not consistent when plug/unplug cable at source side
    178          
    179          //    if ( ( portType == SiiPortType_MHL ) && (portIndex == 0) )
    180          //    {
    181          //    	SiiRegBitsSet(REG_CDSENSE_CTRL,BIT2|BIT0, 0x01);
    182          //    }
    183          //    else if ( ( portType == SiiPortType_HDMI ) && (portIndex == 0) )
    184          //    {
    185              	SiiRegBitsSet(REG_CDSENSE_CTRL,BIT2|BIT0, 0x00);
    186          //    }
    187          
    188             	//DEBUG_PRINT(MSG_ALWAYS, "CBus Driver:: SiiDrvRxAutoHpeConfigure() REG_CDSENSE_CTRL written \n");
    189          }
    190          
    191          //-------------------------------------------------------------------------------------------------
    192          //! @brief      Enable or disable the the EDID DDC bus for a Rx port.
    193          //!
    194          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
    195          //!                         SiiPORT_ALL         - All ports are acted on simultaneously.
    196          //! @param[in]  setEnable - true - enable, false - disable
    197          //-------------------------------------------------------------------------------------------------
    198          void SiiDrvRxEdidDdcControl ( uint8_t portIndex, bool_t setEnable )
    199          {
    200              uint8_t enableVal, enableMask;
    201          
    202              enableVal = setEnable ? SET_BITS : CLEAR_BITS;
    203          
    204              if ( portIndex == SiiPORT_ALL )     // All ports at once
    205              {
    206                  enableMask = VAL_EN_DDC_ALL;
    207              }
    208              else                                // Port 0 - 3
    209              {
    210                  enableMask = (BIT_EDDC_EN0 << portIndex);
    211              }
    212          
    213              SiiRegModify( RX_EDID_DDC_EN, enableMask, enableVal );
    214          }
    215          
    216          //-------------------------------------------------------------------------------------------------
    217          //! @brief      Enable or disable the the HDCP DDC bus for a Rx port.
    218          //!
    219          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
    220          //!                         SiiPORT_ALL         - All ports are acted on simultaneously.
    221          //! @param[in]  setEnable - true - enable, false - disable
    222          //-------------------------------------------------------------------------------------------------
    223          void SiiDrvRxHdcpDdcControl ( uint8_t portIndex, bool_t setEnable )
    224          {
    225              uint8_t enableVal, enableMask;
    226          
    227              enableVal = setEnable ? SET_BITS : CLEAR_BITS;
    228          
    229              if ( portIndex == SiiPORT_ALL )     // All ports at once
    230              {
    231                  enableMask = VAL_DDC_PORT_ALL_EN;
    232              }
    233              else                                // Port 0 - 3
    234              {
    235                  enableMask = (BIT_DDC0_EN << portIndex);
    236              }
    237          
    238              SiiRegModify( REG_RX_HDCP_DDC_EN, enableMask, enableVal );
    239          }
    240          
    241          //-------------------------------------------------------------------------------------------------
    242          //! @brief      Set the physical state of the RX termination for a Rx port.
    243          //!             If the port is configured as MHL the termination is set to tri-state on enable
    244          //!
    245          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
    246          //! @param[in]  setEnable - true - enable, false - disable
    247          //!
    248          //! @warning    The 'portIndex' parameter value 0xFF should not be used unless
    249          //! @warning    all ports are HDMI1.3/a (not MHL or CDC)
    250          //-------------------------------------------------------------------------------------------------
    251          void SiiDrvRxTermControl ( int_t portIndex, bool_t setEnable )
    252          {
    253              uint8_t enableVal, rPwrStatus;
    254              uint8_t enableMask = 0;
    255          
    256              // MHL port termination is handled in hardware automatically if 
    257              // NVRAM location 0x28 bit 5 is set, which is recommended, so
    258              // we will leave the register alone for MHL ports.
    259              //  Bug 31921 - Melbourne on power up, Unconnected port to MHL connected port switch not working 
    260              if ( pDrvSwitch->portType[ portIndex] == SiiPortType_MHL )
    261              {
    262                  return;
    263              }
    264          
    265          
    266              if ( pDrvSwitch->portType[ portIndex] == SiiPortType_MHL )
    267              {
    268              	// If MHL port, enable value is different
    269             		enableVal = setEnable ? (0x01 << (portIndex * 2)) : VAL_TERM_ALL_OFF;
    270          	    enableMask  = (MSK_TERM << ((portIndex % 4) * 2)); //added by mahesh - remove if nvram works
    271          
    272          //	    SiiRegWrite( REG_RX_TMDS_TERM_0, 0x01 );
    273          
    274          	    //SiiRegWrite(REG_HDMIM_MODE_OVWR, 0x00); // Enable MHL 3X
    275          
    276          	    SiiDrvCbusInstanceSet(portIndex);
    277          
    278          	    if(portIndex == 0)
    279          	    {
    280          //	    	SiiRegModify( REG_RX_TMDS_TERM_0, 0x03, 0x01 );
    281          	    	SiiRegModify( REG_RX_TMDS_TERM_0, 0x03, (pDrvCbus->busConnected ? 0x01 : 0x03) );
    282          
    283          			//SiiRegWrite( REG_TMDS0_CTRL2, 0x20);
    284          			if(SiiRegRead(REG_HDMIM_MODE_OVWR) & BIT_MHL_1X_EN)
    285          				SiiRegWrite( REG_TMDS0_CTRL2, REG_MHL_TEST_SOFT_CTRL_1X);
    286          			else
    287          				SiiRegWrite( REG_TMDS0_CTRL2, REG_MHL_TEST_SOFT_CTRL_3X);
    288          
    289          			// PLL configuration for port 0
    290          			SiiRegWrite( REG_TMDS0_CTRL3, 0x00);
    291          	    }
    292          	    else
    293          	    {
    294          //	    	SiiRegModify( REG_RX_TMDS_TERM_0, 0x0C, 0x04 );
    295          	    	SiiRegModify( REG_RX_TMDS_TERM_0, 0x0C, (pDrvCbus->busConnected ? 0x04 : 0x0C) );
    296          			//SiiRegWrite( REG_TMDS0_CTRL2, 0x20);
    297          
    298          			// PLL configuration for port 1
    299          			SiiRegWrite( REG_TMDS1_CTRL3, REG_HDMI_RX1_PLL_CONFIG);
    300          
    301          			if(SiiRegRead(REG_HDMIM_MODE_OVWR) & BIT_MHL_1X_EN)
    302          				SiiRegWrite( REG_TMDS1_CTRL2, REG_HDMI_RX1_MHL_TEST_1X);
    303          			else
    304          				SiiRegWrite( REG_TMDS1_CTRL2, REG_HDMI_RX1_MHL_TEST_3X);
    305          	    }
    306          
    307             	    //DEBUG_PRINT(MSG_ALWAYS,"\n MHL TERMINATION *********Mask: %02X val: %02X  \n",enableMask,  enableVal);
    308             	    //DEBUG_PRINT(MSG_ALWAYS,"\n MHL TERMINATION ********Bus Connected: %02X\n", pDrvCbus->busConnected);
    309              }
    310          	else
    311          	{
    312          		// if the port is not connected we don't want to terminate that one.
    313          		// However, if setEnable is false we don't care and just unterminate the port, there
    314          		// are cases when you have to unterminate the port in Matrix Switch mode even when the
    315          		// port is connected to source
    316          		if(portIndex == 0)
    317          		{
    318          			SiiRegWrite( REG_TMDS0_CTRL2, 0x00);
    319          			// PLL configuration for port 0
    320          			SiiRegWrite( REG_TMDS0_CTRL3, 0x00);
    321          		}else if(portIndex == 1)
    322          		{
    323          			SiiRegWrite( REG_TMDS1_CTRL2, 0x00);
    324          			// PLL configuration for port 1
    325          			SiiRegWrite( REG_TMDS1_CTRL3, 0x00);
    326          		}
    327          
    328          		if(setEnable)
    329          		{
    330          			// see if the port is connected to a source or not
    331          			rPwrStatus = SiiRegRead( REG_PWR5V_STATUS ) & MSK_PWR5V_ALL;
    332          			if(!((rPwrStatus >> portIndex) & BIT0))
    333          			{
    334          				setEnable = false;
    335          			}
    336          		}
    337          
    338          
    339          		/*
    340          		DEBUG_PRINT( MSG_DBG, "SiiDrvRxTermControl , portIndex:: %02X, setEnable:: %02X\n\n\n",
    341          				portIndex, setEnable );
    342          		*/
    343          
    344          		enableVal = setEnable ? VAL_TERM_ALL_ON : VAL_TERM_ALL_OFF;
    345          
    346          		// Move enable value bits to correct position
    347          		enableMask  = (MSK_TERM << ((portIndex % 4) * 2));
    348          	    SiiRegModify( REG_RX_TMDS_TERM_0, enableMask, enableVal );
    349          	    //DEBUG_PRINT(MSG_ALWAYS,"\n HDMI TERMINATION ***********************************88888\n");
    350             	   // DEBUG_PRINT(MSG_ALWAYS,"\n HDMI TERMINATION ***************************Mask: %02X val: %02X \n",enableMask,  enableVal);
    351          
    352          	}
    353          }
    354          
    355          //-------------------------------------------------------------------------------------------------
    356          //! @brief      Set the physical state of the Hot Plug Detect (HPD) signal for a Rx port.
    357          //!             If the port is configured as MHL the HPD line is set to tri-state on enable
    358          //!
    359          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
    360          //!                         SiiPORT_ALL         - All ports are acted on simultaneously.
    361          //! @param[in]  setActive - true - set HPD to active (high or tri-state), false - set HPD to low state
    362          //-------------------------------------------------------------------------------------------------
    363          void SiiDrvRxHpdControl ( uint8_t portIndex, bool_t setActive )
    364          {
    365              uint8_t     enableVal;
    366              SiiReg_t    ctrlAddress;
    367          
    368              enableVal = setActive ?  VAL_HP_PORT_ALL_HI : VAL_HP_PORT_ALL_LO;
    369          
    370              if ( portIndex == SiiPORT_ALL ) // All at once, must be HDMI ports.
    371              {
    372                  SiiRegWrite( REG_HP_CTRL1, enableVal );
    373              }
    374              else
    375              {
    376                  // If MHL port, enable means tri-state
    377                  if ( pDrvSwitch->portType[ portIndex] == SiiPortType_MHL )
    378                  {
    379                      enableVal = setActive ? VAL_HP_PORT_ALL_MHL : enableVal;
    380                  }
    381          
    382                  // Find correct control register and update.
    383                  ctrlAddress = REG_HP_CTRL1;
    384                  SiiRegModify( ctrlAddress, (VAL_HP_PORT0_MASK << (portIndex * 2)), enableVal );
    385              }
    386          }
    387          
    388          //-------------------------------------------------------------------------------------------------
    389          //! @brief      Set the Hot Plug Event (HPE) state of a single Rx port.
    390          //!             If the port is configured as MHL or HEC/CDC, the appropriate set state function
    391          //!             is called instead of physically changing the pin state.
    392          //!
    393          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
    394          //!                       - SiiPORT_Pipe0       - Port attached to pipe 0
    395          //!                       - SiiPORT_Pipe1       - Port attached to pipe 1
    396          //! @param[in]  newState  - Same as SiiDrvRxHpeStateSet
    397          //!
    398          //! @return     true - success  false - some failure occurred
    399          //-------------------------------------------------------------------------------------------------
    400          static bool_t HpeStateSetSinglePort ( int_t portIndex, SiiDrvHpdActions_t newState )
    401          {
    402              bool_t  success = true;
    403              int_t   pipe = 0;
    404          
    405              // Validate portIndex parameter and determine real portIndex if a pipe requested.
    406              switch ( portIndex )
    407              {
    408                  case SiiPORT_Pipe0:
    409                  case SiiPORT_Pipe1:
    410                      pipe = portIndex - SiiPORT_Pipe0;
    411                      portIndex = SiiDrvRxPipePortGet( pipe );
    412                      break;
    413                  default:
    414                      if ( portIndex >= SII_INPUT_PORT_COUNT )
    415                      {
    416                          return( false );
    417                      }
    418          
    419                      // Get the associated pipe (for TOGGLE command)
    420                      pipe = SiiDrvRxPipeGet( portIndex );
    421                      break;
    422              }
    423          
    424          
    425              //  Bug 31921 - Melbourne on power up, Unconnected port to MHL connected port switch not working 
    426          
    427              // Perform HPD signaling appropriate to the port type.
    428              switch ( pDrvSwitch->portType[ portIndex] )
    429              {
    430                  case SiiPortType_HDMI:
    431          
    432                      // Perform physical register control common to all types of ports (HDMI/MHL/CDC)
    433                      // This means everything except HPD signaling
    434                      switch ( newState )
    435                      {
    436                          // HDCP access enabled, RX Term enabled, EDID access enabled
    437                          case SiiHPD_ACTIVE:
    438                              SiiDrvRxHdcpDdcControl( portIndex, true );
    439                              //DEBUG_PRINT(MSG_ALWAYS,"\n HpeStateSetSinglePort() -- SiiHPD_ACTIVE \n");
    440                              SiiDrvRxTermControl( portIndex, true );
    441                              SiiDrvRxEdidDdcControl( portIndex, true );
    442                              break;
    443          
    444                  		// HDCP access disabled, RX Term disabled, EDID access disabled
    445                  		case SiiHPD_INACTIVE:
    446                  			SiiDrvRxHdcpDdcControl( portIndex, false );
    447                  			//DEBUG_PRINT(MSG_ALWAYS,"\n HpeStateSetSinglePort() -- SiiHPD_INACTIVE \n");
    448                  			SiiDrvRxTermControl( portIndex, false );
    449                  			SiiDrvRxEdidDdcControl( portIndex, false );
    450                  			break;
    451                  		case SiiHPD_TOGGLE:
    452                  			break;
    453                  		// EDID access enabled
    454                  		case SiiHPD_ACTIVE_EDID:
    455                  			SiiDrvRxEdidDdcControl( portIndex, true );
    456                  			break;
    457                  		// EDID access disabled
    458                  		case SiiHPD_INACTIVE_EDID:
    459                  			SiiDrvRxEdidDdcControl( portIndex, false );
    460                  			break;
    461                  		default:
    462                  			break;
    463                      }
    464          
    465                      switch ( newState )
    466                      {
    467                          case SiiHPD_ACTIVE:
    468                              SiiDrvRxHpdControl( portIndex, true );
    469                              break;
    470                          case SiiHPD_INACTIVE:
    471                              SiiDrvRxHpdControl( portIndex, false );
    472                              break;
    473                          case SiiHPD_TOGGLE:
    474          
    475                              //Use auto-HPE hardware
    476                              SiiDrvRxPipeHpeTrigger( pipe, false );
    477                              break;
    478                          default:
    479                              success = false;
    480                              break;
    481                      }
    482          
    483                      break;
    484          #if INC_CBUS
    485                  case SiiPortType_MHL:
    486                      //Bug 31744 - With samsung S3 and S4 as MHL source, video out is not consistent when plug/unplug cable at source side
    487                      SiiCbusInstanceSet( portIndex );
    488                      success = SiiMhlCbHpdSetState( portIndex, newState );
    489                      break;
    490          #endif
    491          #if INC_CDC
    492                  case SiiPortType_HEC:
    493                      if ( newState == SiiHPD_TOGGLE )
    494                      {
    495                          // For HEC ports, we want to physically toggle all but the HPD line
    496                          SiiDrvRxPipeHpeTrigger( pipe, true );
    497                      }
    498                      success = SiiCdcHpdSetState( portIndex, newState );
    499                      break;
    500          #endif
    501                  default:
    502                      success = false;
    503                      break;
    504              }
    505          
    506              return( success );
    507          }
    508          
    509          //-------------------------------------------------------------------------------------------------
    510          //! @brief      Set the Hot Plug Event (HPE) state of the specified Rx port or ports.
    511          //!             An HPE affects the port HPD signal, HDCP DDC access, EDID DDC access, and Rx termination.
    512          //!
    513          //! @param[in]  portIndex - SiiPORT_x           - Rx port (0-3).
    514          //!                       - SiiPORT_Pipe0       - Port attached to pipe 0
    515          //!                       - SiiPORT_Pipe1       - Port attached to pipe 1
    516          //!                       - SiiPORT_ALL         - All ports
    517          //! @param[in]  newState  - SiiHPD_INACTIVE     - HPD HI, HDCP, EDID, RX Term disabled
    518          //!                       - SiiHPD_ACTIVE       - HPD HI, HDCP, EDID, RX Term enabled
    519          //!                       - SiiHPD_TOGGLE       - Toggle all controls off then on
    520          //!                                             - Note that this affects ONLY a port attached to a
    521          //!                                               pipe. Any other port will be ignored.
    522          //!                       - SiiHPD_INACTIVE_EDID- EDID access disabled
    523          //!                       - SiiHPD_ACTIVE_EDID  - EDID access enabled
    524          //!
    525          //! @return     true - success  false - some failure occurred
    526          //-------------------------------------------------------------------------------------------------
    527          bool_t SiiDrvRxHpeStateSet ( int_t portIndex, SiiDrvHpdActions_t newState )
    528          {
    529              bool_t  success = true;
    530              bool_t  portResult;
    531              uint8_t i;
    532          
    533              switch ( portIndex )
    534              {
    535                  case SiiPORT_0:
    536                  case SiiPORT_1:
    537                  case SiiPORT_2:
    538                  case SiiPORT_3:
    539                  case SiiPORT_Pipe0:
    540                  case SiiPORT_Pipe1:
    541                      success = HpeStateSetSinglePort( portIndex, newState );
    542                      break;
    543          
    544                  case SiiPORT_ALL:
    545                      for ( i = 0; i < SII_INPUT_PORT_COUNT; i++ )
    546                      {
    547                          // Set the state for this port
    548                          portResult = HpeStateSetSinglePort( i, newState );
    549                          // Accumulate success or failure
    550                          success =  portResult && success;
    551                      }
    552                      break;
    553          
    554                  default:
    555                      success = false;
    556                      break;
    557              }
    558          
    559              return( success );
    560          }
    561          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  HpeStateSetSinglePort
             24 -> SiiCbusInstanceSet
             24 -> SiiCdcHpdSetState
             24 -> SiiDrvRxEdidDdcControl
             24 -> SiiDrvRxHdcpDdcControl
             24 -> SiiDrvRxHpdControl
             24 -> SiiDrvRxPipeGet
             24 -> SiiDrvRxPipeHpeTrigger
             24 -> SiiDrvRxPipePortGet
             24 -> SiiDrvRxTermControl
             24 -> SiiMhlCbHpdSetState
       24  SiiDrvRxAutoHpeConfigure
              0 -> SiiRegBitsSet
             24 -> SiiRegBitsSet
             24 -> SiiRegModify
             24 -> SiiRegRead
        0  SiiDrvRxEdidDdcControl
              0 -> SiiRegModify
        0  SiiDrvRxHdcpDdcControl
              0 -> SiiRegModify
        0  SiiDrvRxHpdControl
              0 -> SiiRegModify
              0 -> SiiRegWrite
       16  SiiDrvRxHpeStateSet
             16 -> HpeStateSetSinglePort
        8  SiiDrvRxPipeGet
              8 -> SiiRegRead
       16  SiiDrvRxPipeHpeTrigger
              0 -> SiiRegModify
             16 -> SiiRegModify
             16 -> SiiRegWrite
        8  SiiDrvRxPipePortGet
              8 -> SiiRegRead
       16  SiiDrvRxTermControl
              0 -> SiiRegModify
             16 -> SiiRegRead
             16 -> SiiRegWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
     220  HpeStateSetSinglePort
     112  SiiDrvRxAutoHpeConfigure
      28  SiiDrvRxEdidDdcControl
      26  SiiDrvRxHdcpDdcControl
      50  SiiDrvRxHpdControl
      70  SiiDrvRxHpeStateSet
      60  SiiDrvRxPipeGet
      54  SiiDrvRxPipeHpeTrigger
      52  SiiDrvRxPipePortGet
     122  SiiDrvRxTermControl

 
 802 bytes in section .text
 
 802 bytes of CODE memory

Errors: none
Warnings: 2

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:26:18 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\APP_SRC\SERVICES\USB_HD\src\usbh_usr. #
#                    c                                                        #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\APP_SRC\SERVICES\USB_HD\src\usbh_usr. #
#                    c -D S4051A -D DEBUG -D FREE_RTOS -D STM32F40_41xxx -D   #
#                    USE_STM324xG_EVAL -D USE_STDPERIPH_DRIVER -D             #
#                    __ARM_CORTEX_MX__ -D IAR_ARM_CM4F -D USE_USB_OTG_FS      #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applicati #
#                    on\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Ap #
#                    plication\Obj\ --debug --endian=little --cpu=Cortex-M4   #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\usbh_usr.lst                                          #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\usbh_usr.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Projects\S4051A\APP_SRC\SERVICES\USB_HD\src\usbh_usr.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_usr.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    19-March-2012
      7            * @brief   This file includes the usb host library user callbacks
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include <string.h>
     30          #include "usbh_usr.h"
     31          #include "ff.h"       /* FATFS */
     32          #include "usbh_msc_core.h"
     33          #include "usbh_msc_scsi.h"
     34          #include "usbh_msc_bot.h"
     35          
     36          
     37          #include "USBFileSearch.h"
     38          
     39          //#include "MusicPlaybackDispatcher.h"
     40          //#include "NoiseGeneratorDispatcher.h" /* Angus remove for pass compiler */
     41          
     42          
     43          #include "USBMusicManager.h"
     44          #include "USBMediaManager.h"
     45          
     46          
     47          extern USB_FILE_SEARCH_OBJECT *pUSBFSE_Object;
     48          extern USB_MEDIA_MANAGE_OBJECT *pUSBMedia_ObjCtrl;
     49          extern USB_MUSIC_MANAGE_OBJECT *pUSB_MMP_ObjCtrl;
     50          
     51          
     52          //extern void USB_Media_StateDispatcher(void);
     53          //extern bool IsNoiseGeneratorMode(void);
     54          
     55          
     56          //Mike
     57          uint8_t bUsbMount = 0;
     58          //Angus
     59          extern void MSCPB_Set_getTime(void);
     60          static int USB_Ever_UnMount = FALSE;
     61          
     62          /** @addtogroup USBH_USER
     63            * @{
     64            */
     65          
     66          /** @defgroup IAP_OVER_USB_USER
     67            * @brief
     68            * @{
     69            */
     70          
     71          typedef enum
     72          {
     73          	USH_USR_FS_INIT = 0,
     74          	USH_USR_FS_FileSearch,
     75          	USH_USR_FS_PLAY,
     76          	USH_USR_FS_WAIT
     77           
     78          } USBH_USER_APP_STATE;
     79          
     80          FATFS fatfs;
     81          
     82          extern USB_OTG_CORE_HANDLE          USB_OTG_Core;   
     83          
     84          /*  The purpose of this register is to speed up the execution */
     85          USBH_USER_APP_STATE USBH_USR_ApplicationState = USH_USR_FS_INIT;
     86          
     87          USBH_Usr_cb_TypeDef USR_USBH_MSC_cb =
     88          {
     89            USBH_USR_Init,
     90            USBH_USR_DeInit,
     91            USBH_USR_DeviceAttached,
     92            USBH_USR_ResetDevice,
     93            USBH_USR_DeviceDisconnected,
     94            USBH_USR_OverCurrentDetected,
     95            USBH_USR_DeviceSpeedDetected,
     96            USBH_USR_Device_DescAvailable,
     97            USBH_USR_DeviceAddressAssigned,
     98            USBH_USR_Configuration_DescAvailable,
     99            USBH_USR_Manufacturer_String,
    100            USBH_USR_Product_String,
    101            USBH_USR_SerialNum_String,
    102            USBH_USR_EnumerationDone,
    103            USBH_USR_UserInput,
    104            USBH_USR_MSC_Application,
    105            USBH_USR_DeviceNotSupported,
    106            USBH_USR_UnrecoveredError
    107              
    108          };
    109          
    110          EmbeddedFileSystem          efs;
    111          //EmbeddedFile                file;
    112          EmbeddedFile                fileR;
    113          DirList                     list;
    114          
    115          
    116          
    117          /**
    118            * @brief  USBH_USR_IAPInit
    119            *         Displays the message on LCD for IAP initialization
    120            * @param  None
    121            * @retval None
    122            */
    123          void USBH_USR_IAPInit(void)
    124          {
    125            
    126          }
    127          
    128          /**
    129            * @brief  USBH_USR_Init
    130            *         Displays the message on LCD for host lib initialization
    131            * @param  None
    132            * @retval None
    133            */
    134          void USBH_USR_Init(void)
    135          {
    136              bUsbMount = 0;
    137          }
    138          
    139          /**
    140            * @brief  USBH_USR_DeviceAttached
    141            *         Displays the message on LCD on device attached
    142            * @param  None
    143            * @retval None
    144            */
    145          void USBH_USR_DeviceAttached(void)
    146          {
    147          }
    148          
    149          
    150          /**
    151            * @brief  USBH_USR_UnrecoveredError
    152            * @param  None
    153            * @retval None
    154            */
    155          void USBH_USR_UnrecoveredError (void)
    156          {
    157          }
    158          
    159          /**
    160            * @brief  USBH_DisconnectEvent
    161            *         Device disconnect event
    162            * @param  None
    163            * @retval Staus
    164            */
    165          void USBH_USR_DeviceDisconnected (void)
    166          {
    167              /*Smith Implements: 2013/5/30 */
    168              f_mount(0, NULL);
    169              bUsbMount = 0;
    170              USBH_Set_USB_Ever_UnMount_State();
    171          
    172              //	MSCPB_Set_Play_State(); /* Angus remove for pass compiler */	//Angus add,SB need auto play music when USB be pause and re-plug USB again.
    173              //	USB_Reset_PlayIndex();  /* Angus remove for pass compiler */  
    174          
    175              pUSBFSE_Object->init();
    176          
    177              //20130625 Angus add. if USB unmount that need calulate time of timeout. 
    178              //First time into demo2 it will time out at 30seconds, so regardless of USB unmount, otherwise it will over 30 seconds.
    179          #if 0   /* Angus remove for pass compiler */
    180              if(MSCPB_Get_Demo2_Play_State()!=FALSE)
    181              MSCPB_Set_getTime();
    182          #endif
    183              USBH_USR_ApplicationState = USH_USR_FS_INIT;
    184              pUSB_MMP_ObjCtrl->init();
    185          }
    186          
    187          /**
    188            * @brief  USBH_USR_ResetUSBDevice
    189            * @param  None
    190            * @retval None
    191            */
    192          void USBH_USR_ResetDevice(void)
    193          {
    194            /* callback for USB-Reset */
    195          }
    196          
    197          
    198          /**
    199            * @brief  USBH_USR_DeviceSpeedDetected
    200            *         Displays the message on LCD for device speed
    201            * @param  Device speed:
    202            * @retval None
    203            */
    204          void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
    205          {
    206          	//!	Smith mark	@{
    207          #if 0
    208          	if (DeviceSpeed == HPRT0_PRTSPD_FULL_SPEED)
    209          	{
    210          		LCD_DisplayStringLine(100, (uint8_t *)MSG_DEV_FULLSPEED);
    211          	}
    212          	else if (DeviceSpeed == HPRT0_PRTSPD_LOW_SPEED)
    213          	{
    214          		LCD_DisplayStringLine(100, (uint8_t *)MSG_DEV_LOWSPEED);
    215          	}
    216          	else
    217          	{
    218          		LCD_DisplayStringLine(100, (uint8_t *)MSG_DEV_ERROR);
    219          	}
    220          #endif	
    221          	//!	 @}
    222          
    223          }
    224          
    225          /**
    226            * @brief  USBH_USR_Device_DescAvailable
    227            * @param  device descriptor
    228            * @retval None
    229            */
    230          void USBH_USR_Device_DescAvailable(void *DeviceDesc)
    231          {
    232            /* callback for device descriptor */
    233          }
    234          
    235          /**
    236            * @brief  USBH_USR_DeviceAddressAssigned
    237            *         USB device is successfully assigned the Address
    238            * @param  None
    239            * @retval None
    240            */
    241          void USBH_USR_DeviceAddressAssigned(void)
    242          {
    243            /* callback for device successfully assigned the Address */
    244          }
    245          
    246          
    247          /**
    248            * @brief  USBH_USR_Conf_Desc
    249            * @param  Configuration descriptor
    250            * @retval None
    251            */
    252          void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
    253              USBH_InterfaceDesc_TypeDef *itfDesc,
    254              USBH_EpDesc_TypeDef *epDesc)
    255          {
    256            /* callback for configuration descriptor */
    257          }
    258          
    259          /**
    260            * @brief  USBH_USR_Manufacturer_String
    261            * @param  Manufacturer String
    262            * @retval None
    263            */
    264          void USBH_USR_Manufacturer_String(void *ManufacturerString)
    265          {
    266            /* callback for  Manufacturer String */
    267          }
    268          
    269          /**
    270            * @brief  USBH_USR_Product_String
    271            * @param  Product String
    272            * @retval None
    273            */
    274          void USBH_USR_Product_String(void *ProductString)
    275          {
    276            /* callback for Product String */
    277          }
    278          
    279          /**
    280            * @brief  USBH_USR_SerialNum_String
    281            * @param  SerialNum_String
    282            * @retval None
    283            */
    284          void USBH_USR_SerialNum_String(void *SerialNumString)
    285          {
    286            /* callback for SerialNum_String */
    287          }
    288          
    289          /**
    290          * @brief  EnumerationDone 
    291          *         User response request is displayed to ask application jump to class
    292          * @param  None
    293          * @retval None
    294          */
    295          void USBH_USR_EnumerationDone(void)
    296          {
    297          } 
    298          
    299          
    300          
    301          /**
    302            * @brief  USBH_USR_DeviceNotSupported
    303            *         Device is not supported
    304            * @param  None
    305            * @retval None
    306            */
    307          void USBH_USR_DeviceNotSupported(void)
    308          {
    309          
    310          }
    311          
    312          
    313          /**
    314            * @brief  USBH_USR_UserInput
    315            *         User Action for application state entry
    316            * @param  None
    317            * @retval USBH_USR_Status : User response for key button
    318            */
    319          USBH_USR_Status USBH_USR_UserInput(void)
    320          {
    321            return USBH_USR_RESP_OK;
    322          }  
    323          
    324          /**
    325            * @brief  USBH_USR_OverCurrentDetected
    326            *         Over Current Detected on VBUS
    327            * @param  None
    328            * @retval None
    329            */
    330          void USBH_USR_OverCurrentDetected (void)
    331          {
    332          }
    333          
    334          /**
    335            * @brief  USBH_USR_MSC_Application
    336            *         Demo application for IAP thru USB mass storage
    337            * @param  None
    338            * @retval Staus
    339            */
    340          int USBH_USR_MSC_Application(void)
    341          {	
    342              #if 0   /* Angus remove for pass compiler */
    343                  if(IsNoiseGeneratorMode())
    344                  {
    345                      USBH_USR_ApplicationState = USH_USR_FS_INIT;
    346                      return(USBH_OK);
    347                  }
    348              #endif
    349          
    350          
    351              #if 1 /* Angus debug 2014/2/21 */
    352          	switch(USBH_USR_ApplicationState)
    353          	{
    354          		case USH_USR_FS_INIT:
    355          		{	
    356          
    357                              pUSBFSE_Object->init();
    358                      
    359          			/* Initialises the File System*/
    360          			if ( f_mount( 0, &fatfs ) != FR_OK ) 
    361          			{
    362          				bUsbMount = 0;
    363          
    364          				return(USBH_APPLY_DEINIT);
    365          			}
    366          			else
    367          			{
    368          				bUsbMount = 1;
    369          
    370          				USBH_USR_ApplicationState = USH_USR_FS_FileSearch;
    371          			}
    372          		}
    373          
    374          		break;
    375          		case USH_USR_FS_FileSearch:
    376          		{
    377          			pUSBFSE_Object->fileSearchTask();
    378                  
    379                              if(pUSBFSE_Object->isSearchDone() == TRUE)
    380                              {
    381                                  USBH_USR_ApplicationState = USH_USR_FS_PLAY;
    382                              }
    383          		}
    384          		break;
    385          		case USH_USR_FS_PLAY:
    386          		{	
    387          		      pUSBMedia_ObjCtrl->mediaManagerTask();
    388          		}
    389          			break;
    390          	}
    391              #else
    392                  pUSBMedia_ObjCtrl->mediaManagerTask();
    393              #endif
    394          	return(USBH_OK);
    395          
    396          	
    397          }
    398          
    399          /**
    400          * @brief  Explore_Disk 
    401          *         Displays disk content
    402          * @param  path: pointer to root path
    403          * @retval None
    404          */
    405          #if 0
    406          static uint8_t Explore_Disk (char* path , uint8_t recu_level)
    407          {
    408          
    409            FRESULT res;
    410            FILINFO fno;
    411            DIR dir;
    412            char *fn;
    413            char tmp[14];
    414            
    415            res = f_opendir(&dir, path);
    416            if (res == FR_OK) {
    417              while(HCD_IsDeviceConnected(&USB_OTG_Core)) 
    418              {
    419                res = f_readdir(&dir, &fno);
    420                if (res != FR_OK || fno.fname[0] == 0) 
    421                {
    422                  break;
    423                }
    424                if (fno.fname[0] == '.')
    425                {
    426                  continue;
    427                }
    428          
    429                fn = fno.fname;
    430                strcpy(tmp, fn); 
    431          
    432                line_idx++;
    433                if(line_idx > 9)
    434                {
    435                  line_idx = 0;
    436                  LCD_SetTextColor(Green);
    437                  LCD_DisplayStringLine( LCD_PIXEL_HEIGHT - 42, "                                              ");
    438                  LCD_DisplayStringLine( LCD_PIXEL_HEIGHT - 30, "Press Key to continue...");
    439                  LCD_SetTextColor(LCD_LOG_DEFAULT_COLOR); 
    440                  
    441                  /*Key B3 in polling*/
    442                  while((HCD_IsDeviceConnected(&USB_OTG_Core)) && \
    443                    (STM_EVAL_PBGetState (BUTTON_KEY) == SET))
    444                  {
    445                    Toggle_Leds();
    446                    
    447                  }
    448                } 
    449                
    450                if(recu_level == 1)
    451                {
    452                  LCD_DbgLog("   |__");
    453                }
    454                else if(recu_level == 2)
    455                {
    456                  LCD_DbgLog("   |   |__");
    457                }
    458                if((fno.fattrib & AM_MASK) == AM_DIR)
    459                {
    460                  strcat(tmp, "\n"); 
    461                  LCD_UsrLog((void *)tmp);
    462                }
    463                else
    464                {
    465                  strcat(tmp, "\n"); 
    466                  LCD_DbgLog((void *)tmp);
    467                }
    468          
    469                if(((fno.fattrib & AM_MASK) == AM_DIR)&&(recu_level == 1))
    470                {
    471                  Explore_Disk(fn, 2);
    472                }
    473              }
    474            }
    475            return res;
    476          }
    477          
    478          static uint8_t Image_Browser (char* path)
    479          {
    480            FRESULT res;
    481            uint8_t ret = 1;
    482            FILINFO fno;
    483            DIR dir;
    484            char *fn;
    485            
    486            res = f_opendir(&dir, path);
    487            if (res == FR_OK) {
    488              
    489              for (;;) {
    490                res = f_readdir(&dir, &fno);
    491                if (res != FR_OK || fno.fname[0] == 0) break;
    492                if (fno.fname[0] == '.') continue;
    493          
    494                fn = fno.fname;
    495           
    496                if (fno.fattrib & AM_DIR) 
    497                {
    498                  continue;
    499                } 
    500                else 
    501                {
    502                  if((strstr(fn, "bmp")) || (strstr(fn, "BMP")))
    503                  {
    504                    res = f_open(&file, fn, FA_OPEN_EXISTING | FA_READ);
    505                    Show_Image();
    506                    USB_OTG_BSP_mDelay(100);
    507                    ret = 0;
    508                    while((HCD_IsDeviceConnected(&USB_OTG_Core)) && \
    509                      (STM_EVAL_PBGetState (BUTTON_KEY) == SET))
    510                    {
    511                      Toggle_Leds();
    512                    }
    513                    f_close(&file);
    514                    
    515                  }
    516                }
    517              }  
    518            }
    519            
    520            #ifdef USE_USB_OTG_HS 
    521            LCD_LOG_SetHeader(" USB OTG HS MSC Host");
    522          #else
    523            LCD_LOG_SetHeader(" USB OTG FS MSC Host");
    524          #endif
    525            LCD_LOG_SetFooter ("     USB Host Library v2.1.0" );
    526            LCD_UsrLog("> Disk capacity : %d Bytes\n", USBH_MSC_Param.MSCapacity * \
    527                USBH_MSC_Param.MSPageLength); 
    528            USBH_USR_ApplicationState = USH_USR_FS_READLIST;
    529            return ret;
    530          }
    531          
    532          /**
    533          * @brief  Show_Image 
    534          *         Displays BMP image
    535          * @param  None
    536          * @retval None
    537          */
    538          static void Show_Image(void)
    539          {
    540            
    541            uint16_t i = 0;
    542            uint16_t numOfReadBytes = 0;
    543            FRESULT res; 
    544            
    545            LCD_SetDisplayWindow(239, 319, 240, 320);
    546            LCD_WriteReg(R3, 0x1008);
    547            LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    548            
    549            /* Bypass Bitmap header */ 
    550            f_lseek (&file, 54);
    551            
    552            while (HCD_IsDeviceConnected(&USB_OTG_Core))
    553            {
    554              res = f_read(&file, Image_Buf, IMAGE_BUFFER_SIZE, (void *)&numOfReadBytes);
    555              if((numOfReadBytes == 0) || (res != FR_OK)) /*EOF or Error*/
    556              {
    557                break; 
    558              }
    559              for(i = 0 ; i < IMAGE_BUFFER_SIZE; i+= 2)
    560              {
    561                LCD_WriteRAM(Image_Buf[i+1] << 8 | Image_Buf[i]); 
    562              } 
    563            }
    564            
    565          }
    566          
    567          /**
    568          * @brief  Toggle_Leds
    569          *         Toggle leds to shows user input state
    570          * @param  None
    571          * @retval None
    572          */
    573          static void Toggle_Leds(void)
    574          {
    575            static uint32_t i;
    576            if (i++ == 0x10000)
    577            {
    578              STM_EVAL_LEDToggle(LED1);
    579              STM_EVAL_LEDToggle(LED2);
    580              STM_EVAL_LEDToggle(LED3);
    581              STM_EVAL_LEDToggle(LED4);
    582              i = 0;
    583            }  
    584          }
    585          #endif
    586          /**
    587          * @brief  USBH_USR_DeInit
    588          *         Deint User state and associated variables
    589          * @param  None
    590          * @retval None
    591          */
    592          void USBH_USR_DeInit(void)
    593          {
    594              USBH_USR_ApplicationState = USH_USR_FS_INIT;
    595              bUsbMount = 0;
    596              
    597              pUSBFSE_Object->init();
    598              pUSB_MMP_ObjCtrl->init();
    599          }
    600          
    601          uint8_t USBH_USR_SelectControlMenu(void)
    602          {
    603          	uint8_t status = DEVICE_DISCONNECT;
    604          
    605          	if (HCD_IsDeviceConnected(&USB_OTG_Core) == 0)
    606          	{
    607          		status = DEVICE_DISCONNECT;
    608          		return status;
    609          	}
    610          
    611          	status = NEXT_DOWNLOAD;
    612          
    613          	/* 0.8 seconds delay */
    614          	USB_OTG_BSP_mDelay(800);
    615          
    616          	return status;
    617          }
    618          
    619          uint32_t USBH_IsDeviceConnect( void )
    620          {
    621          	return HCD_IsDeviceConnected(&USB_OTG_Core);
    622          }
    623          
    624          uint8_t USBH_isDeviceMount( void )
    625          {
    626          	return bUsbMount;
    627          
    628          }
    629          
    630          uint8_t USBH_UnMount(void){
    631          	if(f_mount( 0, NULL ) == FR_OK ){
    632          		bUsbMount = 0;
    633          	}
    634          	return bUsbMount;
    635          }
    636          uint8_t USBH_Mount(void){
    637          	if(f_mount( 0, &fatfs ) == FR_OK ){
    638          		bUsbMount = 1;
    639          	} 
    640          	return bUsbMount;
    641          }
    642          
    643          void USBH_Set_USB_Ever_UnMount_State(void){
    644          	USB_Ever_UnMount = 1;
    645          }
    646          
    647          void USBH_ReSet_USB_Ever_UnMount_State(void){
    648          	USB_Ever_UnMount = 0;
    649          }
    650          
    651          int USBH_Get_USB_Ever_UnMount_State(void){
    652          	return USB_Ever_UnMount;
    653          }
    654          
    655          /**
    656          * @}
    657          */ 
    658          
    659          /**
    660          * @}
    661          */ 
    662          
    663          /**
    664          * @}
    665          */
    666          
    667          /**
    668          * @}
    669          */
    670          
    671          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    672          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  USBH_Get_USB_Ever_UnMount_State
        0  USBH_IsDeviceConnect
              0 -> HCD_IsDeviceConnected
        8  USBH_Mount
              8 -> f_mount
        0  USBH_ReSet_USB_Ever_UnMount_State
        0  USBH_Set_USB_Ever_UnMount_State
        0  USBH_USR_Configuration_DescAvailable
        8  USBH_USR_DeInit
              0 -- Indirect call
              8 -- Indirect call
        0  USBH_USR_DeviceAddressAssigned
        0  USBH_USR_DeviceAttached
        8  USBH_USR_DeviceDisconnected
              0 -- Indirect call
              8 -- Indirect call
              8 -> f_mount
        0  USBH_USR_DeviceNotSupported
        0  USBH_USR_DeviceSpeedDetected
        0  USBH_USR_Device_DescAvailable
        0  USBH_USR_EnumerationDone
        0  USBH_USR_IAPInit
        0  USBH_USR_Init
       16  USBH_USR_MSC_Application
             16 -- Indirect call
             16 -> f_mount
        0  USBH_USR_Manufacturer_String
        0  USBH_USR_OverCurrentDetected
        0  USBH_USR_Product_String
        0  USBH_USR_ResetDevice
        8  USBH_USR_SelectControlMenu
              8 -> HCD_IsDeviceConnected
              8 -> USB_OTG_BSP_mDelay
        0  USBH_USR_SerialNum_String
        0  USBH_USR_UnrecoveredError
        0  USBH_USR_UserInput
        8  USBH_UnMount
              8 -> f_mount
        0  USBH_isDeviceMount


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       6  ?Subroutine0
       8  ?Subroutine1
       8  ?Subroutine2
       6  USBH_Get_USB_Ever_UnMount_State
       6  USBH_IsDeviceConnect
      24  USBH_Mount
       8  USBH_ReSet_USB_Ever_UnMount_State
       8  USBH_Set_USB_Ever_UnMount_State
       2  USBH_USR_Configuration_DescAvailable
      20  USBH_USR_DeInit
       2  USBH_USR_DeviceAddressAssigned
       2  USBH_USR_DeviceAttached
      32  USBH_USR_DeviceDisconnected
       2  USBH_USR_DeviceNotSupported
       2  USBH_USR_DeviceSpeedDetected
       2  USBH_USR_Device_DescAvailable
       2  USBH_USR_EnumerationDone
       2  USBH_USR_IAPInit
       8  USBH_USR_Init
      78  USBH_USR_MSC_Application
       2  USBH_USR_Manufacturer_String
       2  USBH_USR_OverCurrentDetected
       2  USBH_USR_Product_String
       2  USBH_USR_ResetDevice
      26  USBH_USR_SelectControlMenu
       2  USBH_USR_SerialNum_String
       2  USBH_USR_UnrecoveredError
       4  USBH_USR_UserInput
      16  USBH_UnMount
       6  USBH_isDeviceMount
      72  USR_USBH_MSC_cb
    1080  bUsbMount
          USBH_USR_ApplicationState
          USB_Ever_UnMount
          fatfs
     692  efs
      80  fileR
      52  list

 
 1 904 bytes in section .bss
    72 bytes in section .data
   312 bytes in section .text
 
   312 bytes of CODE memory
 1 976 bytes of DATA memory

Errors: none
Warnings: 1

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:25:25 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\APP_SRC\Managers\AudioDeviceManager.c #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\APP_SRC\Managers\AudioDeviceManager.c #
#                     -D S4051A -D DEBUG -D FREE_RTOS -D STM32F40_41xxx -D    #
#                    USE_STM324xG_EVAL -D USE_STDPERIPH_DRIVER -D             #
#                    __ARM_CORTEX_MX__ -D IAR_ARM_CM4F -D USE_USB_OTG_FS      #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applicati #
#                    on\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Ap #
#                    plication\Obj\ --debug --endian=little --cpu=Cortex-M4   #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\AudioDeviceManager.lst                                #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\AudioDeviceManager.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Projects\S4051A\APP_SRC\Managers\AudioDeviceManager.c
      1          #include "Debug.h"
      2          #include "freertos_conf.h"
      3          #include "freertos_task.h"
      4          #include "freertos_typedef.h"
      5          #include "device_config.h"
      6          #include "audio_gain_parameters.h"
      7          #include "GPIOMiddleLevel.h"
      8          #include "AmplifierDeviceManager.h"
      9          #include "AudioDeviceManager.h"
     10          #include "UIDeviceManager.h"
     11          #include "HdmiDeviceManager.h"
     12          #include "BTHandler.h"
     13          
     14          //______________________________________________________________________________
     15          #define ADM_SIGNAL_DETECTOR_TIME_TICK TASK_MSEC2TICKS(500)
     16          #define ADM_DIGITAL_DETECTOR_TIME_TICK TASK_MSEC2TICKS(50)
     17          #define ADC_PATH_AUX1 4
     18          #define ADC_PATH_AUX2 5
     19          #define ADC_PATH_BT 0
     20          #define ADC_PATH_USB 2
     21          #define SRC_PATH_DITIGITAL1 1
     22          #define SRC_PATH_DITIGITAL2 2
     23          #define SRC_PATH_DITIGITAL3 3
     24          
     25          #define MAX_VOL 35
     26          
     27          #define AUDIO_DEV_BACKCTL_QUEUE_LENGTH 8
     28          #define AUDIO_DEV_EXCEPTION_QUEUE_LENGTH 2
     29          //______________________________________________________________________________
     30          typedef enum 
     31          {
     32              VRE_RAMP_IDLE = 0,
     33              VRE_SET_VOL,
     34              VRE_NON_RAMP_MUTE_LOCK,  //mute a little time for fixing channel check pop sound
     35              VRE_RAMP_WAIT_SIGNAL,
     36              VRE_RAMP_WAIT_BT_CONNECT,
     37              VRE_RAMP_MUTE_LOCK,
     38              VRE_RAMP_INITIAL,
     39              VRE_RAMP_START,
     40              VRE_RAMP_HOLD,
     41              VRE_RAMP_END,
     42          }xVolumeRampEvents;
     43          
     44          #if ( configSII_DEV_953x_PORTING == 1 )
     45          typedef enum 
     46          {
     47              HDMI_NON_PCM = 0,
     48              HDMI_PCM_STEREO,
     49              HDMI_PCM_MULTI_48K,
     50              HDMI_PCM_MULTI_96K,
     51          }xHDMIAudiotype;
     52          #endif
     53          
     54          typedef struct AUDIO_MANAGER_PARAMETERS 
     55          {
     56              xTaskHandle VolTaskHandle;
     57              xTaskHandle signal_detector_handle;
     58              xTaskHandle Digital_detector_handle; 
     59              xTaskHandle Audio_Exception_handle;
     60              xTaskHandle BackCtrlTaskHandle;
     61              xSemaphoreParameters ADM_I2C2_sema;
     62              xSemaphoreParameters ADM_Call_Back_sema;
     63              TaskHandleState Vol_state;
     64          } xOS_ADM_Params;
     65          
     66          /* For Back control*/
     67          typedef struct AUDIO_DEV_BACKCTL_HANDLE_PARAMETERS
     68          {
     69              TaskHandleState taskState;
     70              xQueueParameters QParams;
     71          } xAudDevBackCtlHandleParams;
     72          
     73          static xAudDevBackCtlHandleParams AudioDevBackCtlParams;
     74          
     75          /* For Exception*/
     76          typedef struct AUDIO_DEV_EXCEPTION_HANDLE_PARAMETERS
     77          {
     78              TaskHandleState taskState;
     79              xQueueParameters QParams;
     80          } xAudExceptionHandleParams;
     81          
     82          static xAudExceptionHandleParams AudioDevExceptParams;
     83          //______________________________________________________________________________
     84          //static variable
     85          static xAudDeviceParms mAudDevParms = 
     86          {
     87              DEFAULT_INPUT_SRC,
     88              DEFAULT_MUTE_STATE, /*mute*/
     89              DEFAULT_MASTER_GAIN, /*master gain*/
     90              DEFAULT_BASS_GAIN,    /*bass gain*/
     91              DEFAULT_TREBLE_GAIN,    /*treble gain*/
     92              DEFAULT_SUB_GAIN,    /*sub gain*/
     93              DEFAULT_CENTER_GAIN,    /*center gain*/
     94              DEFAULT_BALANCE,    /*balance*/
     95              DEFAULT_SRS_TRUVOL,    /*srs truvol*/
     96              DEFAULT_SRS_TSHD,    /*srs tshd*/
     97              DEFAULT_NIGHT_MODE,    /*night mode*/
     98              DEFAULT_AV_DELAY,    /*av delay*/
     99          };
    100          /*read only for this parameters*/
    101          const xAudDeviceParms *pAudioDevParms = &mAudDevParms;
    102          
    103          static xVolumeRampEvents mVolumeRampEvent = VRE_RAMP_IDLE;
    104          static bool mIsPCM96Khz = FALSE;
    105          static bool mIsPCM = FALSE;
    106          static xOS_ADM_Params xOS_ADM_Parms;
    107          static uint8 SignalAvailable = 0;
    108          static uint8 ramp_delay = 0;
    109          static uint16 vre_ramp_count = 0;
    110          static bool format_indicator = 0;
    111          static CS49844LoadAudioStreamType CurrentAudioStream;
    112          static uint8 volume_inc = 0;
    113          static uint8 target_volume = 0;
    114          //_________________________________________________________________________________
    115          //static api header
    116          static void AudioDeviceManager_CreateTask( void );
    117          
    118          static void AudioDeviceManager_Initialize( void *parms );
    119          
    120          static void AudioDeviceManager_DeviceConfig( void *parms );
    121          
    122          static void AudioDeviceManager_DeInitialize( void );
    123          
    124          static xAudDeviceParms AudioDeviceManager_getAudParams( void );
    125          
    126          /* Volume control*/
    127          void AuidoDeviceManager_VolController_task( void *pvParameters );
    128          
    129          static void AuidoDeviceManager_VolController_CreateTask( void );
    130          
    131          static void AuidoDeviceManager_VolController_setEvent(void *parms );
    132          
    133          static void AuidoDeviceManager_VolController_TaskCtrl( bool val );
    134          
    135          /* Set paramaters */
    136          static void AudioDeviceManager_setInputPath( AUDIO_SOURCE idx );
    137          
    138          static void AuidoDeviceManager_setBass( uint8 idx );
    139          
    140          static void AuidoDeviceManager_setTreble( uint8 idx );
    141          
    142          static void AuidoDeviceManager_setSub( uint8 idx );
    143          
    144          static void AuidoDeviceManager_setCenter( uint8 idx );
    145          
    146          static void AuidoDeviceManager_setLsRs( uint8 idx );
    147          
    148          static void AuidoDeviceManager_setBalance( uint8 idx );
    149          
    150          static void AuidoDeviceManager_setSRSTruVolTSHD( void *parms );
    151          
    152          static void AuidoDeviceManager_setNightMode( bool idx );
    153          
    154          static void AuidoDeviceManager_setAVDelay( uint8 idx );
    155          
    156          static void AuidoDeviceManager_Factory_AQBypass( bool EQ );
    157          
    158          static void AuidoDeviceManager_Route_Ctrl(AudioRouteCtrl router_idx);
    159          /* Digital Detect */
    160          static void AuidoDeviceManager_DigitalDetector_CreateTask( void );
    161          
    162          static void AudioDeviceManager_DigitalDetector_TaskCtrl( bool val );
    163          
    164          bool AudioStream_get_PCM96Khz( void );
    165          
    166          void AudioStream_set_PCM96Khz( bool bValue );
    167          
    168          bool AudioStream_get_PCM( void );
    169          
    170          void AudioStream_set_PCM( bool bValue );
    171          
    172          bool AudioSystem_isPCM_96Khz( bool bReboot );
    173          
    174          void AudioSystem_Cover_PCM96Khz( void );
    175          
    176          /* Signal Detect*/
    177          static void AuidoDeviceManager_SignalDetector_CreateTask( void );
    178          
    179          static void AudioDeviceManager_SignalDetector_TaskCtrl( bool val );
    180          
    181          static uint8 AudioDeviceManager_getSignalAvailable( void );
    182          
    183          //______________________________________________________________________________
    184          /*LOW LEVEL*/
    185          static void AudioDeviceManager_lowlevel_setMute( bool idx );
    186          
    187          static void AuidoDeviceManager_lowlevel_setMasterGain( uint8 idx );
    188          
    189          static void AuidoDeviceManager_lowlevel_setBassGain( uint8 idx );
    190          
    191          static void AudioDeviceManager_lowlevel_AudParmsConfig( void *parms );
    192          
    193          static void AudioDeviceManager_lowlevel_rstSRC( void );
    194          
    195          static void AuidoDeviceManager_lowlevel_VolController_setEvent( xADMVolEvents parms );
    196          
    197          static bool AuidoDeviceManager_VolController_RampStauts(void);
    198          
    199          static uint8 AuidoDeviceManager_VolController_VolStauts(void);
    200          
    201          static uint8 AuidoDeviceManager_VolController_TargetVol(void);
    202          
    203          static void AudioDeviceManager_lowlevel_setInputPath( AUDIO_SOURCE idx );
    204          
    205          static void AuidoDeviceManager_lowlevel_setLsRs( uint8 idx );
    206          
    207          static uint8 AuidoDeviceManager_lowlevel_getAudioStreamType( void );
    208          
    209          /* Mutex */
    210          static bool ADM_I2C2_sema_mutex_take( void );
    211          
    212          static bool ADM_I2C2_sema_mutex_give( void );
    213          
    214          static bool ADM_Call_Back_sema_mutex_take( void );
    215          
    216          static bool ADM_Call_Back_sema_mutex_give( void );
    217          
    218          /* Exception */
    219          static void AuidoDeviceManager_lowlevel_Exception_CreateTask( void );
    220          
    221          void AuidoDeviceManager_lowlevel_Exception_Task( void *pvParameters );
    222          
    223          static void AuidoDeviceManager_lowlevel_Exception_TaskCtrl( bool val);
    224          
    225          static bool AuidoDeviceManager_lowlevel_Exception_InstrSender( const void *params );
    226          
    227          /* Function Back */
    228          void AuidoDeviceManager_lowlevel_Function_Back_CreateTask( void );
    229          
    230          void AuidoDeviceManager_lowlevel_BackCtl_task( void *pvParameters );
    231          
    232          void AuidoDeviceManager_lowlevel_Function_Back_TaskCtrl( bool val);
    233          
    234          bool AuidoDeviceManager_lowlevel_Function_Back_InstrSender( const void *params );
    235          
    236          //______________________________________________________________________________
    237          extern DSP_CTRL_OBJECT *pDSP_ObjCtrl;
    238          extern SRC_CTRL_OBJECT *pSRC_ObjCtrl;
    239          extern ADC_CTRL_OBJECT *pADC_ObjCtrl;
    240          extern AMP_DEV_MANAGER_OBJECT *pAMP_DEV_ObjCtrl;
    241          extern UI_DEV_MANAGER_OBJECT *pUDM_ObjCtrl; 
    242          extern HDMI_DEVICE_MANAGER_OBJECT *pHDMI_DM_ObjCtrl;
    243          extern BT_HANDLE_OBJECT *pBTHandle_ObjCtrl;
    244          
    245          const AUDIO_DEVICE_MANAGER_OBJECT AudioDeviceManager =
    246          {
    247              AudioDeviceManager_CreateTask,
    248              AudioDeviceManager_Initialize,
    249              AudioDeviceManager_DeInitialize,
    250              AudioDeviceManager_DeviceConfig,
    251              AudioDeviceManager_getAudParams,
    252              AudioDeviceManager_setInputPath,
    253              AuidoDeviceManager_VolController_CreateTask,
    254              AuidoDeviceManager_VolController_setEvent,
    255              AuidoDeviceManager_VolController_RampStauts,
    256              AuidoDeviceManager_VolController_VolStauts,
    257              AuidoDeviceManager_VolController_TargetVol,
    258              AuidoDeviceManager_VolController_TaskCtrl,
    259              AuidoDeviceManager_setBass,
    260              AuidoDeviceManager_setTreble,
    261              AuidoDeviceManager_setSub,
    262              AuidoDeviceManager_setCenter,
    263              AuidoDeviceManager_setLsRs,
    264              AuidoDeviceManager_setBalance,
    265              AuidoDeviceManager_setSRSTruVolTSHD,
    266              AuidoDeviceManager_setNightMode,
    267              AuidoDeviceManager_setAVDelay,
    268              AuidoDeviceManager_Factory_AQBypass,
    269              AudioDeviceManager_getSignalAvailable,    
    270              AuidoDeviceManager_Route_Ctrl
    271          };
    272          const AUDIO_DEVICE_MANAGER_OBJECT *pADM_ObjCtrl = &AudioDeviceManager;
    273          
    274          /*for cs8422 and cs495314 function call*/
    275          const AUDIO_LOWLEVEL_DRIVER_OBJECT AudioLowLeveDriver =
    276          {
    277              AudioDeviceManager_lowlevel_AudParmsConfig,
    278              AudioDeviceManager_lowlevel_rstSRC,
    279              AuidoDeviceManager_lowlevel_VolController_setEvent,
    280              AuidoDeviceManager_lowlevel_setLsRs,
    281              AuidoDeviceManager_lowlevel_getAudioStreamType,
    282              /* for exception control */
    283              AuidoDeviceManager_lowlevel_Exception_CreateTask,
    284              AuidoDeviceManager_lowlevel_Exception_TaskCtrl,
    285              AuidoDeviceManager_lowlevel_Exception_InstrSender,
    286              /* For function back*/
    287              AuidoDeviceManager_lowlevel_Function_Back_CreateTask,
    288              AuidoDeviceManager_lowlevel_Function_Back_TaskCtrl,
    289              AuidoDeviceManager_lowlevel_Function_Back_InstrSender
    290          };
    291          const AUDIO_LOWLEVEL_DRIVER_OBJECT *pAudLowLevel_ObjCtrl = &AudioLowLeveDriver;
    292          
    293          //______________________________________________________________________________
    294          static void AudioDeviceManager_CreateTask( void )
    295          {
    296              pDSP_ObjCtrl->loader_create_task();
    297              pDSP_ObjCtrl->fch_create_task();
    298              pDSP_ObjCtrl->lowlevel_create_task();
    299              pADM_ObjCtrl->CreateVolTask();
    300              pAudLowLevel_ObjCtrl->CreateBackCtrlTask();
    301              pAudLowLevel_ObjCtrl->CreateExceptionTask();
    302              AuidoDeviceManager_SignalDetector_CreateTask();
    303          
    304              AuidoDeviceManager_DigitalDetector_CreateTask();
    305          
    306              xOS_ADM_Parms.ADM_I2C2_sema.xSemaphore = xSemaphoreCreateMutex();
    307             
    308              xOS_ADM_Parms.ADM_I2C2_sema.xBlockTime = portMAX_DELAY;
    309          
    310              xOS_ADM_Parms.ADM_Call_Back_sema.xSemaphore = xSemaphoreCreateMutex();
    311          
    312              xOS_ADM_Parms.ADM_Call_Back_sema.xBlockTime = portMAX_DELAY;
    313          
    314          }
    315          
    316          static xAudDeviceParms AudioDeviceManager_getAudParams( void )
    317          {
    318              return *pAudioDevParms;
    319          }
    320          
    321          static void AudioDeviceManager_setInputPath( AUDIO_SOURCE idx )
    322          {
    323              CS49844_QUEUE_TYPE QUEUE_TYPE;
    324          
    325              QUEUE_TYPE.audio_type = CS49844_LOAD_PCM;
    326            
    327              //TRACE_DEBUG((0,"AudioDeviceManager_setInputPath"));
    328              mAudDevParms.input_src = idx;
    329          
    330          #if ( configSTM32F411_PORTING == 0 )
    331                      GPIOMiddleLevel_Set(__O_CLK_SEL);
    332                          pADC_ObjCtrl->input_path( ADC_PATH_AUX1 );
    333                          pADC_ObjCtrl->input_gain( 0x3D, 0x3D ); // -1.5db
    334                          pAudLowLevel_ObjCtrl->RstSRC();  
    335          #endif
    336          
    337              
    338          #if ( configSTM32F411_PORTING == 1 )   
    339              AuidoDeviceManager_lowlevel_VolController_setEvent(AUD_VOL_EVENT_SET_MUTE);
    340            
    341              if (ADM_I2C2_sema_mutex_take() == TRUE )
    342              {    
    343                  pDSP_ObjCtrl->fch_task_ctrl( xOS_setTASK_SUSPENDED );
    344                  pDSP_ObjCtrl->lowlevel_task_ctrl( xOS_setTASK_SUSPENDED );
    345                  AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_SUSPENDED );
    346          
    347                  pSRC_ObjCtrl->isr_ctrl( FUNC_DISABLE );
    348                  switch( idx )
    349                  {
    350                      case AUDIO_SOURCE_AUX1:
    351                      {
    352                          pADC_ObjCtrl->input_path( ADC_PATH_AUX1 );
    353                          pADC_ObjCtrl->input_gain( 0x3D, 0x3D ); // -1.5db
    354                          pAudLowLevel_ObjCtrl->RstSRC();  
    355                          pDSP_ObjCtrl->lowlevel_task_set_state( TASK_RUNING );
    356                          /*initiate cs495xx dsp*/
    357                          QUEUE_TYPE.audio_type = CS49844_LOAD_PCM;
    358                          QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    359                          
    360                          if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    361                          {
    362                              pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    363                          }                
    364                      }
    365                          break;
    366          
    367                      case AUDIO_SOURCE_AUX2:
    368                      {
    369                          pADC_ObjCtrl->input_path( ADC_PATH_AUX2 );
    370                          pADC_ObjCtrl->input_gain( 0x3D, 0x3D ); // -1.5db
    371                          
    372                          pAudLowLevel_ObjCtrl->RstSRC();
    373          
    374                          pDSP_ObjCtrl->lowlevel_task_set_state( TASK_RUNING );
    375                          QUEUE_TYPE.audio_type = CS49844_LOAD_PCM;
    376                          QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    377          
    378                          if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    379                          {
    380                              pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    381                          }
    382                      }
    383                          break;
    384          
    385                      case AUDIO_SOURCE_COAXIAL:
    386                      {
    387                          AudioDeviceManager_DigitalDetector_TaskCtrl( BTASK_SUSPENDED );
    388                          pDSP_ObjCtrl->lowlevel_task_set_state( TASK_SUSPENDED);
    389          
    390                          QUEUE_TYPE.audio_type = CS49844_LOAD_USER_CTRL;
    391                          QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    392          
    393                          if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    394                          {
    395                              pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    396                          }
    397                          
    398                      }
    399                          break;
    400          
    401                      case AUDIO_SOURCE_OPTICAL:
    402                      {
    403                          AudioDeviceManager_DigitalDetector_TaskCtrl( BTASK_SUSPENDED );
    404                          pDSP_ObjCtrl->lowlevel_task_set_state( TASK_SUSPENDED);
    405                          pAudLowLevel_ObjCtrl->RstSRC();
    406          
    407                          QUEUE_TYPE.audio_type = CS49844_LOAD_USER_CTRL;
    408                          QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    409          
    410                          if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    411                          {
    412                              pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    413                          }
    414                      }
    415                          break;
    416          
    417                      case AUDIO_SOURCE_HDMI_IN:
    418                      case AUDIO_SOURCE_HDMI_ARC:
    419                      {
    420                           AudioDeviceManager_DigitalDetector_TaskCtrl( BTASK_SUSPENDED );
    421                          pDSP_ObjCtrl->lowlevel_task_set_state( TASK_SUSPENDED);
    422                          pAudLowLevel_ObjCtrl->RstSRC();
    423          
    424                          QUEUE_TYPE.audio_type = CS49844_LOAD_USER_CTRL;
    425                          QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    426          
    427                          if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    428                          {
    429                              pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    430                          }
    431                      }
    432                          break;    
    433          
    434                      case AUDIO_SOURCE_USB_PLAYBACK:
    435                      {
    436                          pADC_ObjCtrl->input_path( ADC_PATH_USB );
    437                          pADC_ObjCtrl->input_gain( 0x3a, 0x3a ); // -3db
    438                          pAudLowLevel_ObjCtrl->RstSRC();
    439          
    440                          pDSP_ObjCtrl->lowlevel_task_set_state( TASK_RUNING );    
    441                          /*initiate cs495xx dsp*/
    442                          QUEUE_TYPE.audio_type = CS49844_LOAD_PCM;
    443                          QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    444                          
    445                          if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    446                          {
    447                              pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    448                          }
    449                      }
    450                      break;
    451                      
    452                      case AUDIO_SOURCE_BLUETOOTH:
    453                      {
    454                          pADC_ObjCtrl->input_path( ADC_PATH_BT );
    455                          pADC_ObjCtrl->input_gain( 0x10, 0x10 ); // 8db
    456                          pAudLowLevel_ObjCtrl->RstSRC();
    457          
    458                          pDSP_ObjCtrl->lowlevel_task_set_state( TASK_RUNING );
    459                          /*initiate cs495xx dsp*/
    460                          QUEUE_TYPE.audio_type = CS49844_LOAD_PCM;
    461                          QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    462          
    463                          if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    464                          {
    465                              pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    466                          }
    467                      }
    468                      break;
    469                  }
    470                  ADM_I2C2_sema_mutex_give();
    471              }
    472          #endif  
    473              TRACE_DEBUG((0, "input path = %d", idx ));
    474          }
    475          
    476          void AuidoDeviceManager_setBass( uint8 idx )
    477          {
    478              pDSP_ObjCtrl->setBassGain(Bass_table[idx]);
    479              mAudDevParms.bass_gain = idx;
    480              TRACE_DEBUG((0, "BASS Gain = %d",  mAudDevParms.bass_gain));
    481          }
    482          
    483          void AuidoDeviceManager_setTreble( uint8 idx )
    484          {
    485              pDSP_ObjCtrl->setTrebleGain(Treb_table[idx]);
    486              mAudDevParms.treble_gain = idx;
    487              TRACE_DEBUG((0, "TREBLE Gain = %d",  mAudDevParms.treble_gain));
    488          }
    489          
    490          void AuidoDeviceManager_setSub( uint8 idx )
    491          {
    492              uint8 ASTIndex;
    493          
    494              ASTIndex = pDSP_ObjCtrl->GetAudioStreamType();
    495              
    496              switch ( ASTIndex )
    497              {
    498              case CS49844_LOAD_PCM:
    499              {
    500                  if ( pAudioDevParms->srs_tshd == 1 )    //Surround on
    501                  {
    502                      pDSP_ObjCtrl->setSubGain(SUB_PCM51_GAIN[idx]);
    503                  }
    504                  else    //Surround off
    505                  {
    506                      pDSP_ObjCtrl->setSubGain(SUB_PCM21_GAIN[idx]);
    507                  }
    508              }
    509                  break;
    510          
    511              case CS49844_LOAD_AC3:
    512              {
    513                  if ( pAudioDevParms->srs_tshd == 1 )    //Surround on
    514                  {
    515                      pDSP_ObjCtrl->setSubGain(SUB_AC351_GAIN[idx]);
    516                  }
    517                  else    //Surround off
    518                  {
    519                      pDSP_ObjCtrl->setSubGain(SUB_AC321_GAIN[idx]);
    520                  }
    521              }
    522                  break;
    523          
    524              case CS49844_LOAD_DTS:
    525              {
    526                  if ( pAudioDevParms->srs_tshd == 1 )    //Surround on
    527                  {
    528                      pDSP_ObjCtrl->setSubGain(SUB_DTS51_GAIN[idx]);
    529                  }
    530                  else    //Surround off
    531                  {
    532                      pDSP_ObjCtrl->setSubGain(SUB_DTS21_GAIN[idx]);
    533                  }
    534              }
    535                  break;
    536          
    537              default:
    538              {
    539                  pDSP_ObjCtrl->setSubGain(SUB_PCM51_GAIN[idx]);
    540              }
    541                  break;
    542          
    543              }
    544              mAudDevParms.sub_gain= idx;
    545              TRACE_DEBUG((0, "Sub Gain = %d",  mAudDevParms.sub_gain));
    546          }
    547          
    548          void AuidoDeviceManager_setCenter( uint8 idx )
    549          {
    550              pDSP_ObjCtrl->setCenterGain(CENTER_GAIN[idx]);
    551              mAudDevParms.center_gain= idx;
    552              TRACE_DEBUG((0, "Center Gain = %d",  mAudDevParms.center_gain));
    553          }
    554          
    555          void AuidoDeviceManager_setLsRs( uint8 idx )
    556          {
    557              const uint32 *pLsRs;
    558              uint8 ASTIndex;
    559          
    560              ASTIndex = pDSP_ObjCtrl->GetAudioStreamType();
    561          
    562              switch ( ASTIndex )
    563              {
    564                  case CS49844_LOAD_PCM:
    565                  {
    566                      pLsRs = LS_RS_PCM51_GAIN;
    567                  }
    568                      break;
    569                  
    570                  case CS49844_LOAD_AC3:
    571                  {
    572                      pLsRs = LS_RS_AC3_GAIN;
    573                  }
    574                      break;
    575                  
    576                  case CS49844_LOAD_DTS:
    577                  {
    578                      pLsRs = LS_RS_DTS_GAIN;
    579                  }
    580                      break;
    581                  
    582                  default:
    583                  {
    584                      pLsRs = LS_RS_PCM51_GAIN;
    585                  }
    586                      break;
    587                  
    588              }
    589              pDSP_ObjCtrl->setLsRsGain( *(pLsRs + idx) );
    590              mAudDevParms.LsRs_gain = idx;
    591              TRACE_DEBUG((0, "LsRs Gain = %d",  mAudDevParms.LsRs_gain));
    592          }
    593          
    594          void AuidoDeviceManager_setBalance( uint8 idx )
    595          {
    596              const uint32 *pBalance;
    597              uint8 ASTIndex;
    598          
    599              ASTIndex = pDSP_ObjCtrl->GetAudioStreamType();
    600          
    601              switch ( ASTIndex )
    602              {
    603              case CS49844_LOAD_PCM:
    604              {
    605                  pBalance = BALANCE_PCM_GAIN;
    606              }
    607                  break;
    608          
    609              case CS49844_LOAD_AC3:
    610              {
    611                  pBalance = BALANCE_AC3_GAIN;
    612              }
    613                  break;
    614          
    615              case CS49844_LOAD_DTS:
    616              {
    617                  pBalance = BALANCE_DTS_GAIN;
    618              }
    619                  break;
    620          
    621              default:
    622              {
    623                  pBalance = BALANCE_PCM_GAIN;
    624              }
    625                  break;
    626          
    627              }
    628              if ( idx> 6 )
    629              {
    630                  pDSP_ObjCtrl->setBalanceLs( *(pBalance + idx) );
    631              }
    632              else if ( idx < 6 )
    633              {
    634                  pDSP_ObjCtrl->setBalanceRs( *(pBalance + idx) );
    635              }
    636              else
    637              {
    638                  pDSP_ObjCtrl->setBalanceLs( *(pBalance + 6) );
    639                 pDSP_ObjCtrl->setBalanceRs( *(pBalance + 6) );
    640              }   
    641              mAudDevParms.balance= idx;
    642              TRACE_DEBUG((0, "BALANCE = %d",  mAudDevParms.balance));
    643          }
    644          
    645          void AuidoDeviceManager_setSRSTruVolTSHD( void *parms )
    646          {
    647              xAudDeviceParms* pParms = (xAudDeviceParms*)parms;
    648              CS49844_QUEUE_TYPE QUEUE_TYPE;
    649          
    650              mAudDevParms.srs_truvol= pParms->srs_truvol;
    651              mAudDevParms.srs_tshd= pParms->srs_tshd;
    652          
    653              if( pDSP_ObjCtrl->GetLoadrState() != 0 )    /*LOADER_IDLE*/
    654              {
    655                  return;
    656              }
    657          
    658              AudioDeviceManager_lowlevel_setMute( SOUND_MUTE ); 
    659          
    660              pDSP_ObjCtrl->fch_task_ctrl( xOS_setTASK_SUSPENDED );
    661              pDSP_ObjCtrl->lowlevel_task_ctrl( xOS_setTASK_SUSPENDED );
    662          
    663              /*initiate cs495xx dsp*/
    664              QUEUE_TYPE.audio_type = CS49844_LOAD_USER_CTRL;
    665              QUEUE_TYPE.source_ctrl = CS49844_SOURCE_PROCESS_MODE;
    666              QUEUE_TYPE.EQ = pAudioDevParms->EQ;
    667              QUEUE_TYPE.srs_tshd = pAudioDevParms->srs_tshd;
    668              QUEUE_TYPE.srs_truvol = pAudioDevParms->srs_truvol;
    669          
    670              if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    671              {
    672                  pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    673              }
    674              return;
    675          }
    676          
    677          void AuidoDeviceManager_setNightMode( uint8 idx )
    678          {
    679              if ( idx == TRUE)
    680              {
    681                  pDSP_ObjCtrl->setNightMode(SubWoofer_GAIN_14dB);
    682              }
    683              else
    684              {
    685                  pDSP_ObjCtrl->setNightMode(SubWoofer_GAIN_24dB);
    686              }
    687              
    688              mAudDevParms.night_mode= idx;
    689              TRACE_DEBUG((0, "Night Mode = %d",  mAudDevParms.night_mode));
    690          }
    691          
    692          void AuidoDeviceManager_setAVDelay( uint8 idx )
    693          {
    694                  pDSP_ObjCtrl->setAVDelay(idx);
    695                  mAudDevParms.av_delay= idx;
    696                  TRACE_DEBUG((0, "AV Delay = %d",  mAudDevParms.av_delay));
    697          }
    698          
    699          void AuidoDeviceManager_Factory_AQBypass( bool EQ )
    700          {
    701              if (pAudioDevParms->op_mode == MODE_FACTORY)
    702              {
    703                  if(EQ)
    704                  {
    705                      pDSP_ObjCtrl->SetTVHDMC_Ctrl((byte*)&PCM_51_DIS_BPS_PARMS, (sizeof(PCM_51_DIS_BPS_PARMS)/sizeof(uint8)) );
    706                      TRACE_DEBUG((0,"PCM_51_DIS_BPS_PARMS"));
    707                  }
    708                  else
    709                  {
    710                      pDSP_ObjCtrl->SetTVHDMC_Ctrl((byte*)&PCM_51_BPS_PARMS, (sizeof(PCM_51_BPS_PARMS)/sizeof(uint8)) );
    711                      TRACE_DEBUG((0,"PCM_51_BPS_PARMS"));
    712                  }
    713              }
    714          }
    715          
    716          void AudioDeviceManager_lowlevel_AudioRouter( AudioRouteCtrl idx )
    717          {
    718              switch( idx )
    719              {
    720                  case ROUTE_CTRL_INITIAL:
    721                      pDSP_ObjCtrl->setAudioRoute( ROUTE_INITIAL );
    722                      break;
    723          
    724                  case ROUTE_CTRL_FL_FR:
    725                      pDSP_ObjCtrl->setAudioRoute( ROUTE_FL_FR );
    726                      break;
    727          
    728                  case ROUTE_CTRL_RR_RL:
    729                      pDSP_ObjCtrl->setAudioRoute( ROUTE_RR_RL );
    730                      break;
    731                  case ROUTE_CTRL_CENTER:
    732                      pDSP_ObjCtrl->setAudioRoute( ROUTE_CENTER );
    733                      break;
    734                  case ROUTE_CTRL_LFE0:
    735                      pDSP_ObjCtrl->setAudioRoute( ROUTE_LFE0 );
    736                      break;
    737                  case ROUTE_CTRL_FL:
    738                      pDSP_ObjCtrl->setAudioRoute( ROUTE_FL );
    739                      break;
    740                  case ROUTE_CTRL_FR:
    741                      pDSP_ObjCtrl->setAudioRoute( ROUTE_FR );
    742                      break;
    743                  case ROUTE_CTRL_RR:
    744                      pDSP_ObjCtrl->setAudioRoute( ROUTE_RR );
    745                      break;
    746                  case ROUTE_CTRL_RL:
    747                      pDSP_ObjCtrl->setAudioRoute( ROUTE_RL );
    748                      break;
    749                  case ROUTE_CTRL_FL_FR_CENTER:
    750                      pDSP_ObjCtrl->setAudioRoute( ROUTE_FL_FR_CENTER );
    751                      break;
    752                  case ROUTE_CTRL_RR_RL_WOOFER:
    753                      pDSP_ObjCtrl->setAudioRoute( ROUTE_RR_RL_WOOFER );
    754                      break;
    755                  case ROUTE_CTRL_DISABLE:
    756                  default:    
    757                      pDSP_ObjCtrl->setAudioRoute( ROUTE_DISABLE );
    758                      break;
    759              }
    760          
    761          }
    762          
    763          void AuidoDeviceManager_Route_Ctrl(AudioRouteCtrl router_idx)
    764          {
    765              AudioDeviceManager_lowlevel_AudioRouter(router_idx);
    766          }
    767          
    768          void AudioDeviceManager_DeInitialize( void )
    769          {
    770              pDSP_ObjCtrl->loader_task_ctrl( xOS_setTASK_SUSPENDED );
    771              pDSP_ObjCtrl->fch_task_ctrl( xOS_setTASK_SUSPENDED );
    772              pDSP_ObjCtrl->lowlevel_task_ctrl( xOS_setTASK_SUSPENDED );
    773          
    774              pSRC_ObjCtrl->isr_ctrl( FUNC_DISABLE );
    775              pADM_ObjCtrl->VolTaskCtrl( BTASK_SUSPENDED );
    776              pAudLowLevel_ObjCtrl->ExceptionTaskCtrl( BTASK_SUSPENDED );
    777              pAudLowLevel_ObjCtrl->BackCtrlTaskCtrl(BTASK_SUSPENDED);
    778              AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_SUSPENDED );
    779              AudioDeviceManager_DigitalDetector_TaskCtrl( BTASK_SUSPENDED );
    780              ADM_I2C2_sema_mutex_give();
    781          }
    782          
    783          static void AudioDeviceManager_InitializeParams( const xAudDeviceParms *pParms )
    784          {
    785              /*initial audio parameters*/
    786              mAudDevParms.op_mode = pParms->op_mode;
    787              mAudDevParms.input_src = pParms->input_src;
    788              mAudDevParms.mute = pParms->mute;
    789              mAudDevParms.master_gain = pParms->master_gain;
    790              mAudDevParms.bass_gain = pParms->bass_gain;
    791              mAudDevParms.treble_gain = pParms->treble_gain;
    792              mAudDevParms.sub_gain = pParms->sub_gain;
    793              mAudDevParms.center_gain = pParms->center_gain;
    794              mAudDevParms.LsRs_gain = pParms->LsRs_gain;
    795              mAudDevParms.balance = pParms->balance;
    796              mAudDevParms.srs_truvol = pParms->srs_truvol;
    797              mAudDevParms.srs_tshd = pParms->srs_tshd;
    798              mAudDevParms.night_mode = pParms->night_mode;
    799              mAudDevParms.av_delay = pParms->av_delay;
    800              mAudDevParms.EQ = FALSE;
    801          }
    802          
    803          static void AudioDeviceManager_Initialize( void *parms )
    804          {
    805              CS49844_QUEUE_TYPE QUEUE_TYPE;
    806          
    807          
    808              xAudDeviceParms* pParms = (xAudDeviceParms*)parms;
    809          
    810              AudioDeviceManager_InitializeParams( pParms );
    811          #if ( configSTM32F411_PORTING == 1 )    
    812              pDSP_ObjCtrl->loader_task_ctrl( xOS_setTASK_RESUME ); 
    813          #endif
    814              if (ADM_I2C2_sema_mutex_take() == TRUE )
    815              {    
    816                  pSRC_ObjCtrl->initialize();
    817                  pAMP_DEV_ObjCtrl->initialize( );
    818                  pADC_ObjCtrl->initialize();
    819                  ADM_I2C2_sema_mutex_give();
    820              }
    821              pADM_ObjCtrl->SetInputPath(pAudioDevParms->input_src);
    822          #if ( configSTM32F411_PORTING == 1 )
    823          
    824              QUEUE_TYPE.audio_type = CS4953x_LOAD_PCM;
    825              QUEUE_TYPE.source_ctrl = CS4953x_SOURCE_DSP_INITIAL; /*Prevent two ramp when power on*/
    826              QUEUE_TYPE.op = pAudioDevParms->op_mode;
    827              QUEUE_TYPE.EQ = pAudioDevParms->EQ;
    828              QUEUE_TYPE.srs_tshd = pAudioDevParms->srs_tshd;
    829              QUEUE_TYPE.srs_truvol = pAudioDevParms->srs_truvol;
    830          
    831              if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    832              {
    833                  pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    834              }
    835          
    836              pADM_ObjCtrl->SetInputPath(pAudioDevParms->input_src);
    837              
    838              pDSP_ObjCtrl->fch_task_ctrl( xOS_setTASK_SUSPENDED );
    839              pDSP_ObjCtrl->lowlevel_task_ctrl( xOS_setTASK_SUSPENDED );/*Tony140704: will be resume in user setting*/
    840              if (ADM_I2C2_sema_mutex_take() == TRUE )
    841              {   
    842                  pADM_ObjCtrl->VolTaskCtrl(BTASK_RESUME);
    843                  pAudLowLevel_ObjCtrl->ExceptionTaskCtrl(BTASK_RESUME);
    844                  pAudLowLevel_ObjCtrl->BackCtrlTaskCtrl(BTASK_RESUME);
    845          
    846                  AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_SUSPENDED); /*Tony140623: will be resume in user setting*/
    847                  AudioDeviceManager_DigitalDetector_TaskCtrl( BTASK_SUSPENDED);
    848                  ADM_I2C2_sema_mutex_give();
    849              }
    850          #endif   
    851          }
    852          
    853          
    854          static void AudioDeviceManager_DeviceConfig( void *parms )
    855          {
    856              CS49844_QUEUE_TYPE QUEUE_TYPE;
    857              xAudDeviceParms* pParms = (xAudDeviceParms*)parms;
    858          
    859              QUEUE_TYPE.audio_type = CS49844_LOAD_PCM;
    860              QUEUE_TYPE.source_ctrl = CS49844_SOURCE_USER;
    861              QUEUE_TYPE.EQ = pAudioDevParms->EQ;
    862              QUEUE_TYPE.srs_tshd = pAudioDevParms->srs_tshd;
    863              QUEUE_TYPE.srs_truvol = pAudioDevParms->srs_truvol;
    864              QUEUE_TYPE.sample_96k = FALSE;
    865              QUEUE_TYPE.multi_channel = FALSE;
    866          
    867              if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
    868              {
    869                  pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );
    870              }
    871              
    872              AudioDeviceManager_InitializeParams( pParms );
    873              AudioDeviceManager_lowlevel_AudParmsConfig( NULL );
    874          }
    875          
    876          static void AudioDeviceManager_lowlevel_setMute( bool idx )
    877          {
    878              if ( idx == SOUND_MUTE )
    879              {
    880                  pAMP_DEV_ObjCtrl->set_rear_mute( idx );
    881                  pAMP_DEV_ObjCtrl->set_front_mute( idx );
    882                  pDSP_ObjCtrl->setMute( idx );
    883              }
    884              else if( ( pAudioDevParms->mute == SOUND_DEMUTE ) && ( idx == SOUND_DEMUTE ) )
    885              {
    886                  pAMP_DEV_ObjCtrl->set_front_mute( idx );
    887                  pDSP_ObjCtrl->setMute( idx );
    888                  pAMP_DEV_ObjCtrl->set_rear_mute( idx );
    889              }
    890          }
    891          
    892          static void AuidoDeviceManager_lowlevel_lowlevel_setFACTORY(void *parms)
    893          {
    894              if (pAudioDevParms->op_mode == MODE_FACTORY)
    895              {
    896                  pDSP_ObjCtrl->SetTVHDMC_Ctrl((byte*)&PCM_51_BPS_PARMS, (sizeof(PCM_51_BPS_PARMS)/sizeof(uint8)) );
    897                      }
    898                  }
    899          
    900          static void AuidoDeviceManager_lowlevel_setMasterGain( uint8 idx )
    901          {
    902              pDSP_ObjCtrl->setMasterGain( MASTER_GAIN_TABLE[idx] );
    903          }
    904          
    905          static void AuidoDeviceManager_lowlevel_setBassGain( uint8 idx )
    906          {
    907          
    908              pDSP_ObjCtrl->setBassGain(Bass_table[idx]);
    909          
    910          }
    911          
    912          static void AuidoDeviceManager_lowlevel_setSub( uint8 idx )
    913          {
    914              switch ( pDSP_ObjCtrl->GetAudioStreamType() )
    915              {
    916                  case CS49844_LOAD_PCM:
    917                  {
    918                      if ( pAudioDevParms->srs_tshd == 1 )    //Surround on
    919                      {
    920                          pDSP_ObjCtrl->setSubGain(SUB_PCM51_GAIN[idx]);
    921                      }
    922                      else    
    923                      {
    924                          pDSP_ObjCtrl->setSubGain(SUB_PCM21_GAIN[idx]);
    925                      }
    926                  }
    927                      break;
    928          
    929                  case CS49844_LOAD_AC3:
    930                  {
    931                      if ( pAudioDevParms->srs_tshd == 1 )    //Surround on
    932                      {
    933                          pDSP_ObjCtrl->setSubGain(SUB_AC351_GAIN[idx]);
    934                      }
    935                      else    
    936                      {
    937                          pDSP_ObjCtrl->setSubGain(SUB_AC321_GAIN[idx]);
    938                      }
    939                  }
    940                      break;
    941          
    942                  case CS49844_LOAD_DTS:
    943                  {
    944                      if ( pAudioDevParms->srs_tshd == 1 )    //Surround on
    945                      {
    946                          pDSP_ObjCtrl->setSubGain(SUB_DTS51_GAIN[idx]);
    947                      }
    948                      else    //Surround off
    949                      {
    950                          pDSP_ObjCtrl->setSubGain(SUB_DTS21_GAIN[idx]);
    951                      }
    952                  }
    953                      break;
    954          
    955                  default:
    956                  {
    957                      pDSP_ObjCtrl->setSubGain(SUB_PCM51_GAIN[idx]);
    958                  }
    959                      break;
    960          
    961              }
    962          }
    963          
    964          static void AuidoDeviceManager_lowlevel_setLsRs( uint8 idx )
    965          {
    966              const uint32 *pLsRs;
    967              switch ( pDSP_ObjCtrl->GetAudioStreamType() )
    968              {
    969                  case CS49844_LOAD_PCM:
    970                  {
    971                      pLsRs = LS_RS_PCM51_GAIN;
    972                  }
    973                      break;
    974                  
    975                  case CS49844_LOAD_AC3:
    976                  {
    977                      pLsRs = LS_RS_AC3_GAIN;
    978                  }
    979                      break;
    980                  
    981                  case CS49844_LOAD_DTS:
    982                  {
    983                      pLsRs = LS_RS_DTS_GAIN;
    984                  }
    985                      break;
    986                  
    987                  default:
    988                  {
    989                      pLsRs = LS_RS_PCM51_GAIN;
    990                  }
    991                      break;
    992                  
    993              }
    994              pDSP_ObjCtrl->setLsRsGain( *(pLsRs + idx) );
    995          }
    996          
    997          static void AuidoDeviceManager_lowlevel_setBalance( uint8 idx )
    998          {
    999              const uint32 *pBalance;
   1000              
   1001              switch ( pDSP_ObjCtrl->GetAudioStreamType() )
   1002              {
   1003                  case CS49844_LOAD_PCM:
   1004                  {
   1005                      pBalance = BALANCE_PCM_GAIN;
   1006                  }
   1007                      break;
   1008          
   1009                  case CS49844_LOAD_AC3:
   1010                  {
   1011                      pBalance = BALANCE_AC3_GAIN;
   1012                  }
   1013                      break;
   1014          
   1015                  case CS49844_LOAD_DTS:
   1016                  {
   1017                      pBalance = BALANCE_DTS_GAIN;
   1018                  }
   1019                      break;
   1020          
   1021                  default:
   1022                  {
   1023                      pBalance = BALANCE_PCM_GAIN;
   1024                  }
   1025                      break;
   1026          
   1027              }
   1028              
   1029              if ( idx> 6 )
   1030              {
   1031                  pDSP_ObjCtrl->setBalanceLs( *(pBalance + idx) );
   1032              }
   1033              else if ( idx < 6 )
   1034              {
   1035                  pDSP_ObjCtrl->setBalanceRs( *(pBalance + idx) );
   1036              }
   1037              else
   1038              {
   1039                  pDSP_ObjCtrl->setBalanceLs( *(pBalance + 6) );
   1040                  pDSP_ObjCtrl->setBalanceRs( *(pBalance + 6) );
   1041              }   
   1042          }
   1043          
   1044          static void AuidoDeviceManager_lowlevel_setNightMode( uint8 idx )
   1045          {
   1046              if ( idx == TRUE)
   1047              {
   1048                  pDSP_ObjCtrl->setNightMode(SubWoofer_GAIN_14dB);
   1049              }
   1050              else
   1051              {
   1052                  pDSP_ObjCtrl->setNightMode(SubWoofer_GAIN_24dB);
   1053              }
   1054          }
   1055          
   1056          static void AuidoDeviceManager_lowlevel_setCenter( uint8 idx )
   1057          {
   1058              pDSP_ObjCtrl->setCenterGain(CENTER_GAIN[idx]);
   1059          }
   1060          
   1061          static void AuidoDeviceManager_lowlevel_setTreble( uint8 idx )
   1062          {
   1063              pDSP_ObjCtrl->setTrebleGain(Treb_table[idx]);
   1064          }
   1065          
   1066          static void AuidoDeviceManager_lowlevel_setAVDelay( uint8 idx )
   1067          {
   1068              pDSP_ObjCtrl->setAVDelay(idx);
   1069          }
   1070          uint8 AuidoDeviceManager_lowlevel_getAudioStreamType( void )
   1071          {
   1072              return (uint8)pDSP_ObjCtrl->GetAudioStreamType();
   1073          }
   1074          
   1075          void AudioDeviceManager_lowlevel_AudParmsConfig( void *parms )
   1076          {
   1077              AuidoDeviceManager_lowlevel_lowlevel_setFACTORY(NULL);
   1078              AuidoDeviceManager_lowlevel_setBassGain(pAudioDevParms->bass_gain);
   1079              AuidoDeviceManager_lowlevel_setTreble(pAudioDevParms->treble_gain);
   1080              AuidoDeviceManager_lowlevel_setSub( pAudioDevParms->sub_gain );
   1081              AuidoDeviceManager_lowlevel_setCenter(pAudioDevParms->center_gain);
   1082              AuidoDeviceManager_lowlevel_setLsRs( pAudioDevParms->LsRs_gain );
   1083              AuidoDeviceManager_lowlevel_setBalance( pAudioDevParms->balance );
   1084              AuidoDeviceManager_lowlevel_setNightMode( pAudioDevParms->night_mode );
   1085              AuidoDeviceManager_lowlevel_setAVDelay( pAudioDevParms->av_delay );
   1086              AuidoDeviceManager_lowlevel_setMasterGain(pAudioDevParms->master_gain);
   1087              TRACE_DEBUG((0, "Configure lowlevel audio parameter"));
   1088          }
   1089          
   1090          void AudioDeviceManager_lowlevel_rstSRC( void )
   1091          {
   1092              GPIOMiddleLevel_Clr(__O_CS8422_RST);
   1093              vTaskDelay(TASK_MSEC2TICKS(2));
   1094              GPIOMiddleLevel_Set(__O_CS8422_RST);
   1095              vTaskDelay(TASK_MSEC2TICKS(2));
   1096          
   1097              pSRC_ObjCtrl->initialize();
   1098              
   1099              switch( pAudioDevParms->input_src )
   1100              {
   1101                  case AUDIO_SOURCE_AUX1:
   1102                  {
   1103                      pSRC_ObjCtrl->set_serial_audio_in();
   1104                  }
   1105                      break;
   1106          
   1107                  case AUDIO_SOURCE_AUX2:
   1108                  {
   1109                      pSRC_ObjCtrl->set_serial_audio_in();
   1110                  }
   1111                      break;
   1112          
   1113                  case AUDIO_SOURCE_COAXIAL:
   1114                  {
   1115                      pSRC_ObjCtrl->set_rx_path( SRC_PATH_DITIGITAL1, 0 );
   1116                  }
   1117                      break;
   1118          
   1119                  case AUDIO_SOURCE_OPTICAL:
   1120                  {
   1121                      pSRC_ObjCtrl->set_rx_path( SRC_PATH_DITIGITAL2, 0 );
   1122                  }
   1123                      break;
   1124          
   1125          #if ( configSII_DEV_953x_PORTING == 1 )
   1126                  case AUDIO_SOURCE_HDMI_IN:
   1127                  case AUDIO_SOURCE_HDMI_ARC:	
   1128                  {
   1129                      pSRC_ObjCtrl->set_rx_path( SRC_PATH_DITIGITAL3, 0 );
   1130                  }
   1131                      break;
   1132          #endif
   1133          
   1134                  case AUDIO_SOURCE_USB_PLAYBACK:
   1135                  {
   1136                      pSRC_ObjCtrl->set_serial_audio_in();
   1137                  }
   1138                      break;
   1139                  
   1140                  case AUDIO_SOURCE_BLUETOOTH:
   1141                  {
   1142                      pSRC_ObjCtrl->set_serial_audio_in();
   1143                  }
   1144                      break;
   1145              }
   1146          }
   1147          
   1148          void AuidoDeviceManager_VolController_task( void *pvParameters )
   1149          {
   1150              for(;;)
   1151              {
   1152                  switch( mVolumeRampEvent )
   1153                  {
   1154                      case VRE_RAMP_IDLE:
   1155                      {
   1156                          if ( AudioDeviceManager_getSignalAvailable() == 0 )
   1157                          {
   1158                              vre_ramp_count++;
   1159                              
   1160                              if ( vre_ramp_count >= 600 )    //60 sec
   1161                              {
   1162                                  if (ADM_I2C2_sema_mutex_take() == TRUE )
   1163                                  {
   1164                                      AudioDeviceManager_lowlevel_setMute( SOUND_MUTE ); 
   1165                                      ADM_I2C2_sema_mutex_give();
   1166                                  } 
   1167                                  mVolumeRampEvent = VRE_RAMP_WAIT_SIGNAL;
   1168                                  vre_ramp_count = 0;
   1169                              }
   1170                          }
   1171                           else
   1172                          {
   1173                              vre_ramp_count = 0;
   1174                          }
   1175                      }
   1176                          break;
   1177          
   1178                      case VRE_RAMP_WAIT_SIGNAL:
   1179                      {
   1180                          vre_ramp_count++;
   1181          
   1182                          if ( AudioDeviceManager_getSignalAvailable() == 1 )
   1183                          {
   1184                              if (ADM_I2C2_sema_mutex_take() == TRUE )
   1185                              {
   1186                                  AudioDeviceManager_lowlevel_setMute( SOUND_DEMUTE );  
   1187                                  ADM_I2C2_sema_mutex_give();
   1188                              }
   1189                              vre_ramp_count = 0;
   1190                              mVolumeRampEvent = VRE_RAMP_IDLE;
   1191                          }
   1192                      }
   1193                          break;
   1194          
   1195                      case VRE_RAMP_INITIAL:
   1196                      {
   1197                          TRACE_DEBUG((0,"VRE_RAMP_INITIAL"));
   1198                          vre_ramp_count = 0;
   1199                          target_volume = pAudioDevParms->master_gain;
   1200          
   1201                          volume_inc = 0;
   1202          
   1203                          if ( target_volume == 0 )
   1204                          {
   1205                              if (ADM_I2C2_sema_mutex_take() == TRUE )
   1206                              {
   1207                                  AudioDeviceManager_lowlevel_setMute( SOUND_DEMUTE ); 
   1208                                  ADM_I2C2_sema_mutex_give();
   1209                              }
   1210                              mVolumeRampEvent = VRE_RAMP_END;
   1211                          }
   1212                          else
   1213                          {
   1214                              mVolumeRampEvent = VRE_RAMP_START;
   1215                          }
   1216                      }
   1217                      break;
   1218          
   1219                      case VRE_RAMP_MUTE_LOCK:
   1220                      {
   1221                          target_volume = pAudioDevParms->master_gain; 
   1222                          volume_inc = 1;
   1223                          vre_ramp_count ++;
   1224                          if ( vre_ramp_count > ramp_delay )
   1225                          {
   1226                              vre_ramp_count = 0;
   1227                              mVolumeRampEvent = VRE_RAMP_START;
   1228                          }
   1229                      }
   1230                      break;
   1231          
   1232                      case VRE_RAMP_WAIT_BT_CONNECT:
   1233                      {
   1234                          target_volume = pAudioDevParms->master_gain; 
   1235                          volume_inc = 1;
   1236                          mVolumeRampEvent = VRE_RAMP_START;
   1237                      }
   1238                      break;
   1239          
   1240                      case VRE_RAMP_START:
   1241                      {
   1242                          if ( target_volume > MAX_VOL) // if target_volume out of range (0~35)
   1243                          {
   1244                              target_volume=  pAudioDevParms->master_gain;
   1245                          }
   1246                          
   1247                          if ( volume_inc <= target_volume )
   1248                          {
   1249                              if( volume_inc == 1 )
   1250                              {
   1251                                  if (ADM_I2C2_sema_mutex_take() == TRUE )
   1252                                  {
   1253                                      AudioDeviceManager_lowlevel_setMute( SOUND_DEMUTE );
   1254                                      ADM_I2C2_sema_mutex_give();
   1255                                  }   
   1256          #if 1
   1257                                  /*UI 4.1 no volume ramp under Default gain*/
   1258                                  if (target_volume<=DEFAULT_MASTER_GAIN)
   1259                                  {
   1260                                      AuidoDeviceManager_lowlevel_setMasterGain( target_volume );
   1261                                      TRACE_DEBUG((0,"VOL = %d",target_volume));
   1262          
   1263                                      pUDM_ObjCtrl->ExceptionSendEvent(UI_Event_VolRAMP_TARGET);
   1264          
   1265                                      volume_inc = 0;
   1266                                      mVolumeRampEvent = VRE_RAMP_END;
   1267                                      break;
   1268                                  }
   1269                                  else
   1270                                  {
   1271                                      volume_inc = DEFAULT_MASTER_GAIN;
   1272                                  }
   1273          #endif
   1274                              }
   1275                              
   1276                              AuidoDeviceManager_lowlevel_setMasterGain( volume_inc );
   1277                              if (volume_inc == target_volume)
   1278                              {
   1279                                  pUDM_ObjCtrl->ExceptionSendEvent(UI_Event_VolRAMP_TARGET);
   1280                              }
   1281                              else
   1282                              {
   1283                                  pUDM_ObjCtrl->ExceptionSendEvent(UI_Event_VolRAMP);
   1284                              }
   1285                              TRACE_DEBUG((0,"VOL = %d",volume_inc));
   1286                              volume_inc ++;
   1287                          }
   1288                          else
   1289                          {
   1290                              if ( target_volume == 0 )
   1291                              {
   1292                                  if (ADM_I2C2_sema_mutex_take() == TRUE )
   1293                                  {   
   1294                                      AudioDeviceManager_lowlevel_setMute( SOUND_DEMUTE );
   1295                                      ADM_I2C2_sema_mutex_give();
   1296                                  }
   1297                              }
   1298                              
   1299                              mVolumeRampEvent = VRE_RAMP_END;
   1300                          }
   1301                      }
   1302                          break;
   1303          
   1304                      case VRE_NON_RAMP_MUTE_LOCK:
   1305                      {
   1306                          target_volume = pAudioDevParms->master_gain; 
   1307                          volume_inc = 1;
   1308                          vre_ramp_count ++;
   1309                          if ( vre_ramp_count > ramp_delay )
   1310                          {
   1311                              vre_ramp_count = 0;
   1312                              mVolumeRampEvent = VRE_SET_VOL;
   1313                          }
   1314                      }
   1315                      break;
   1316                      
   1317                      case VRE_SET_VOL:
   1318                      {
   1319                          if ( (target_volume > MAX_VOL) || (target_volume < 0) )
   1320                          {
   1321                              target_volume=  pAudioDevParms->master_gain;
   1322                          }
   1323                          
   1324                         if ( pAudioDevParms->master_gain >= target_volume )
   1325                          {
   1326                              target_volume = pAudioDevParms->master_gain;
   1327                              TRACE_DEBUG((0,"Change target volume to %d",target_volume));
   1328                              mVolumeRampEvent = VRE_RAMP_START;
   1329                          }
   1330                          else
   1331                          {
   1332                              if (ADM_I2C2_sema_mutex_take() == TRUE )
   1333                              {               
   1334                                  AudioDeviceManager_lowlevel_setMute( SOUND_DEMUTE );
   1335                                  ADM_I2C2_sema_mutex_give();
   1336                              }
   1337                              mAudDevParms.master_gain = volume_inc;
   1338                              mVolumeRampEvent = VRE_RAMP_IDLE;
   1339                          }
   1340                      }
   1341                          break;
   1342                          
   1343                      case VRE_RAMP_END:
   1344                      {
   1345                          if (mVolumeRampEvent == VRE_RAMP_END)
   1346                          {
   1347                              //WE NEED TO ACTIVE THE LED SCANNING WHEN INPUT SOURCE IS BT
   1348                              if( ( (pBTHandle_ObjCtrl->get_status() == BT_PAIRING) || (pBTHandle_ObjCtrl->get_status() == BT_POWER_ON)) && ( mAudDevParms.input_src == AUDIO_SOURCE_BLUETOOTH ) )
   1349                              {
   1350                                  pUDM_ObjCtrl->ExceptionSendEvent(UI_EVENT_BT_PAIRING);
   1351                                  TRACE_DEBUG((0, " 2222 show pairing led light ...  "));
   1352                              }
   1353                          }
   1354                          
   1355                          target_volume = 0;
   1356                          volume_inc = 0;
   1357                          mVolumeRampEvent = VRE_RAMP_IDLE;
   1358                      }
   1359                          break;
   1360                  }
   1361                  vTaskDelay(TASK_MSEC2TICKS(100));    //Change to 100ms for VIZIO spec : ii.    Volume ramps at rate of 0.1 sec / step
   1362              }
   1363          }
   1364          
   1365          void AuidoDeviceManager_VolController_CreateTask( void )
   1366          {
   1367              if ( xTaskCreate( AuidoDeviceManager_VolController_task, 
   1368                      ( portCHAR * ) "AuidoDeviceManager_VR", 
   1369                      (STACK_SIZE), NULL, tskAUD_VOLUMERAMP_PRIORITY,&xOS_ADM_Parms.VolTaskHandle) != pdPASS )
   1370              {
   1371                  TRACE_ERROR((0, "AuidoDeviceManager_VR task create failure " ));
   1372              }
   1373              else
   1374              {
   1375                  vTaskSuspend( xOS_ADM_Parms.VolTaskHandle);
   1376                  TRACE_ERROR((0, "AudioSystemHandler_VR task create OK?! " ));
   1377              }
   1378          }
   1379          
   1380          static void AuidoDeviceManager_lowlevel_VolController_setEvent( xADMVolEvents parms )
   1381          {
   1382              if (ADM_I2C2_sema_mutex_take() == TRUE )
   1383              {
   1384                  switch(parms)
   1385                  {
   1386                      /* When user mutes the system, vol ramp will be terminated */
   1387                      case AUD_VOL_EVENT_USER_MUTE: 
   1388                      {
   1389                          AudioDeviceManager_lowlevel_setMute( pAudioDevParms->mute );
   1390                          mVolumeRampEvent = VRE_RAMP_END;
   1391                      }
   1392                      break;
   1393                      
   1394                      /* When system mutes itself during source change, format change or error */
   1395                      case AUD_VOL_EVENT_SET_MUTE:
   1396                      {
   1397                          AudioDeviceManager_lowlevel_setMute( SOUND_MUTE);
   1398          
   1399                          if ( (mVolumeRampEvent != VRE_RAMP_END) && (mVolumeRampEvent != VRE_RAMP_IDLE) )
   1400                          {
   1401                              mVolumeRampEvent = VRE_RAMP_HOLD;
   1402                          }
   1403                      }
   1404                      break;
   1405                      
   1406                      /* When system demutes itself in audio back DSP and process mode*/
   1407                      case AUD_VOL_EVENT_SET_DEMUTE:
   1408                      {
   1409                          if ( (mVolumeRampEvent == VRE_RAMP_IDLE) || (mVolumeRampEvent == VRE_RAMP_END) )
   1410                          {
   1411                              AuidoDeviceManager_lowlevel_setMasterGain( pAudioDevParms->master_gain );
   1412                              AudioDeviceManager_lowlevel_setMute( SOUND_DEMUTE);
   1413                          }
   1414                          else if ( mVolumeRampEvent == VRE_RAMP_HOLD )
   1415                          {
   1416                              mVolumeRampEvent = VRE_RAMP_INITIAL;
   1417                          }
   1418                      }
   1419                      break;
   1420                      
   1421                      case AUD_VOL_EVENT_SET_MASTER_GAIN:
   1422                      {
   1423                          if ( (mVolumeRampEvent == VRE_RAMP_IDLE) || (mVolumeRampEvent == VRE_RAMP_END) )
   1424                          {
   1425                              AuidoDeviceManager_lowlevel_setMasterGain( pAudioDevParms->master_gain );
   1426                              TRACE_DEBUG((0, "Master Gain = %d",  pAudioDevParms->master_gain ));
   1427                          }
   1428                          else
   1429                          {
   1430                              mVolumeRampEvent = VRE_SET_VOL;
   1431                          }
   1432                      }
   1433                          break;
   1434                          
   1435                      case AUD_VOL_EVENT_VOLUME_DELAY_RELEASE:
   1436                      {
   1437                          vre_ramp_count = 0;
   1438                          AudioDeviceManager_lowlevel_setMute( SOUND_MUTE ); 
   1439          
   1440                          if (  pAudioDevParms->input_src == AUDIO_SOURCE_BLUETOOTH )
   1441                          {
   1442                              ramp_delay = 0;
   1443                              mVolumeRampEvent = VRE_RAMP_WAIT_BT_CONNECT;
   1444                          }
   1445                          else
   1446                          {
   1447                              if ( pAudioDevParms->input_src == AUDIO_SOURCE_USB_PLAYBACK )
   1448                              {
   1449                                  ramp_delay = 1;
   1450                              }
   1451                              else
   1452                              {
   1453                                  ramp_delay = 10;
   1454                              }        
   1455                              mVolumeRampEvent = VRE_RAMP_MUTE_LOCK;
   1456                          }
   1457                      }
   1458                          break;
   1459          	
   1460                      case AUD_VOL_EVENT_CHK_VOLUME_DELAY_RELEASE:    //for Fix issue for play channel check will cause pop sound
   1461                      {
   1462                          vre_ramp_count = 0;
   1463                          AudioDeviceManager_lowlevel_setMute( SOUND_MUTE ); 
   1464          
   1465                          ramp_delay = 1;
   1466                          mVolumeRampEvent = VRE_NON_RAMP_MUTE_LOCK;
   1467                      }
   1468                      break;
   1469          		
   1470                      case AUD_VOL_EVENT_VOLUME_RAMP:
   1471                      {
   1472                              mVolumeRampEvent = VRE_RAMP_INITIAL;
   1473                      }   
   1474                          break; 
   1475                  }
   1476                  ADM_I2C2_sema_mutex_give();
   1477              }
   1478          }
   1479          
   1480          static void AuidoDeviceManager_VolController_setEvent(void *parms )
   1481              {
   1482              xAudioVolParms* pParms = (xAudioVolParms*)parms;
   1483          
   1484              /* update mAudDevParms */
   1485              mAudDevParms.mute = pParms->mute;
   1486              mAudDevParms.master_gain= pParms->master_gain; 
   1487          
   1488              //TRACE_DEBUG((0, " >>>>> AuidoDeviceManager_VolController_setEvent = %d", pParms->adm_vol_event ));
   1489              AuidoDeviceManager_lowlevel_VolController_setEvent(pParms->adm_vol_event);
   1490          }
   1491          
   1492          static void AuidoDeviceManager_VolController_TaskCtrl( bool val )
   1493          {
   1494              if ( val == BTASK_SUSPENDED )
   1495              {
   1496                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.VolTaskHandle ) != pdPASS ) /*task is working*/
   1497                  {
   1498                      vTaskSuspend( xOS_ADM_Parms.VolTaskHandle );
   1499                      TRACE_DEBUG((0, "SUSPEND: AuidoDeviceManager_VolController"));
   1500                  }
   1501              }
   1502              else
   1503              {
   1504                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.VolTaskHandle ) == pdPASS ) /*task is not working*/
   1505                  {
   1506                      vTaskResume( xOS_ADM_Parms.VolTaskHandle );
   1507                      TRACE_DEBUG((0, "RESUME: AuidoDeviceManager_VolController"));
   1508                  }
   1509              }
   1510          }
   1511          
   1512          static bool AuidoDeviceManager_VolController_RampStauts(void)
   1513          {
   1514              if (mVolumeRampEvent == VRE_RAMP_START)
   1515              {
   1516                  return TRUE;
   1517              }
   1518              else
   1519              {
   1520                  return FALSE;
   1521              }  
   1522          }
   1523          
   1524          static uint8 AuidoDeviceManager_VolController_VolStauts(void)
   1525          {
   1526              return volume_inc;
   1527          }
   1528          
   1529          static uint8 AuidoDeviceManager_VolController_TargetVol(void)
   1530          {
   1531              return target_volume;
   1532          }
   1533          
   1534          /*******************************************************************************
   1535           * Digital Detector
   1536           ******************************************************************************/
   1537          static void AudioDeviceManager_DigitalDetector_TaskCtrl( bool val )
   1538          {   
   1539              if ( val == BTASK_SUSPENDED )
   1540              {
   1541                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.Digital_detector_handle ) != pdPASS ) /*task is working*/
   1542                  {
   1543                      vTaskSuspend( xOS_ADM_Parms.Digital_detector_handle);
   1544                      ADM_I2C2_sema_mutex_give();/* prevent sema haven't give in the task */       
   1545                      //TRACE_DEBUG((0, "SUSPEND: DigitalDetector "));
   1546                  }
   1547              }
   1548              else
   1549              {
   1550                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.Digital_detector_handle ) == pdPASS ) /*task is not working*/
   1551                  {
   1552                      vTaskDelay( TASK_MSEC2TICKS(50) ); /*wait to right uld for format led*/
   1553                      vTaskResume( xOS_ADM_Parms.Digital_detector_handle );
   1554                      //TRACE_DEBUG((0, "RESUME: DigitalDetector"));
   1555                  }
   1556              }
   1557          }
   1558          
   1559          void AudioDeviceManager_DigitalDetectorTask( void *pvParameters )
   1560          {
   1561              bool ret;
   1562          #if ( configSII_DEV_953x_PORTING == 1 )    
   1563              static xHDMIAudiotype CurrentHDMIAudiotype = HDMI_NON_PCM;
   1564              static xHDMIAudiotype LastHDMIAudiotype = HDMI_NON_PCM;
   1565              CS49844_QUEUE_TYPE QUEUE_TYPE;
   1566          #endif
   1567              
   1568              for( ;; )
   1569              {
   1570                  switch( pAudioDevParms->input_src )
   1571                  {
   1572                      case AUDIO_SOURCE_OPTICAL:
   1573                      case AUDIO_SOURCE_COAXIAL:
   1574          #if ( configSII_DEV_953x_PORTING == 1 )
   1575                      case AUDIO_SOURCE_HDMI_IN:
   1576                      case AUDIO_SOURCE_HDMI_ARC:	
   1577          #endif
   1578                      { 
   1579                      /* Smith commanded 2013/4/05
   1580                      1. Confirm AES3 PCM 96Khz 
   1581                      2. Fix VIZIO TV short noise between DIGITAL AUDIO OUTPUT between PCM and bitstream.
   1582                      */
   1583                          if (ADM_I2C2_sema_mutex_take() == TRUE )
   1584                          { 
   1585                              if ( AudioStream_get_PCM96Khz() )
   1586                              {
   1587                                  ret = AudioSystem_isPCM_96Khz(FALSE);
   1588                                  AudioStream_set_PCM96Khz( ret );
   1589                              }
   1590                              else
   1591                              {
   1592                                  ret = AudioSystem_isPCM_96Khz(TRUE);
   1593                                  AudioStream_set_PCM96Khz( ret );
   1594                              }
   1595                              AudioSystem_Cover_PCM96Khz();
   1596                              ADM_I2C2_sema_mutex_give();
   1597                          }
   1598                           /* for format LED*/
   1599                              /* Tony need to change to Q*/
   1600                          if (AudioDeviceManager_getSignalAvailable() == 1)
   1601                          { 
   1602                              if (format_indicator== TRUE)
   1603                              {
   1604                                  format_indicator = FALSE;
   1605                                  switch(pDSP_ObjCtrl->GetAudioStreamType())
   1606                                  {
   1607                                      case CS49844_LOAD_AC3:
   1608                                      {
   1609                                          if (pAudioDevParms->op_mode==MODE_FACTORY)
   1610                                          {
   1611                                              pUDM_ObjCtrl->ExceptionSendEvent(UI_EVENT_FAC_DOLBY);
   1612                                          }
   1613                                          else
   1614                                          {
   1615                                              pUDM_ObjCtrl->ExceptionSendEvent(UI_EVENT_DOLBY);
   1616                                          }
   1617                                      }
   1618                                          break;
   1619          
   1620                                      case CS49844_LOAD_DTS:
   1621                                      {
   1622                                          if (pAudioDevParms->op_mode==MODE_FACTORY)
   1623                                          {
   1624                                              pUDM_ObjCtrl->ExceptionSendEvent(UI_EVENT_FAC_DTS);
   1625                                          }
   1626                                          else
   1627                                          {
   1628                                              pUDM_ObjCtrl->ExceptionSendEvent(UI_EVENT_DTS);
   1629                                          }
   1630                                      }
   1631                                          break;
   1632                                          
   1633                                      case CS49844_LOAD_PCM:
   1634                                      {
   1635                                           pUDM_ObjCtrl->ExceptionSendEvent(UI_EVENT_PCM);
   1636                                      }
   1637                                          break;
   1638                                  }       
   1639                              }
   1640                          }
   1641                          else
   1642                          {
   1643                              format_indicator = TRUE;
   1644                          }
   1645                      }
   1646                          break;
   1647                  }
   1648                          
   1649          #if ( configSII_DEV_953x_PORTING == 1 )        
   1650          		/* MultiChannel PCM in HDMI*/
   1651          		switch( pAudioDevParms->input_src )
   1652          		{
   1653          			case AUDIO_SOURCE_HDMI_IN:
   1654          			case AUDIO_SOURCE_HDMI_ARC: 
   1655          			{
   1656          				if (AudioStream_get_PCM()==TRUE)
   1657          				{
   1658          					if (pHDMI_DM_ObjCtrl->GetMultiChannel()==TRUE)
   1659          					{
   1660          						if (AudioStream_get_PCM96Khz()==TRUE)
   1661          						{
   1662          							CurrentHDMIAudiotype = HDMI_PCM_MULTI_96K;
   1663          						}
   1664          						else
   1665          						{
   1666          							CurrentHDMIAudiotype = HDMI_PCM_MULTI_48K;
   1667          						}
   1668          					}
   1669          					else
   1670          					{
   1671          						CurrentHDMIAudiotype = HDMI_PCM_STEREO;
   1672          					}
   1673          				}
   1674          				else
   1675          				{
   1676          					CurrentHDMIAudiotype = HDMI_NON_PCM;
   1677          				}
   1678          
   1679          				if (LastHDMIAudiotype!=CurrentHDMIAudiotype)
   1680          				{				 
   1681          					switch(CurrentHDMIAudiotype)
   1682          					{
   1683          						case HDMI_NON_PCM:
   1684          						case HDMI_PCM_STEREO:
   1685          						{
   1686          							QUEUE_TYPE.sample_96k = FALSE;
   1687          							QUEUE_TYPE.multi_channel = FALSE;
   1688                      }
   1689                          break;
   1690          
   1691          						case HDMI_PCM_MULTI_48K:
   1692          						{
   1693          							QUEUE_TYPE.sample_96k = FALSE;
   1694          							QUEUE_TYPE.multi_channel = TRUE;
   1695          						}
   1696          							break;
   1697          
   1698          						case HDMI_PCM_MULTI_96K:
   1699          						{
   1700          							QUEUE_TYPE.sample_96k = TRUE;
   1701          							QUEUE_TYPE.multi_channel = TRUE;
   1702          						}
   1703          							break;
   1704          
   1705          						default:
   1706          							break;
   1707          					}
   1708          					QUEUE_TYPE.audio_type = CS49844_LOAD_HDMI_CTRL;
   1709          					QUEUE_TYPE.source_ctrl = CS49844_SOURCE_HDMI;
   1710          					
   1711          					if (pDSP_ObjCtrl->loader_load_fmt_mutex_take())
   1712          					{
   1713          						pDSP_ObjCtrl->loader_load_fmt_uld( &QUEUE_TYPE );	  
   1714          					}
   1715          					
   1716          					LastHDMIAudiotype = CurrentHDMIAudiotype;
   1717          				}
   1718          			}
   1719          				break;
   1720                  }
   1721          #endif        
   1722                  vTaskDelay( ADM_DIGITAL_DETECTOR_TIME_TICK );
   1723              }
   1724          }
   1725          
   1726          static void AuidoDeviceManager_DigitalDetector_CreateTask( void )
   1727          {
   1728              if ( xTaskCreate( AudioDeviceManager_DigitalDetectorTask, 
   1729                      ( portCHAR * ) "ADM_SDT", 
   1730                      (STACK_SIZE), NULL, tskADM_DIGITAL_DETECTOR_PRIORITY,&xOS_ADM_Parms.Digital_detector_handle) != pdPASS )
   1731              {
   1732                  vTaskDelete( xOS_ADM_Parms.Digital_detector_handle );
   1733              }
   1734              else
   1735              {
   1736                  vTaskSuspend( xOS_ADM_Parms.Digital_detector_handle );
   1737              }
   1738          }
   1739          
   1740          bool AudioStream_get_PCM96Khz( void )
   1741          {
   1742              return mIsPCM96Khz;
   1743          }
   1744          
   1745          void AudioStream_set_PCM96Khz( bool bValue )
   1746          {
   1747              mIsPCM96Khz = bValue;
   1748          }
   1749          
   1750          bool AudioStream_get_PCM(void)
   1751          {
   1752              return mIsPCM;
   1753          }
   1754          
   1755          void AudioStream_set_PCM(bool bValue)
   1756          {
   1757              mIsPCM = bValue;
   1758          }
   1759          
   1760          bool AudioSystem_isPCM_96Khz( bool bReboot )
   1761          {
   1762              if ( pSRC_ObjCtrl->Format_IsPCM() == TRUE )
   1763              {
   1764                  AudioStream_set_PCM(TRUE);
   1765          
   1766                  if ( pSRC_ObjCtrl->is_96Khz192Khz_AES3() == TRUE )
   1767              {
   1768                  if (bReboot)
   1769                  {
   1770                      //TRACE_DEBUG((0, " ========================= CS8422_SoftReboot ============================"));
   1771                      pSRC_ObjCtrl->isr_ctrl( FUNC_DISABLE );
   1772                      pAudLowLevel_ObjCtrl->RstSRC();
   1773                      pSRC_ObjCtrl->isr_ctrl( FUNC_ENABLE );
   1774                      if( ( pSRC_ObjCtrl->is_96Khz192Khz_AES3() == TRUE ) )
   1775                          return TRUE;
   1776                      else 
   1777                          return FALSE;
   1778                  }
   1779                  else
   1780                      return TRUE;
   1781              }
   1782              }
   1783              else
   1784              {
   1785                  AudioStream_set_PCM(FALSE);
   1786              }
   1787          
   1788              return FALSE;
   1789          }
   1790          
   1791          /* Smith commanded: 
   1792             2013/6/6 Here is only for AES3 PCM 96Khz and PCM 192Khz also is working 
   1793             (optical or coxical) receiver input and 96Khz is dected by CS8422 GPO 0*/
   1794          void AudioSystem_Cover_PCM96Khz( void )
   1795          {
   1796              uint8 ret;
   1797          
   1798              if ( AudioStream_get_PCM96Khz() == TRUE )    /*PCM96Khz only exist AES3 input*/
   1799              {
   1800                  ret = pSRC_ObjCtrl->getForcesClockControl();
   1801                  if ( ret == 0 )
   1802                  {
   1803                      pSRC_ObjCtrl->ForcesClockControl( 1 );
   1804                      
   1805                      //TRACE_DEBUG((0, " PCM96 CS8422_ForcesClockControl( 1 ) "));
   1806                  }
   1807              
   1808                  ret = pSRC_ObjCtrl->read_SDOUT1_DataSource();
   1809                  if ( ret == 1 ) /*if SDOUT1 is not equal to SRC*/ 
   1810                  {
   1811                      pSRC_ObjCtrl->SerialAudioOutput( 0 );    /*SRC OUTPUT*/
   1812          
   1813                      //TRACE_DEBUG((0, " PCM96 CS8422_SerialAudioOutput( 0 ) "));
   1814                  }
   1815              }
   1816              else /*    PCM is under 96Khz. The PCM exist on AES3 and SRC */
   1817              {
   1818                  ret = pSRC_ObjCtrl->getForcesClockControl();
   1819                  if ( ret == 1 )
   1820                  {
   1821                      pSRC_ObjCtrl->ForcesClockControl( 0 );
   1822          
   1823                      //TRACE_DEBUG((0, " PCM48 CS8422_ForcesClockControl( 0 ) "));
   1824                  }
   1825          
   1826                  ret = pSRC_ObjCtrl->read_SDOUT1_DataSource();
   1827                  if ( ret == 0 ) /*if SDOUT1 is equal to SRC*/ 
   1828                  {
   1829                      pSRC_ObjCtrl->SerialAudioOutput( 1 );    /*AES3 OUTPUT*/
   1830          
   1831                      //TRACE_DEBUG((0, " PCM48 CS8422_SerialAudioOutput( 1 ) "));
   1832                  }
   1833              }
   1834          }
   1835          
   1836          /*******************************************************************************
   1837           * Signal Detector
   1838           ******************************************************************************/
   1839          static uint8 AudioDeviceManager_getSignalAvailable( void )
   1840          {
   1841              return SignalAvailable;
   1842          }
   1843          
   1844          static void AudioDeviceManager_SignalDetector_TaskCtrl( bool val )
   1845          {
   1846              if ( val == BTASK_SUSPENDED )
   1847              {
   1848                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.signal_detector_handle ) != pdPASS ) /*task is working*/
   1849                  {
   1850                      SignalAvailable = 0;/* When task suspened, it means DSP is in format change or not ready*/
   1851                      vTaskSuspend( xOS_ADM_Parms.signal_detector_handle);
   1852                      ADM_I2C2_sema_mutex_give();/* prevent sema haven't give in the task */
   1853                      //TRACE_DEBUG((0, "SUSPEND: SignalDetector "));
   1854                  }
   1855              }
   1856              else
   1857              {
   1858                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.signal_detector_handle ) == pdPASS ) /*task is not working*/
   1859                  {
   1860                      vTaskResume( xOS_ADM_Parms.signal_detector_handle );
   1861                      //TRACE_DEBUG((0, "RESUME: SignalDetector"));
   1862                  }
   1863              }
   1864          }
   1865          
   1866          void AudioDeviceManager_SignalDetectorTask( void *pvParameters )
   1867          {
   1868              for( ;; )
   1869              {
   1870                  switch( pAudioDevParms->input_src )
   1871                  {
   1872                      case AUDIO_SOURCE_AUX1:
   1873                      case AUDIO_SOURCE_AUX2:
   1874                      case AUDIO_SOURCE_BLUETOOTH:
   1875                      case AUDIO_SOURCE_USB_PLAYBACK:
   1876                      {
   1877                          if (pDSP_ObjCtrl->GetLoadrState()==0)
   1878                          {
   1879                              if (pDSP_ObjCtrl->GetSignalLevel() == 1 )
   1880                              {
   1881                                  SignalAvailable = 1;
   1882                              }
   1883                              else
   1884                              {
   1885                                  SignalAvailable = 0;
   1886                              }
   1887                          }
   1888                          else
   1889                          {
   1890                              SignalAvailable = 0;
   1891                          }
   1892                      }
   1893                          break;
   1894          
   1895                      case AUDIO_SOURCE_OPTICAL:
   1896                      case AUDIO_SOURCE_COAXIAL:
   1897          #if ( configSII_DEV_953x_PORTING == 1 )
   1898                      case AUDIO_SOURCE_HDMI_IN:
   1899                      case AUDIO_SOURCE_HDMI_ARC:	
   1900          #endif
   1901                      {
   1902                          if (ADM_I2C2_sema_mutex_take() == TRUE )
   1903                          { 
   1904                              int idx =0;
   1905          
   1906                              for (idx = 0 ; idx < 2 ; idx++)
   1907                              {
   1908                                  //TRACE_DEBUG((0,"PLL Lock status %d -----> %d",idx, pSRC_ObjCtrl->IsLockPLL()));    
   1909          
   1910                                  if (pSRC_ObjCtrl->IsLockPLL() == TRUE )
   1911                                  {                        
   1912                                      SignalAvailable = 1;
   1913                                      break;
   1914                                  }
   1915                                  else
   1916                                  {
   1917                                      if (idx == 0)
   1918                                      {
   1919                                          vTaskDelay(10);
   1920                                          continue;
   1921                                      }
   1922                                      
   1923                                      SignalAvailable = 0;
   1924                                  }
   1925                              }
   1926                              
   1927                              ADM_I2C2_sema_mutex_give();
   1928                          }
   1929                      }
   1930                          break;
   1931                  }
   1932                  vTaskDelay( ADM_SIGNAL_DETECTOR_TIME_TICK );
   1933              }
   1934          }
   1935          
   1936          static void AuidoDeviceManager_SignalDetector_CreateTask( void )
   1937          {
   1938              if ( xTaskCreate( AudioDeviceManager_SignalDetectorTask, 
   1939                      ( portCHAR * ) "ADM_SDT", 
   1940                      (STACK_SIZE), NULL, tskADM_SIGNAL_DETECTOR_PRIORITY,&xOS_ADM_Parms.signal_detector_handle) != pdPASS )
   1941              {
   1942                  vTaskDelete( xOS_ADM_Parms.signal_detector_handle );
   1943              }
   1944              else
   1945              {
   1946                  vTaskSuspend( xOS_ADM_Parms.signal_detector_handle );
   1947              }
   1948          }
   1949          
   1950          
   1951          /*******************************************************************************
   1952           * Mutex
   1953           ******************************************************************************/
   1954          static bool ADM_I2C2_sema_mutex_take( void )
   1955          {
   1956              //if ( bIsI2C2_enable!= TRUE )
   1957              //{
   1958              //    TRACE_DEBUG((0, "ADM_I2C2 TAKE BUSY 1111 !! "));
   1959              //    return FALSE;
   1960              //}   
   1961              //return TRUE;
   1962              if ( xOS_ADM_Parms.ADM_I2C2_sema.xSemaphore == NULL )
   1963              {
   1964                  //TRACE_DEBUG((0, "ADM_I2C2 TAKE BUSY 2222 !! "));
   1965                  return FALSE;
   1966              }
   1967          
   1968              xOS_ADM_Parms.ADM_I2C2_sema.xBlockTime = portMAX_DELAY;
   1969              if ( xSemaphoreTake( xOS_ADM_Parms.ADM_I2C2_sema.xSemaphore, xOS_ADM_Parms.ADM_I2C2_sema.xBlockTime ) != pdTRUE )
   1970              {
   1971                  //TRACE_DEBUG((0, "ADM_I2C2 TAKE BUSY 3333 !! "));
   1972                  return FALSE;
   1973              }
   1974              //TRACE_DEBUG((0, "ADM_I2C2_sema_mutex_take "));
   1975              return TRUE;
   1976          }
   1977          
   1978          static bool ADM_I2C2_sema_mutex_give( void )
   1979          {
   1980              //if ( bIsI2C2_enable!= TRUE )
   1981              //    return FALSE;
   1982              //return TRUE;
   1983              if ( xOS_ADM_Parms.ADM_I2C2_sema.xSemaphore == NULL )
   1984                  return FALSE;
   1985          
   1986              if ( xSemaphoreGive( xOS_ADM_Parms.ADM_I2C2_sema.xSemaphore ) != pdTRUE )
   1987              {
   1988                  //TRACE_DEBUG((0, "ADM_I2C2 GIVE BUSY !! "));
   1989                  return FALSE;    
   1990              }
   1991              //TRACE_DEBUG((0, "ADM_I2C2_sema_mutex_give "));
   1992              return TRUE;
   1993          }
   1994          
   1995          static bool ADM_Call_Back_sema_mutex_take( void )
   1996          {
   1997          #if 1
   1998              //if ( bIsI2C2_enable!= TRUE )
   1999              //{
   2000              //    TRACE_DEBUG((0, "ADM_I2C2 TAKE BUSY 1111 !! "));
   2001              //    return FALSE;
   2002              //}   
   2003              //return TRUE;
   2004              if ( xOS_ADM_Parms.ADM_Call_Back_sema.xSemaphore == NULL )
   2005              {
   2006                  //TRACE_DEBUG((0, "ADM_I2C2 TAKE BUSY 2222 !! "));
   2007                  return FALSE;
   2008              }
   2009          
   2010              xOS_ADM_Parms.ADM_Call_Back_sema.xBlockTime = portMAX_DELAY;
   2011              if ( xSemaphoreTake( xOS_ADM_Parms.ADM_Call_Back_sema.xSemaphore, xOS_ADM_Parms.ADM_Call_Back_sema.xBlockTime ) != pdTRUE )
   2012              {
   2013                  //TRACE_DEBUG((0, "ADM_I2C2 TAKE BUSY 3333 !! "));
   2014                  return FALSE;
   2015              }
   2016              //TRACE_DEBUG((0, "ADM_I2C2_sema_mutex_take "));
   2017          #endif    
   2018              return TRUE;
   2019          }
   2020          
   2021          static bool ADM_Call_Back_sema_mutex_give( void )
   2022          {
   2023          #if 1
   2024              //if ( bIsI2C2_enable!= TRUE )
   2025              //    return FALSE;
   2026              //return TRUE;
   2027              if ( xOS_ADM_Parms.ADM_Call_Back_sema.xSemaphore == NULL )
   2028                  return FALSE;
   2029          
   2030              if ( xSemaphoreGive( xOS_ADM_Parms.ADM_Call_Back_sema.xSemaphore ) != pdTRUE )
   2031              {
   2032                  //TRACE_DEBUG((0, "ADM_I2C2 GIVE BUSY !! "));
   2033                  return FALSE;    
   2034              }
   2035              //TRACE_DEBUG((0, "ADM_I2C2_sema_mutex_give "));
   2036          #endif    
   2037              return TRUE;
   2038          }
   2039          
   2040          /*******************************************************************************
   2041           * Function_Back
   2042           ******************************************************************************/
   2043          
   2044          void AuidoDeviceManager_lowlevel_Function_Back_CreateTask( void )
   2045          {
   2046              if ( xTaskCreate( AuidoDeviceManager_lowlevel_BackCtl_task, 
   2047                      ( portCHAR * ) "AuidoDeviceManager_lowlevel_BackCtrl", 
   2048                      (STACK_SIZE), NULL, tskAUD_BACKCTRL_PRIORITY,&xOS_ADM_Parms.BackCtrlTaskHandle) != pdPASS )
   2049              {
   2050                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_BackCtrl task create failure " ));
   2051              }
   2052              else
   2053              {
   2054                  vTaskSuspend( xOS_ADM_Parms.BackCtrlTaskHandle);
   2055                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_BackCtrl task create OK?! " ));
   2056              }
   2057          
   2058              AudioDevBackCtlParams.QParams.xQueue = xQueueCreate( AUDIO_DEV_BACKCTL_QUEUE_LENGTH, FRTOS_SIZE(CS49844_QUEUE_TYPE) );
   2059              AudioDevBackCtlParams.QParams.xBlockTime = BLOCK_TIME(0);
   2060              if( AudioDevBackCtlParams.QParams.xQueue == NULL )
   2061              {
   2062                  TRACE_ERROR((0, "AudioDevBackCtlParams queue creates failure " ));
   2063              }
   2064              
   2065          }
   2066          
   2067          void AuidoDeviceManager_lowlevel_Function_Back_TaskCtrl( bool val )
   2068          {
   2069          
   2070              if ( val == BTASK_SUSPENDED )
   2071              {
   2072                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.BackCtrlTaskHandle ) != pdPASS ) /*task is working*/
   2073                  {
   2074                      vTaskSuspend( xOS_ADM_Parms.BackCtrlTaskHandle );
   2075                      TRACE_DEBUG((0, "SUSPEND: AuidoDeviceManager_lowlevel_Function_Back_TaskCtrl"));
   2076                  }
   2077              }
   2078              else
   2079              {
   2080                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.BackCtrlTaskHandle ) == pdPASS ) /*task is not working*/
   2081                  {
   2082                      vTaskResume( xOS_ADM_Parms.BackCtrlTaskHandle );
   2083                      TRACE_DEBUG((0, "RESUME: AuidoDeviceManager_lowlevel_Function_Back_TaskCtrl"));
   2084                  }
   2085              }
   2086          }
   2087          
   2088          bool AuidoDeviceManager_lowlevel_Function_Back_InstrSender( const void *params ) 
   2089          {
   2090             const CS49844_QUEUE_TYPE* pInstr = ( CS49844_QUEUE_TYPE *)params;
   2091             int ret_val = 0;
   2092              if ( pInstr == NULL )
   2093              {
   2094                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Function_Back_InstrSender parameters error !! "));
   2095                  return FALSE;
   2096              }
   2097              
   2098              if (AudioDevBackCtlParams.QParams.xQueue == NULL )
   2099              {
   2100                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Function_Back_InstrSender xqueue is null !! "));
   2101                  return FALSE;
   2102              }
   2103          
   2104              ret_val = xQueueSend( AudioDevBackCtlParams.QParams.xQueue, pInstr, AudioDevBackCtlParams.QParams.xBlockTime );
   2105              if (ret_val != pdPASS)
   2106              {
   2107                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Function_Back_InstrSender sends queue failure %d ",ret_val));
   2108                  return FALSE;
   2109              }
   2110          
   2111              return TRUE;
   2112          
   2113          }
   2114          
   2115          static bool AuidoDeviceManager_lowlevel_Function_Back_InstrReceiver( CS49844_QUEUE_TYPE *pInstr ) 
   2116          {
   2117              if ( pInstr == NULL )
   2118              {
   2119                  TRACE_ERROR((0, " AuidoDeviceManager_lowlevel_Function_Back_InstrReceiver instruction recevier error !! "));
   2120              }
   2121              
   2122              if ( AudioDevBackCtlParams.QParams.xQueue == NULL )
   2123              {
   2124                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Function_Back_InstrReceiver queue is null !! "));
   2125                  return FALSE;
   2126              }
   2127          
   2128              if ( xQueueReceive( AudioDevBackCtlParams.QParams.xQueue, pInstr, AudioDevBackCtlParams.QParams.xBlockTime ) != pdPASS )
   2129              {
   2130                  TRACE_ERROR((0, " AuidoDeviceManager_lowlevel_Function_Back_InstrReceiver receiver queue is failure "));
   2131                  return FALSE;
   2132              }
   2133          
   2134              return TRUE;
   2135          }
   2136          
   2137          static uint8 AudDevBackCtlHandler_GetQueueNumber( void )
   2138          {
   2139              return (uint8)uxQueueMessagesWaiting(AudioDevBackCtlParams.QParams.xQueue);
   2140          }
   2141          
   2142          void AuidoDeviceManager_lowlevel_BackCtl_task( void *pvParameters )
   2143          {
   2144              CS49844_QUEUE_TYPE systemParams;
   2145              
   2146              for(;;)
   2147              {
   2148                  //TRACE_DEBUG((0, "AuidoDeviceManager_lowlevel_BackCtl_task--1111111"));
   2149          
   2150                  ADM_Call_Back_sema_mutex_take();
   2151                  switch( AudioDevBackCtlParams.taskState )
   2152                  {
   2153                      case TASK_SUSPENDED:
   2154                      {
   2155                          if( AudDevBackCtlHandler_GetQueueNumber() > 0 )  
   2156                          {
   2157                              //TRACE_DEBUG((0, "AuidoDeviceManager_lowlevel_BackCtl_task--2222222222"));
   2158                              AudioDevBackCtlParams.taskState = TASK_READY;
   2159                          }
   2160                          else
   2161                          {
   2162                              break;
   2163                          }
   2164                      }
   2165                          break;
   2166                  
   2167                      case TASK_READY:
   2168                      {
   2169                          if ( AuidoDeviceManager_lowlevel_Function_Back_InstrReceiver( (CS49844_QUEUE_TYPE*)&systemParams ) == TRUE )
   2170                          {
   2171                              //TRACE_DEBUG((0,"                                             source_ctrl=%X,audio_type=%X",systemParams.source_ctrl,systemParams.audio_type));
   2172                              //TRACE_DEBUG((0, "AuidoDeviceManager_lowlevel_BackCtl_task"));
   2173                              AudioDevBackCtlParams.taskState = TASK_RUNING;
   2174                          }
   2175                          else
   2176                          {
   2177                              AudioDevBackCtlParams.taskState = TASK_SUSPENDED;
   2178                              break;
   2179                          }
   2180                      }
   2181                          //break;
   2182          
   2183                      case TASK_RUNING:
   2184                      {
   2185                          if (systemParams.source_ctrl == CS49844_SOURCE_ERROR)
   2186                          {
   2187                              pDSP_ObjCtrl->loader_task_ctrl( xOS_setTASK_SUSPENDED );
   2188                              pUDM_ObjCtrl->ExceptionSendEvent(UI_EVENT_ULD_ERROR);
   2189                              //AudioDevBackCtlParams.taskState = TASK_BLOCKED;
   2190                              AudioDevBackCtlParams.taskState = TASK_SUSPENDED;
   2191                              break;
   2192                          }
   2193                          
   2194                          switch( pAudioDevParms->input_src )
   2195                          {   
   2196                              case AUDIO_SOURCE_AUX1:
   2197                              case AUDIO_SOURCE_AUX2:
   2198                              case AUDIO_SOURCE_BLUETOOTH:
   2199                              case AUDIO_SOURCE_USB_PLAYBACK:
   2200                              {
   2201                                  pDSP_ObjCtrl->lowlevel_task_ctrl( xOS_setTASK_RESUME );
   2202                              }
   2203                          }
   2204                          
   2205                          AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_RESUME);
   2206                          
   2207                          if (systemParams.source_ctrl == CS49844_SOURCE_USER)
   2208                          {
   2209                              format_indicator =TRUE; /* TODO: not a good way*/
   2210                              pAudLowLevel_ObjCtrl->SetVolRampEvent(AUD_VOL_EVENT_VOLUME_RAMP);
   2211                          }
   2212          #if ( configSII_DEV_953x_PORTING == 1 )                
   2213                          else if (systemParams.source_ctrl == CS49844_SOURCE_DSP ||systemParams.source_ctrl == CS49844_SOURCE_HDMI)
   2214          #else
   2215                          else if (systemParams.source_ctrl == CS49844_SOURCE_DSP)
   2216          #endif
   2217                          {
   2218                              if (CurrentAudioStream != pDSP_ObjCtrl->GetAudioStreamType())
   2219                              {
   2220                                  format_indicator =TRUE; /* TODO: not a good way*/
   2221                              }
   2222                              pAudLowLevel_ObjCtrl->SetVolRampEvent(AUD_VOL_EVENT_SET_DEMUTE);
   2223                          }
   2224                          else if (systemParams.source_ctrl == CS49844_SOURCE_PROCESS_MODE)
   2225                          {
   2226                              format_indicator =FALSE; 
   2227                              pAudLowLevel_ObjCtrl->SetVolRampEvent(AUD_VOL_EVENT_SET_DEMUTE);
   2228                          }
   2229                         
   2230                          CurrentAudioStream = pDSP_ObjCtrl->GetAudioStreamType();
   2231                         
   2232                          pSRC_ObjCtrl->isr_ctrl( FUNC_ENABLE );
   2233          
   2234                          switch( pAudioDevParms->input_src )
   2235                          {
   2236                              case AUDIO_SOURCE_OPTICAL:
   2237                              case AUDIO_SOURCE_COAXIAL:
   2238          #if ( configSII_DEV_953x_PORTING == 1 )
   2239                              case AUDIO_SOURCE_HDMI_IN:
   2240                              case AUDIO_SOURCE_HDMI_ARC:	
   2241          #endif
   2242                              {
   2243                                  pDSP_ObjCtrl->fch_task_ctrl( xOS_setTASK_RESUME );
   2244                                  AudioDeviceManager_DigitalDetector_TaskCtrl(BTASK_RESUME);
   2245                              }
   2246                          }
   2247           
   2248                          AudioDevBackCtlParams.taskState = TASK_BLOCKED;
   2249                      }
   2250                          //break;
   2251          
   2252                      case TASK_BLOCKED:
   2253                      {
   2254                          AudioDevBackCtlParams.taskState = TASK_SUSPENDED;
   2255                      }
   2256                          break;    
   2257                  }
   2258                  ADM_Call_Back_sema_mutex_give();
   2259                  vTaskDelay(TASK_MSEC2TICKS(100));    
   2260              }
   2261          }
   2262          
   2263          /*******************************************************************************
   2264           * Exception
   2265           ******************************************************************************/
   2266          void AuidoDeviceManager_lowlevel_Exception_CreateTask( void )
   2267          {
   2268              if ( xTaskCreate( AuidoDeviceManager_lowlevel_Exception_Task, 
   2269                      ( portCHAR * ) "AuidoExceptionHandle", 
   2270                      (STACK_SIZE), NULL, tskAUD_EXCEPTION_PRIORITY,&xOS_ADM_Parms.Audio_Exception_handle) != pdPASS )
   2271              {
   2272                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Exception_Task create failure " ));
   2273              }
   2274              else
   2275              {
   2276                  vTaskSuspend( xOS_ADM_Parms.Audio_Exception_handle);
   2277                  TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Exception_Task create OK?! " ));
   2278              }
   2279          
   2280              AudioDevExceptParams.QParams.xQueue = xQueueCreate( AUDIO_DEV_EXCEPTION_QUEUE_LENGTH, FRTOS_SIZE(AUDIO_EXCEPTION_QUEUE_TYPE) );
   2281              AudioDevExceptParams.QParams.xBlockTime = BLOCK_TIME(0);
   2282              if( AudioDevExceptParams.QParams.xQueue == NULL )
   2283              {
   2284                  TRACE_ERROR((0, "AudioDevExceptionParams queue creates failure " ));
   2285              }
   2286          }
   2287          
   2288          static void AuidoDeviceManager_lowlevel_Exception_TaskCtrl( bool val )
   2289          {
   2290              if ( val == BTASK_SUSPENDED )
   2291              {
   2292                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.Audio_Exception_handle ) != pdPASS ) /*task is working*/
   2293                  {
   2294                      vTaskSuspend( xOS_ADM_Parms.Audio_Exception_handle );
   2295                      //TRACE_DEBUG((0, "SUSPEND: AuidoDeviceManager_lowlevel_Exception_Task"));
   2296                  }
   2297              }
   2298              else
   2299              {
   2300                  if ( xTaskIsTaskSuspended( xOS_ADM_Parms.Audio_Exception_handle ) == pdPASS ) /*task is not working*/
   2301                  {
   2302                      vTaskResume( xOS_ADM_Parms.Audio_Exception_handle );
   2303                      //TRACE_DEBUG((0, "RESUME: AuidoDeviceManager_lowlevel_Exception_Task"));
   2304                  }
   2305              }
   2306          }
   2307          
   2308          
   2309          static bool AuidoDeviceManager_lowlevel_Exception_InstrSender( const void *params ) 
   2310          {
   2311             const AUDIO_EXCEPTION_QUEUE_TYPE* pInstr = ( AUDIO_EXCEPTION_QUEUE_TYPE *)params;
   2312             int ret_val = 0;
   2313              if ( pInstr == NULL )
   2314              {
   2315                  //TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Exception_InstrSender parameters error !! "));
   2316                  return FALSE;
   2317              }
   2318              
   2319              if (AudioDevExceptParams.QParams.xQueue == NULL )
   2320              {
   2321                  //TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Exception_InstrSender xqueue is null !! "));
   2322                  return FALSE;
   2323              }
   2324          
   2325              ret_val = xQueueSend( AudioDevExceptParams.QParams.xQueue, pInstr, AudioDevExceptParams.QParams.xBlockTime );
   2326              if (ret_val != pdPASS)
   2327              {
   2328                  //TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Exception_InstrSender sends queue failure %d ",ret_val));
   2329                  return FALSE;
   2330              }
   2331          
   2332              return TRUE;
   2333          
   2334          }
   2335          
   2336          static bool AuidoDeviceManager_lowlevel_Exception_InstrReceiver( AUDIO_EXCEPTION_QUEUE_TYPE *pInstr ) 
   2337          {
   2338              if ( pInstr == NULL )
   2339              {
   2340                  //TRACE_ERROR((0, " AuidoDeviceManager_lowlevel_Exception_InstrReceiver instruction recevier error !! "));
   2341              }
   2342              
   2343              if ( AudioDevExceptParams.QParams.xQueue == NULL )
   2344              {
   2345                  //TRACE_ERROR((0, "AuidoDeviceManager_lowlevel_Exception_InstrReceiver queue is null !! "));
   2346                  return FALSE;
   2347              }
   2348          
   2349              if ( xQueueReceive( AudioDevExceptParams.QParams.xQueue, pInstr, AudioDevExceptParams.QParams.xBlockTime ) != pdPASS )
   2350              {
   2351                  //TRACE_ERROR((0, " AuidoDeviceManager_lowlevel_Exception_InstrReceiver receiver queue is failure "));
   2352                  return FALSE;
   2353              }
   2354          
   2355              return TRUE;
   2356          }
   2357          
   2358          static uint8 AudDevExceptionHandler_GetQueueNumber( void )
   2359          {
   2360              return (uint8)uxQueueMessagesWaiting(AudioDevExceptParams.QParams.xQueue);
   2361          }
   2362          
   2363          void AuidoDeviceManager_lowlevel_Exception_Task( void *pvParameters )
   2364          {
   2365          
   2366              AUDIO_EXCEPTION_QUEUE_TYPE systemParams;
   2367          
   2368              for(;;)
   2369              {
   2370                  ADM_Call_Back_sema_mutex_take();
   2371                  switch( AudioDevExceptParams.taskState )
   2372                  {
   2373                      case TASK_SUSPENDED:
   2374                      {
   2375                          if( AudDevExceptionHandler_GetQueueNumber() > 0 )  
   2376                          {
   2377                              //TRACE_DEBUG((0, "AuidoDeviceManager_lowlevel_BackCtl_task2222222222"));
   2378                              AudioDevExceptParams.taskState = TASK_READY;
   2379                          }
   2380                          else
   2381                          {
   2382                              break;
   2383                          }
   2384                      }
   2385                          //break;
   2386                  
   2387                      case TASK_READY:
   2388                      {
   2389                          if ( AuidoDeviceManager_lowlevel_Exception_InstrReceiver( (AUDIO_EXCEPTION_QUEUE_TYPE*)&systemParams ) == TRUE )
   2390                          {
   2391                              //TRACE_DEBUG((0,"                                             source_ctrl=%X,audio_type=%X",systemParams.source_ctrl,systemParams.audio_type));
   2392                              //TRACE_DEBUG((0, "AuidoDeviceManager_lowlevel_BackCtl_task"));
   2393                              AudioDevExceptParams.taskState = TASK_RUNING;
   2394                          }
   2395                          else
   2396                          {
   2397                              AudioDevExceptParams.taskState = TASK_SUSPENDED;
   2398                              break;
   2399                          }
   2400                          
   2401                      }
   2402                          //break;
   2403          
   2404                      case TASK_RUNING:
   2405                      {
   2406                          if (systemParams.event == SRC_BUS_FAULT)
   2407                          {
   2408                              AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_SUSPENDED );
   2409                              AudioDeviceManager_DigitalDetector_TaskCtrl(BTASK_SUSPENDED);
   2410                              //TRACE_DEBUG((0,"SRC_BUS_FAULT ADM_I2C2_sema_mutex_take"));
   2411                              if (ADM_I2C2_sema_mutex_take() == TRUE )
   2412                              {
   2413                                  pSRC_ObjCtrl->isr_ctrl( FUNC_DISABLE );
   2414                                  pAudLowLevel_ObjCtrl->RstSRC(); 
   2415                                  ADM_I2C2_sema_mutex_give();
   2416                                  pSRC_ObjCtrl->isr_ctrl( FUNC_ENABLE );
   2417                              }
   2418                              AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_RESUME);
   2419                              switch( pAudioDevParms->input_src )
   2420                              {
   2421                                  case AUDIO_SOURCE_OPTICAL:
   2422                                  case AUDIO_SOURCE_COAXIAL:
   2423          #if ( configSII_DEV_953x_PORTING == 1 )
   2424                                  case AUDIO_SOURCE_HDMI_IN:
   2425                                  case AUDIO_SOURCE_HDMI_ARC:	
   2426          #endif
   2427                                  {
   2428                                      //TRACE_DEBUG((0,"exception- AudioDeviceManager_DigitalDetector_TaskCtrl(BTASK_RESUME);"));
   2429                                      AudioDeviceManager_DigitalDetector_TaskCtrl(BTASK_RESUME);
   2430                                  }
   2431                                  break;
   2432                              }
   2433                              TRACE_DEBUG((0,"SRC_BUS_FAULT"));
   2434                          }
   2435          
   2436                          if(systemParams.event == SRC_RECEIVER_ERROR)
   2437                          {
   2438                              pDSP_ObjCtrl->setSilenceThreshold(FALSE);/* 0.25 sec*/
   2439                              //TRACE_DEBUG((0,"Silence threshold 0.25~~~~~~~~~~~~~~~"));
   2440                              if( pAudioDevParms->mute == SOUND_DEMUTE )
   2441                              {
   2442                                  if (ADM_I2C2_sema_mutex_take() == TRUE )
   2443                                  {
   2444                                      AudioDeviceManager_lowlevel_setMute( SOUND_DEMUTE );
   2445                                      ADM_I2C2_sema_mutex_give();
   2446                                  }
   2447                              }
   2448                          }
   2449                          
   2450                          if(systemParams.event == SRC_PCM_SILENCE)
   2451                          {
   2452                              pDSP_ObjCtrl->setSilenceThreshold(TRUE);/* 90 sec*/
   2453                              //TRACE_DEBUG((0,"Silence threshold 90s~~~~~~~~~~"));
   2454                          }
   2455          
   2456                          if(systemParams.event == SRC_FCH)
   2457                          {
   2458                              AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_SUSPENDED );
   2459                              AudioDeviceManager_DigitalDetector_TaskCtrl(BTASK_SUSPENDED);
   2460                              //TRACE_DEBUG((0,"~~~SRC_FCH ADM_I2C2_sema_mutex_take"));
   2461                              if (ADM_I2C2_sema_mutex_take() == TRUE )
   2462                              {
   2463                                  pSRC_ObjCtrl->isr_ctrl( FUNC_DISABLE );
   2464                                  pAudLowLevel_ObjCtrl->RstSRC(); 
   2465                                  ADM_I2C2_sema_mutex_give();
   2466                                  pSRC_ObjCtrl->isr_ctrl( FUNC_ENABLE );
   2467                              }
   2468                              AudioDeviceManager_SignalDetector_TaskCtrl( BTASK_RESUME);
   2469                              switch( pAudioDevParms->input_src )
   2470                              {
   2471                                  case AUDIO_SOURCE_OPTICAL:
   2472                                  case AUDIO_SOURCE_COAXIAL:
   2473          #if ( configSII_DEV_953x_PORTING == 1 )
   2474                                  case AUDIO_SOURCE_HDMI_IN:
   2475                                  case AUDIO_SOURCE_HDMI_ARC:	
   2476          #endif
   2477                                  {
   2478                                      //TRACE_DEBUG((0,"AudioDeviceManager_DigitalDetector_TaskCtrl(BTASK_RESUME);"));
   2479                                      AudioDeviceManager_DigitalDetector_TaskCtrl(BTASK_RESUME);
   2480                                  }
   2481                                  break;
   2482                              }
   2483                              //TRACE_DEBUG((0,"SRC_FCH~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"));
   2484                          }
   2485                          AudioDevExceptParams.taskState = TASK_BLOCKED;
   2486                      }
   2487                          //break;
   2488          
   2489                      case TASK_BLOCKED:
   2490                      {
   2491                          AudioDevExceptParams.taskState = TASK_SUSPENDED;
   2492                      }
   2493                          break;    
   2494                  }
   2495                  ADM_Call_Back_sema_mutex_give();
   2496                  vTaskDelay(TASK_MSEC2TICKS(50));    
   2497              }
   2498          }
   2499          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  ADM_Call_Back_sema_mutex_give
              8 -> xQueueGenericSend
        8  ADM_Call_Back_sema_mutex_take
              8 -> xQueueGenericReceive
        8  ADM_I2C2_sema_mutex_give
              8 -> xQueueGenericSend
        8  ADM_I2C2_sema_mutex_take
              8 -> xQueueGenericReceive
       32  AudioDeviceManager_CreateTask
             32 -- Indirect call
             32 -> vTaskDelete
             32 -> vTaskSuspend
             32 -> xQueueCreateMutex
             32 -> xTaskGenericCreate
        8  AudioDeviceManager_DeInitialize
              8 -- Indirect call
              0 -> ADM_I2C2_sema_mutex_give
              8 -> AudioDeviceManager_DigitalDetector_TaskCtrl
              8 -> AudioDeviceManager_SignalDetector_TaskCtrl
       24  AudioDeviceManager_DeviceConfig
             24 -- Indirect call
             24 -> AudioDeviceManager_InitializeParams
             24 -> AudioDeviceManager_lowlevel_AudParmsConfig
       32  AudioDeviceManager_DigitalDetectorTask
             32 -- Indirect call
             32 -> ADM_I2C2_sema_mutex_give
             32 -> ADM_I2C2_sema_mutex_take
             32 -> AudioSystem_Cover_PCM96Khz
             32 -> AudioSystem_isPCM_96Khz
             32 -> vTaskDelay
        8  AudioDeviceManager_DigitalDetector_TaskCtrl
              0 -> ADM_I2C2_sema_mutex_give
              8 -> vTaskDelay
              0 -> vTaskResume
              8 -> vTaskSuspend
              8 -> xTaskIsTaskSuspended
        8  AudioDeviceManager_Initialize
              0 -- Indirect call
              8 -- Indirect call
              8 -> ADM_I2C2_sema_mutex_give
              8 -> ADM_I2C2_sema_mutex_take
              8 -> AudioDeviceManager_InitializeParams
        0  AudioDeviceManager_InitializeParams
       24  AudioDeviceManager_SignalDetectorTask
             24 -- Indirect call
             24 -> ADM_I2C2_sema_mutex_give
             24 -> ADM_I2C2_sema_mutex_take
             24 -> vTaskDelay
        8  AudioDeviceManager_SignalDetector_TaskCtrl
              0 -> ADM_I2C2_sema_mutex_give
              0 -> vTaskResume
              8 -> vTaskSuspend
              8 -> xTaskIsTaskSuspended
        0  AudioDeviceManager_getAudParams
              0 -> __aeabi_memcpy
        0  AudioDeviceManager_getSignalAvailable
       24  AudioDeviceManager_lowlevel_AudParmsConfig
             24 -- Indirect call
             24 -> AuidoDeviceManager_lowlevel_setLsRs
             24 -> AuidoDeviceManager_lowlevel_setMasterGain
              0 -> Debug_printDebug
        0  AudioDeviceManager_lowlevel_AudioRouter
              0 -- Indirect call
        8  AudioDeviceManager_lowlevel_rstSRC
              0 -- Indirect call
              8 -- Indirect call
              8 -> GPIOMiddleLevel_Clr
              8 -> GPIOMiddleLevel_Set
              8 -> vTaskDelay
       16  AudioDeviceManager_lowlevel_setMute
              0 -- Indirect call
             16 -- Indirect call
       16  AudioDeviceManager_setInputPath
             16 -- Indirect call
              0 -> Debug_printDebug
             16 -> GPIOMiddleLevel_Set
        0  AudioStream_get_PCM
        0  AudioStream_get_PCM96Khz
        0  AudioStream_set_PCM
        0  AudioStream_set_PCM96Khz
        8  AudioSystem_Cover_PCM96Khz
              0 -- Indirect call
              8 -- Indirect call
       16  AudioSystem_isPCM_96Khz
             16 -- Indirect call
        8  AuidoDeviceManager_Factory_AQBypass
              8 -- Indirect call
              0 -> Debug_printDebug
        0  AuidoDeviceManager_Route_Ctrl
              0 -> AudioDeviceManager_lowlevel_AudioRouter
       24  AuidoDeviceManager_VolController_CreateTask
              0 -> Debug_printError
             24 -> vTaskSuspend
             24 -> xTaskGenericCreate
        0  AuidoDeviceManager_VolController_RampStauts
        0  AuidoDeviceManager_VolController_TargetVol
        8  AuidoDeviceManager_VolController_TaskCtrl
              0 -> Debug_printDebug
              8 -> vTaskResume
              8 -> vTaskSuspend
              8 -> xTaskIsTaskSuspended
        0  AuidoDeviceManager_VolController_VolStauts
        0  AuidoDeviceManager_VolController_setEvent
              0 -> AuidoDeviceManager_lowlevel_VolController_setEvent
       32  AuidoDeviceManager_VolController_task
             32 -- Indirect call
             32 -> ADM_I2C2_sema_mutex_give
             32 -> ADM_I2C2_sema_mutex_take
             32 -> AudioDeviceManager_lowlevel_setMute
             32 -> AuidoDeviceManager_lowlevel_setMasterGain
             32 -> Debug_printDebug
             32 -> vTaskDelay
       40  AuidoDeviceManager_lowlevel_BackCtl_task
             40 -- Indirect call
             40 -> ADM_Call_Back_sema_mutex_give
             40 -> ADM_Call_Back_sema_mutex_take
             40 -> AudioDeviceManager_DigitalDetector_TaskCtrl
             40 -> AudioDeviceManager_SignalDetector_TaskCtrl
             40 -> Debug_printError
             40 -> uxQueueMessagesWaiting
             40 -> vTaskDelay
             40 -> xQueueGenericReceive
       24  AuidoDeviceManager_lowlevel_Exception_CreateTask
              0 -> Debug_printError
             24 -> Debug_printError
             24 -> vTaskSuspend
             24 -> xQueueGenericCreate
             24 -> xTaskGenericCreate
        8  AuidoDeviceManager_lowlevel_Exception_InstrSender
              8 -> xQueueGenericSend
       32  AuidoDeviceManager_lowlevel_Exception_Task
             32 -- Indirect call
             32 -> ADM_Call_Back_sema_mutex_give
             32 -> ADM_Call_Back_sema_mutex_take
             32 -> ADM_I2C2_sema_mutex_give
             32 -> ADM_I2C2_sema_mutex_take
             32 -> AudioDeviceManager_DigitalDetector_TaskCtrl
             32 -> AudioDeviceManager_SignalDetector_TaskCtrl
             32 -> AudioDeviceManager_lowlevel_setMute
             32 -> Debug_printDebug
             32 -> uxQueueMessagesWaiting
             32 -> vTaskDelay
             32 -> xQueueGenericReceive
        8  AuidoDeviceManager_lowlevel_Exception_TaskCtrl
              0 -> vTaskResume
              0 -> vTaskSuspend
              8 -> xTaskIsTaskSuspended
       24  AuidoDeviceManager_lowlevel_Function_Back_CreateTask
              0 -> Debug_printError
             24 -> Debug_printError
             24 -> vTaskSuspend
             24 -> xQueueGenericCreate
             24 -> xTaskGenericCreate
        8  AuidoDeviceManager_lowlevel_Function_Back_InstrSender
              8 -> Debug_printError
              8 -> xQueueGenericSend
        8  AuidoDeviceManager_lowlevel_Function_Back_TaskCtrl
              0 -> Debug_printDebug
              8 -> vTaskResume
              8 -> vTaskSuspend
              8 -> xTaskIsTaskSuspended
       16  AuidoDeviceManager_lowlevel_VolController_setEvent
              0 -> ADM_I2C2_sema_mutex_give
             16 -> ADM_I2C2_sema_mutex_take
             16 -> AudioDeviceManager_lowlevel_setMute
             16 -> AuidoDeviceManager_lowlevel_setMasterGain
             16 -> Debug_printDebug
        0  AuidoDeviceManager_lowlevel_getAudioStreamType
              0 -- Indirect call
       16  AuidoDeviceManager_lowlevel_setLsRs
              0 -- Indirect call
             16 -- Indirect call
        0  AuidoDeviceManager_lowlevel_setMasterGain
              0 -- Indirect call
        8  AuidoDeviceManager_setAVDelay
              8 -- Indirect call
              0 -> Debug_printDebug
       16  AuidoDeviceManager_setBalance
             16 -- Indirect call
              0 -> Debug_printDebug
        8  AuidoDeviceManager_setBass
              8 -- Indirect call
              0 -> Debug_printDebug
        8  AuidoDeviceManager_setCenter
              8 -- Indirect call
              0 -> Debug_printDebug
       16  AuidoDeviceManager_setLsRs
             16 -- Indirect call
              0 -> Debug_printDebug
        8  AuidoDeviceManager_setNightMode
              8 -- Indirect call
              0 -> Debug_printDebug
       24  AuidoDeviceManager_setSRSTruVolTSHD
             24 -- Indirect call
             24 -> AudioDeviceManager_lowlevel_setMute
       16  AuidoDeviceManager_setSub
             16 -- Indirect call
              0 -> Debug_printDebug
        8  AuidoDeviceManager_setTreble
              8 -- Indirect call
              0 -> Debug_printDebug


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  ?<Constant " 2222 show pairing le...">
      84  ?<Constant " AuidoDeviceManager_l...">
       8  ?<Constant "ADM_SDT">
      16  ?<Constant "AV Delay = %d">
      48  ?<Constant "AudioDevBackCtlParams...">
      48  ?<Constant "AudioDevExceptionPara...">
      40  ?<Constant "AudioSystemHandler_VR...">
      24  ?<Constant "AuidoDeviceManager_VR">
      44  ?<Constant "AuidoDeviceManager_VR...">
      40  ?<Constant "AuidoDeviceManager_lo...">
      60  ?<Constant "AuidoDeviceManager_lo...">_1
      56  ?<Constant "AuidoDeviceManager_lo...">_2
      76  ?<Constant "AuidoDeviceManager_lo...">_3
      76  ?<Constant "AuidoDeviceManager_lo...">_4
      80  ?<Constant "AuidoDeviceManager_lo...">_5
      76  ?<Constant "AuidoDeviceManager_lo...">_6
      60  ?<Constant "AuidoDeviceManager_lo...">_7
      56  ?<Constant "AuidoDeviceManager_lo...">_8
      24  ?<Constant "AuidoExceptionHandle">
      16  ?<Constant "BALANCE = %d">
      16  ?<Constant "BASS Gain = %d">
      20  ?<Constant "Center Gain = %d">
      28  ?<Constant "Change target volume ...">
      36  ?<Constant "Configure lowlevel au...">
      16  ?<Constant "LsRs Gain = %d">
      20  ?<Constant "Master Gain = %d">
      16  ?<Constant "Night Mode = %d">
      20  ?<Constant "PCM_51_BPS_PARMS">
      24  ?<Constant "PCM_51_DIS_BPS_PARMS">
      44  ?<Constant "RESUME: AuidoDeviceMa...">
      60  ?<Constant "RESUME: AuidoDeviceMa...">_1
      16  ?<Constant "SRC_BUS_FAULT">
      44  ?<Constant "SUSPEND: AuidoDeviceM...">
      60  ?<Constant "SUSPEND: AuidoDeviceM...">_1
      16  ?<Constant "Sub Gain = %d">
      20  ?<Constant "TREBLE Gain = %d">
      12  ?<Constant "VOL = %d">
      20  ?<Constant "VRE_RAMP_INITIAL">
      16  ?<Constant "input path = %d">
       4  ??DataTable104
       4  ??DataTable104_1
       4  ??DataTable108
       4  ??DataTable109
       4  ??DataTable109_1
       4  ??DataTable109_2
       4  ??DataTable109_3
       4  ??DataTable109_4
       4  ??DataTable109_5
       4  ??DataTable89
       4  ??DataTable89_1
       4  ??DataTable89_10
       4  ??DataTable89_11
       4  ??DataTable89_12
       4  ??DataTable89_13
       4  ??DataTable89_14
       4  ??DataTable89_15
       4  ??DataTable89_16
       4  ??DataTable89_17
       4  ??DataTable89_18
       4  ??DataTable89_19
       4  ??DataTable89_2
       4  ??DataTable89_3
       4  ??DataTable89_4
       4  ??DataTable89_5
       4  ??DataTable89_6
       4  ??DataTable89_7
       4  ??DataTable89_8
       4  ??DataTable89_9
       8  ??Subroutine25_0
       6  ?Subroutine0
      10  ?Subroutine1
       8  ?Subroutine10
       8  ?Subroutine11
      28  ?Subroutine12
      12  ?Subroutine13
       8  ?Subroutine14
       8  ?Subroutine15
       8  ?Subroutine16
      14  ?Subroutine17
      20  ?Subroutine18
      10  ?Subroutine19
       4  ?Subroutine2
       8  ?Subroutine20
       8  ?Subroutine21
      18  ?Subroutine22
      10  ?Subroutine23
      10  ?Subroutine24
       8  ?Subroutine3
      12  ?Subroutine4
       8  ?Subroutine5
      12  ?Subroutine6
      16  ?Subroutine7
       4  ?Subroutine8
      12  ?Subroutine9
      24  ADM_Call_Back_sema_mutex_give
      34  ADM_Call_Back_sema_mutex_take
      24  ADM_I2C2_sema_mutex_give
      34  ADM_I2C2_sema_mutex_take
      16  AudioDevExceptParams
      96  AudioDeviceManager
     168  AudioDeviceManager_CreateTask
      84  AudioDeviceManager_DeInitialize
      56  AudioDeviceManager_DeviceConfig
     256  AudioDeviceManager_DigitalDetectorTask
      46  AudioDeviceManager_DigitalDetector_TaskCtrl
      66  AudioDeviceManager_Initialize
      66  AudioDeviceManager_InitializeParams
     122  AudioDeviceManager_SignalDetectorTask
      44  AudioDeviceManager_SignalDetector_TaskCtrl
      12  AudioDeviceManager_getAudParams
       8  AudioDeviceManager_getSignalAvailable
     316  AudioDeviceManager_lowlevel_AudParmsConfig
      76  AudioDeviceManager_lowlevel_AudioRouter
      96  AudioDeviceManager_lowlevel_rstSRC
      82  AudioDeviceManager_lowlevel_setMute
      56  AudioDeviceManager_setInputPath
      44  AudioLowLeveDriver
       8  AudioStream_get_PCM
       8  AudioStream_get_PCM96Khz
       8  AudioStream_set_PCM
       8  AudioStream_set_PCM96Khz
      82  AudioSystem_Cover_PCM96Khz
      74  AudioSystem_isPCM_96Khz
      58  AuidoDeviceManager_Factory_AQBypass
       2  AuidoDeviceManager_Route_Ctrl
      58  AuidoDeviceManager_VolController_CreateTask
      18  AuidoDeviceManager_VolController_RampStauts
       8  AuidoDeviceManager_VolController_TargetVol
      54  AuidoDeviceManager_VolController_TaskCtrl
       8  AuidoDeviceManager_VolController_VolStauts
      14  AuidoDeviceManager_VolController_setEvent
     448  AuidoDeviceManager_VolController_task
     262  AuidoDeviceManager_lowlevel_BackCtl_task
      92  AuidoDeviceManager_lowlevel_Exception_CreateTask
      26  AuidoDeviceManager_lowlevel_Exception_InstrSender
     294  AuidoDeviceManager_lowlevel_Exception_Task
      44  AuidoDeviceManager_lowlevel_Exception_TaskCtrl
      86  AuidoDeviceManager_lowlevel_Function_Back_CreateTask
      54  AuidoDeviceManager_lowlevel_Function_Back_InstrSender
      56  AuidoDeviceManager_lowlevel_Function_Back_TaskCtrl
     184  AuidoDeviceManager_lowlevel_VolController_setEvent
      10  AuidoDeviceManager_lowlevel_getAudioStreamType
      24  AuidoDeviceManager_lowlevel_setLsRs
      18  AuidoDeviceManager_lowlevel_setMasterGain
      28  AuidoDeviceManager_setAVDelay
      88  AuidoDeviceManager_setBalance
      34  AuidoDeviceManager_setBass
      36  AuidoDeviceManager_setCenter
      36  AuidoDeviceManager_setLsRs
      42  AuidoDeviceManager_setNightMode
      76  AuidoDeviceManager_setSRSTruVolTSHD
     122  AuidoDeviceManager_setSub
      36  AuidoDeviceManager_setTreble
      52  BALANCE_AC3_GAIN
      52  BALANCE_DTS_GAIN
      52  BALANCE_PCM_GAIN
      52  Bass_table
      52  CENTER_GAIN
      52  LS_RS_AC3_GAIN
      52  LS_RS_DTS_GAIN
      52  LS_RS_PCM51_GAIN
      96  MASTER_GAIN_TABLE
      64  PCM_51_BPS_PARMS
      64  PCM_51_DIS_BPS_PARMS
      52  SUB_AC321_GAIN
      52  SUB_AC351_GAIN
      52  SUB_DTS21_GAIN
      52  SUB_DTS51_GAIN
      52  SUB_PCM21_GAIN
      52  SUB_PCM51_GAIN
      52  Treb_table
     108  mAudDevParms
          mVolumeRampEvent
          mIsPCM96Khz
          mIsPCM
          SignalAvailable
          ramp_delay
          format_indicator
          CurrentAudioStream
          volume_inc
          target_volume
          CurrentHDMIAudiotype
          LastHDMIAudiotype
          AudioDevBackCtlParams
          vre_ramp_count
          xOS_ADM_Parms
          pAudioDevParms
          pADM_ObjCtrl
          pAudLowLevel_ObjCtrl

 
    16 bytes in section .bss
   108 bytes in section .data
   140 bytes in section .rodata
 7 044 bytes in section .text
 
 7 044 bytes of CODE  memory
   140 bytes of CONST memory
   124 bytes of DATA  memory

Errors: none
Warnings: 7

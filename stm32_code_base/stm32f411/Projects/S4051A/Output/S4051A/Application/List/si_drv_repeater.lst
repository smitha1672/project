###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:23:28 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\driver\repeater_avr_drv #
#                    \si_drv_repeater.c                                       #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\driver\repeater_avr_drv #
#                    \si_drv_repeater.c -D S4051A -D DEBUG -D FREE_RTOS -D    #
#                    STM32F40_41xxx -D USE_STM324xG_EVAL -D                   #
#                    USE_STDPERIPH_DRIVER -D __ARM_CORTEX_MX__ -D             #
#                    IAR_ARM_CM4F -D USE_USB_OTG_FS -lcN                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\ #
#                    DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applica #
#                    tion\Obj\ --debug --endian=little --cpu=Cortex-M4 -e     #
#                    --fpu=VFPv4_sp --dlib_config "C:\Program Files           #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\si_drv_repeater.lst                                   #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\si_drv_repeater.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\driver\repeater_avr_drv\si_drv_repeater.c
      1          //***************************************************************************
      2          //!file     si_drv_repeater.c
      3          //!brief    Silicon Image Repeater Driver.
      4          //
      5          // No part of this work may be reproduced, modified, distributed,
      6          // transmitted, transcribed, or translated into any language or computer
      7          // format, in any form or by any means without written permission of
      8          // Silicon Image, Inc., 1140 East Arques Avenue, Sunnyvale, California 94085
      9          //
     10          // Copyright 2010-2012, Silicon Image, Inc.  All rights reserved.
     11          //***************************************************************************/
     12          
     13          #include "si_drv_repeater.h"
     14          #include "si_drv_internal.h"
     15          #include "si_gpio.h"
     16          #include "si_regs_tpi953x.h"
     17          
     18          
     19          
     20          //#define NONE_REPT_WITH_TX_ON
     21          
     22          
     23          uint8_t mainPort = 0x00; //as default
     24          uint8_t inputPort[SII_NUM_PIPE];
     25          uint8_t	pipeNumber;
     26          RepeaterTopoMode_t currentTopoMode;
     27          bool_t  intStatus[SII_NUM_PIPE];
     28          bool_t  resChngStatus[SII_NUM_PIPE];
     29          bool_t  inputPortToChange;
     30          
     31          // SWWA_FP1554
     32          #if INC_OSD
     33          #include "si_drv_osd_internal.h"
     34          #endif
     35          // SWWA_FP1554
     36          
     37          //-------------------------------------------------------------------------------------------------
     38          //! @brief      get the corresponding register name for the pipe
     39          //!
     40          //-------------------------------------------------------------------------------------------------
     41          
     42          static uint16_t GetRegName(uint16_t regName)
     43          {
     44          	uint16_t resultName = 0xFFFF;
     45          
     46          	switch(regName)
     47          	{
     48          		case REG_MP_STATE:
     49          				resultName = (pipeNumber == 0) ? REG_MP_STATE : REG_RP_STATE;
     50          				break;
     51          		case REG_MP_GCP_STATUS:
     52          				resultName = (pipeNumber == 0) ? REG_MP_GCP_STATUS : REG_RP_GCP_STATUS;
     53          				break;
     54          
     55          	}
     56          	return resultName;
     57          }
     58          
     59          //-------------------------------------------------------------------------------------------------
     60          //! @brief      init repeater driver
     61          //!
     62          //-------------------------------------------------------------------------------------------------
     63          
     64          void SiiDrvRepeaterInit()
     65          {
     66          	uint8_t i;
     67          	for (i=0;i<SII_NUM_PIPE;i++)
     68          	{
     69          		inputPort[i]     = SiiPORT_0;  //legal when in Instrp mode.
     70          		intStatus[i]     = false;
     71          		resChngStatus[i] = false;
     72          	}
     73          	pipeNumber = 0;
     74          	currentTopoMode = SI_RPT_MODE_INITIAL;
     75          	inputPortToChange = false;
     76          	SiiRegWrite(REG_HDCP_KSV_FIFO_CTRL, VAL_HDCP_FIFO_VALID);
     77          }
     78          
     79          //-------------------------------------------------------------------------------------------------
     80          //! @brief      set repeater mode
     81          //!
     82          //-------------------------------------------------------------------------------------------------
     83          
     84          void SiiDrvRepeaterSetMode(RepeaterTopoMode_t cmode)
     85          {
     86          	if( currentTopoMode != cmode )
     87          	{
     88          		//to clear all the rep bits, application will set it on later with active Tx.
     89          		currentTopoMode =  SI_RPT_MODE_SINGLE_REPEATER;
     90          		SiiDrvRepeaterSetBcapsRepeaterBits(OFF);
     91          		currentTopoMode = cmode;
     92          	}
     93          }
     94          
     95          //-------------------------------------------------------------------------------------------------
     96          //! @brief      set instance 
     97          //!
     98          //! @param[in]  selectedInstance - current instance
     99          //-------------------------------------------------------------------------------------------------
    100          
    101          void SiiDrvRepeaterInstanceSet(uint8_t setP)
    102          {
    103          	pipeNumber = setP;
    104          }
    105          
    106          //-------------------------------------------------------------------------------------------------
    107          //! @brief      if the rx SCDT is on for the inputs list, or the (main/sub)channel 
    108          //! @param[in]  none
    109          //! @return     true: ON
    110          //!				false: OFF
    111          //-------------------------------------------------------------------------------------------------
    112          
    113          bool_t SiiDrvRepeaterRxSyncIsOn( void )
    114          {
    115          	return (SiiRegRead( GetRegName( REG_MP_STATE)) & BIT_SCDT);
    116          }
    117          
    118          //-------------------------------------------------------------------------------------------------
    119          //! @brief      if the rx main port SCDT interrupt happened
    120          //! @param[in]  none
    121          //! @return     true: interrupt happened
    122          //!				false: interrupt not happened
    123          //-------------------------------------------------------------------------------------------------
    124          
    125          bool_t SiiDrvRepeaterRxSyncIntr( void )
    126          {
    127          	uint8_t intSt = 0;
    128          
    129          	intSt = SiiRegRead( REG_INT_STATUS_2 ) & ((pipeNumber == 0) ? BIT_SCDT_CHG : BIT_RP_SCDT_CHG);
    130          	
    131          	if (intSt)
    132          	{
    133          		SiiRegWrite( REG_INT_STATUS_2, (pipeNumber == 0) ? BIT_SCDT_CHG : BIT_RP_SCDT_CHG);
    134          		return true;
    135          	}
    136          	return false;
    137          }
    138          
    139          //-------------------------------------------------------------------------------------------------
    140          //! @brief      if the rx main port is authenticated
    141          //! @param[in]  none
    142          //! @return     true: authenticated
    143          //!				false:not authenticated
    144          //-------------------------------------------------------------------------------------------------
    145          
    146          bool_t SiiDrvRepeaterMainPortAuthed( void )
    147          {
    148          	bool_t result = false;
    149          
    150          	result = (SiiRegRead(GetRegName(REG_MP_STATE)) & BIT_DECRYPT_STATUS);
    151          
    152             	return result;
    153          }
    154          
    155          
    156          //-------------------------------------------------------------------------------------------------
    157          //! @brief      toggle the Rx Hot Plug High or Low
    158          //! @param[in]  true: High
    159          //!				false: Low
    160          //-------------------------------------------------------------------------------------------------
    161          
    162          void SiiDrvRepeaterSwitchRxHotPlug(bool_t switch_on)
    163          {
    164          // SWWA_FP1554
    165          #if INC_OSD
    166              {
    167                  if ( !switch_on )
    168                  {
    169                      // Turn off OSD_EN so that the loss of TCLK when the RX is shut off will not
    170                      // affect OSDRAM transfer operations.
    171                    //  DEBUG_PRINT( MSG_DBG, "\nSWWA_FP1554: OSD_EN = 0 (RPTR_RX_OFF)\n");
    172                      DrvOsdDisableInternal();
    173                  }
    174              }
    175          #endif
    176          // SWWA_FP1554
    177          
    178          // Bug 33051 - [CP9533_FW] MHL1/2:Video color is incorrect after hotplug DS HDMI cable of 9533
    179          
    180          //	if (currentTopoMode == SI_RPT_MODE_SINGLE_REPEATER)
    181          //	{
    182          
    183          		if ( switch_on )
    184          		{
    185          		    SiiDrvRxHpeStateSet( SiiPORT_ALL, SiiHPD_ACTIVE );
    186          		}
    187          		else
    188          		{
    189          		    SiiDrvRxHpeStateSet( SiiPORT_ALL, SiiHPD_INACTIVE );
    190          		}
    191          
    192              /*}
    193          	else if (currentTopoMode == SI_RPT_MODE_MULTIPLE_REPEATER)
    194          	{
    195          		if( switch_on )
    196          		{
    197          		    SiiDrvRxHpeStateSet( inputPort[pipeNumber], SiiHPD_ACTIVE );
    198          		}
    199          		else
    200          		{
    201          		    SiiDrvRxHpeStateSet( inputPort[pipeNumber], SiiHPD_INACTIVE );
    202          		}
    203          	}*/
    204          
    205              DEBUG_PRINT( MSG_DBG, "RX: HPD %s\n", switch_on ? "ON" : "OFF");
    206          	TRACE_DEBUG((0, "[ HDMI MSG] RX: HPD %s", switch_on ? "ON" : "OFF" ));
    207          /*   if(switch_on)
    208             {
    209          //
    210          //     SiiRegModify ( REG_SYS_RESET_1, BIT0, SET_BITS);
    211          //     SiiRegModify ( REG_SYS_RESET_1, BIT0, CLEAR_BITS);
    212          //     DEBUG_PRINT( MSG_DBG, "\n\n RX--SOFTRESET IS PERFORMED\n\n");
    213               SiiRegModify ( REG_TPI__RAR, BIT0, SET_BITS);
    214               SiiPlatformTimerWait( 500 );
    215               SiiRegModify ( REG_TPI__RAR, BIT0, CLEAR_BITS);
    216          //     SiiDrvTpiIndirectWrite(REG_TX__TMDS_ZONE_CTRL2, 0x09);
    217          ////   SiiTxInitialize();
    218                DEBUG_PRINT( MSG_DBG, "\n\nTX--SOFTRESET IS PERFORMED\n\n");
    219          //	    SiiDrvRxTermControl(0,false);
    220          //	    SiiPlatformTimerWait( 500 );
    221          //	    SiiDrvRxTermControl(0,true);
    222             }*/
    223          }
    224          
    225          //-------------------------------------------------------------------------------------------------
    226          //! @brief      clear the bstatus of Rx
    227          //-------------------------------------------------------------------------------------------------
    228          
    229          void SiiDrvRepeaterRxHdcpReset(void)
    230          {
    231          	uint8_t clearStatus[] = {0,0};
    232              // inform US side about the failure
    233          	SiiDrvRepeaterSetUsBstatus(clearStatus);
    234          }
    235          
    236          //-------------------------------------------------------------------------------------------------
    237          //! @brief      if the rx main port has HPD, or is MHD
    238          //! @param[in]  none
    239          //! @return     true: has HPD
    240          //!				false:no HPD
    241          //-------------------------------------------------------------------------------------------------
    242          
    243          bool_t SiiDrvRepeaterIsRxHotPlugAsserted(void)
    244          {
    245          
    246          	if( (SiiRegRead(REG_RX_PORT_SEL) & MSK_MP_PORT_SEL) != SiiSwitchSource1)
    247          	{
    248          		return  (SiiRegRead( REG_MP_STATE ) & ( BIT_PWR5V | BIT_MHL ));
    249          	}
    250          	else
    251          	{
    252          		return (SiiPlatformMHLCDSensePinGet( SiiSwitchSource1 )? SiiPortType_HDMI:SiiPortType_MHL);
    253          	}
    254          
    255          //	return (SiiRegRead(GetRegName(REG_MP_STATE)) & ( BIT_PWR5V | BIT_MHL));
    256          }
    257          
    258          //-------------------------------------------------------------------------------------------------
    259          //! @brief      assign rx bstatus bytes
    260          //! @param[in]  us_bstatus
    261          //-------------------------------------------------------------------------------------------------
    262          
    263          void SiiDrvRepeaterSetUsBstatus(uint8_t us_bstatus[2])
    264          {
    265          
    266              SiiRegWriteBlock(REG_HDCP_SHD_BSTAT1, us_bstatus, 2);
    267          }
    268          
    269          //-------------------------------------------------------------------------------------------------
    270          //! @brief      set the bacps repeater bits
    271          //! @param[in]  true: ON
    272          //!				false: OFF
    273          //-------------------------------------------------------------------------------------------------
    274          
    275          void SiiDrvRepeaterSetBcapsRepeaterBits(bool_t switchOn)
    276          {
    277          #ifdef 	NONE_REPT_WITH_TX_ON
    278           	switchOn = false;
    279          #endif
    280          
    281          //IF INSTA PORT MODE, ALL CLEARED OR SET
    282          //if matrix mode, individually set
    283              if (currentTopoMode == SI_RPT_MODE_MULTIPLE_REPEATER)
    284          	{
    285          		if (switchOn)
    286          		{
    287          			//Enable repeater bit for port 0-3
    288          			if (inputPort[pipeNumber] <= SiiPORT_3)
    289          			{
    290          				SiiRegModify(REG_HDCP_BCAPS_SET, 0x02 << (inputPort[pipeNumber] * 2), SET_BITS);
    291          			}
    292          
    293          
    294          
    295          		}
    296          		else
    297          		{
    298          			if (inputPort[pipeNumber] <= SiiPORT_3)
    299          				SiiRegModify(REG_HDCP_BCAPS_SET, 0x03 << (inputPort[pipeNumber] * 2), CLEAR_BITS); //both repeater and FIFO rdy
    300          
    301          
    302          
    303          		}
    304          
    305          
    306          	}
    307          	else //if(currentTopoMode == SI_RPT_MODE_SINGLE_REPEATER)
    308          	{
    309          		if (switchOn)
    310          		{
    311          			//Enable repeater bit for port 0-3
    312          			SiiRegWrite(REG_HDCP_BCAPS_SET,
    313          					VAL_P3_REPEATER | VAL_P2_REPEATER | VAL_P1_REPEATER | VAL_P0_REPEATER);
    314          
    315          
    316          		}
    317          		else
    318          		{
    319          			//Disable repeater bit for port 0-3
    320          			SiiRegWrite(REG_HDCP_BCAPS_SET, CLEAR_BITS);
    321          
    322          
    323          		}
    324          	}
    325          
    326          //	if switchOn
    327          	SiiRegModify(REG_HDCP_KSV_FIFO_CTRL, VAL_HDCP_FIFO_VALID, SET_BITS);
    328          
    329          }
    330          
    331          //-------------------------------------------------------------------------------------------------
    332          //! @brief      toggle the Rx Hot Plug High or Low
    333          //
    334          //! @param[in]  portIndex- the active port
    335          //!				switchOn-
    336          //!						true: High
    337          //!						false: Low
    338          //-------------------------------------------------------------------------------------------------
    339          void SiiDrvRepeaterSetBcapsFifoReady(bool_t switchOn)
    340          {
    341              uint8_t bcaps_msk = 0;
    342              uint8_t bcaps_val = 0;
    343              uint8_t portIndex = inputPort[pipeNumber];
    344          
    345              //HW sets ready bit itself when ready.
    346              //FW sets ready bit manually to ensure when SHA is assigned to Tx,
    347              //Ready bit still active
    348              //HW clears the ready bit when new authentication starts
    349          
    350          
    351              if(currentTopoMode != SI_RPT_MODE_MULTIPLE_REPEATER)
    352              {
    353              	portIndex = SiiPORT_ALL;
    354              }
    355          
    356          	if ( portIndex == SiiPORT_ALL )
    357          	{
    358          		bcaps_val = (switchOn) ? SET_BITS : CLEAR_BITS;
    359          		bcaps_msk = BIT_P0_FIFO_RDY|BIT_P1_FIFO_RDY|BIT_P2_FIFO_RDY|BIT_P3_FIFO_RDY;
    360          
    361          		SiiRegModify(REG_HDCP_BCAPS_SET, bcaps_msk, bcaps_val);
    362          		return;
    363          	}
    364          
    365          	switch(portIndex)
    366          	{
    367          		case SiiPORT_0:
    368          				bcaps_msk = BIT_P0_FIFO_RDY;
    369          				break;
    370          		case SiiPORT_1:
    371          				bcaps_msk = BIT_P1_FIFO_RDY;
    372          				break;
    373          		case SiiPORT_2:
    374          				bcaps_msk = BIT_P2_FIFO_RDY;
    375          				break;
    376          		case SiiPORT_3:
    377          				bcaps_msk = BIT_P3_FIFO_RDY;
    378          				break;
    379          	}
    380          
    381          	bcaps_val = (switchOn) ? SET_BITS : CLEAR_BITS;
    382          	SiiRegModify(REG_HDCP_BCAPS_SET, bcaps_msk, bcaps_val);
    383          }
    384          
    385          //-------------------------------------------------------------------------------------------------
    386          //! @brief     reset the Ri' for US to notice the HDCP failure
    387          //-------------------------------------------------------------------------------------------------
    388          
    389          void SiiDrvRxHdcpResetRi( void )
    390          {
    391          	//uint8_t tempVal;
    392          	//tempVal = SiiRegRead(REG_HDCP_STAT);
    393          
    394          	SiiRegWrite(REG_HDCPCTRL, BIT_CLEAR_RI);
    395          	//SiiRegWrite(REG_HDCP_STAT, tempVal);
    396          }
    397          //-------------------------------------------------------------------------------------------------
    398          //! @brief      Initialize repeater for operation in the requested mode.
    399          //!
    400          //! @param[in]  repeaterMode    - true: initialize as a repeater, false: initialize as a sink
    401          //! @return     true: success
    402          //-------------------------------------------------------------------------------------------------
    403          
    404          bool_t SiiDrvRepeaterEnable ( bool_t repeaterMode )
    405          {
    406          	uint8_t intrMask = 0;
    407          
    408          	SiiDrvRepeaterSetBcapsRepeaterBits(repeaterMode);
    409          
    410          	//find out the active input mask
    411          	intrMask = 0x01<<(4 + inputPort[pipeNumber]);
    412          	SiiRegModify(REG_INT_ENABLE_IP2, intrMask, repeaterMode? SET_BITS : CLEAR_BITS);
    413          
    414          	//turn on SCDT mask here too
    415          	if (pipeNumber == 0)
    416          	{
    417          		SiiRegModify(REG_INT_ENABLE_2, BIT_SCDT_CHG, repeaterMode? SET_BITS : CLEAR_BITS);
    418                  SiiRegModify(REG_INT_ENABLE_P1, BIT_MP_AV_MUTE_MASK | BIT_MP_AV_UNMUTE_MASK, repeaterMode? SET_BITS : CLEAR_BITS);
    419          	}
    420          	else
    421          	{
    422          		SiiRegModify(REG_INT_ENABLE_2, BIT_RP_SCDT_CHG, repeaterMode? SET_BITS : CLEAR_BITS);
    423                  SiiRegModify(REG_INT_ENABLE_P1, BIT_RP_AV_MUTE_MASK, repeaterMode? SET_BITS : CLEAR_BITS);
    424                  SiiRegModify(REG_INT_ENABLE_P2, BIT_RP_AV_UNMUTE_MASK, repeaterMode? SET_BITS : CLEAR_BITS);
    425          	}
    426          
    427          	//none pipe related, shared for all the inputs
    428          	SiiRegModify(REG_INT_ENABLE_IP2, BIT_DECRYPT, repeaterMode? SET_BITS : CLEAR_BITS);
    429          
    430              return( true );
    431          }
    432          
    433          
    434          
    435          //-------------------------------------------------------------------------------------------------
    436          //! @brief      Fill the Ksv to Ksv FIFO.
    437          //! @param[in]  p_data- KSV data
    438          //!				length- KSV length
    439          //-------------------------------------------------------------------------------------------------
    440          
    441          void SiiDrvRepeaterFillUsKsvFifo(const uint8_t *p_data, uint16_t length)
    442          {
    443          	SiiRegWriteBlock(REG_KSV_FIFO, p_data, length);
    444          }
    445          
    446          
    447          
    448          //-------------------------------------------------------------------------------------------------
    449          //! @brief      Returns if the main port authentication starts
    450          //-------------------------------------------------------------------------------------------------
    451          
    452          bool_t SiiDrvRepeaterMainPortAuthChanged(void)
    453          {
    454          	bool_t changeIntr = false;
    455          	bool_t result = false;
    456          	uint8_t regVal;
    457          
    458          	regVal=SiiRegRead( REG_INT_STATUS_IP2 )& MSK_AUTH_CHG_P0_P3;
    459          	changeIntr = regVal & (0x01<<(4 + inputPort[pipeNumber]));
    460          	if (changeIntr)
    461          	{
    462          		SiiRegWrite(REG_INT_STATUS_IP2, regVal);
    463          	}
    464          	if (changeIntr)
    465          	{
    466          		result = SiiRegRead(GetRegName(REG_MP_STATE)) & BIT_AUTHENED_STATUS;
    467          	}
    468          
    469          #ifdef NONE_REPT_WITH_TX_ON
    470          	result = false;
    471          #endif
    472          	return result;
    473          
    474          }
    475          
    476          //-------------------------------------------------------------------------------------------------
    477          //! @brief      Returns if the Decryption state change interrupt happened
    478          //-------------------------------------------------------------------------------------------------
    479          
    480          bool_t SiiDrvRepeaterAnyInputDecryptionChanged(void)
    481          {
    482          	bool_t result = false;
    483          
    484          	//all the input share one interrupt
    485          	if ( SiiRegRead( REG_INT_STATUS_IP2 ) & BIT_DECRYPT )
    486          	{
    487          		result = true;
    488          		SiiRegWrite( REG_INT_STATUS_IP2, BIT_DECRYPT );
    489          	}
    490          #ifdef NONE_REPT_WITH_TX_ON
    491          	result = false;
    492          #endif
    493          	return result;
    494          
    495          }
    496          
    497          //-------------------------------------------------------------------------------------------------
    498          //! @brief      Returns if the main port AV MUTE status changed, and what it changes to
    499          //
    500          //-------------------------------------------------------------------------------------------------
    501          
    502          bool_t SiiDrvRepeaterMainPortAvMuteChanged(bool_t *muteOn)
    503          {
    504          	bool_t result = false;
    505          	uint8_t regVal;
    506          	uint8_t regVal1;
    507          	uint8_t regMuteBit = 0x01;
    508          	uint8_t regUnMuteBit = 0x02;
    509          
    510          	if (pipeNumber == 0)
    511          	{
    512          		regVal = SiiRegRead( REG_INT_STATUS_P1 )& (BIT_MP_AV_MUTE | BIT_MP_AV_UNMUTE);
    513          		if (regVal)
    514          		{
    515          			SiiRegWrite(REG_INT_STATUS_P1, regVal);
    516          		}
    517          		regVal = regVal >> 4;
    518          	}
    519          	else
    520          	{
    521          		regVal1 = SiiRegRead( REG_INT_STATUS_P2 )& BIT_RP_AV_UNMUTE;
    522          		if (regVal1)
    523          		{
    524          			SiiRegWrite(REG_INT_STATUS_P2, regVal1);
    525          		}
    526          		regVal = SiiRegRead( REG_INT_STATUS_P1 )& BIT_RP_AV_MUTE;
    527          		if (regVal)
    528          		{
    529          			SiiRegWrite(REG_INT_STATUS_P1, regVal);
    530          		}
    531          		regVal = (regVal >> 7) | (regVal1 << 1);
    532          	}
    533          
    534          	if (regVal)
    535          	{
    536          		if ((regVal & regMuteBit)&&(regVal & regUnMuteBit)) //both set
    537          		{
    538          			if (SiiDrvRepeaterIsUsMuteClr())
    539          			{
    540          				*muteOn = OFF;
    541          			}
    542          			else
    543          			{
    544          				*muteOn = ON;
    545          			}
    546          		}
    547          		else if (regVal & regMuteBit) //mute
    548          		{
    549          			*muteOn = ON;
    550          		}
    551          		else //unmute
    552          		{
    553          			*muteOn = OFF;
    554          		}
    555          		result = true;
    556          	}
    557          
    558          	return result;
    559          
    560          }
    561          
    562          //-------------------------------------------------------------------------------------------------
    563          //! @brief      check if the US cleared the AVMUTE
    564          //! @return  	true: clear
    565          //!				false: set
    566          //-------------------------------------------------------------------------------------------------
    567          
    568          bool_t SiiDrvRepeaterIsUsMuteClr(void)
    569          {
    570          	uint8_t mute;
    571          
    572          	mute = SiiRegRead(GetRegName(REG_MP_GCP_STATUS));
    573          	if ((( mute & BIT_GCP_MUTE) == 0) || ( mute & BIT_GCP_UNMUTE) )
    574          	{
    575          		return true;
    576          	}
    577          	else
    578          	{
    579          		return false;
    580          	}
    581          
    582          	return true;
    583          }
    584          
    585          //-------------------------------------------------------------------------------------------------
    586          //! @brief      get the active input port
    587          //! @return  	port number
    588          //-------------------------------------------------------------------------------------------------
    589          
    590          uint8_t SiiDrvRepeaterGetSelectedPort( void )
    591          {
    592          	return inputPort[pipeNumber];
    593          }
    594          
    595          
    596          //-------------------------------------------------------------------------------------------------
    597          //! @brief      check if the US input is HMD mode
    598          //! @return  	true: HMDI
    599          //!				false: DVI
    600          //-------------------------------------------------------------------------------------------------
    601          
    602          bool_t SiiDrvRepeaterInputIsHdmi(void)
    603          {
    604          	return true; //not used, pass through
    605          }
    606          
    607          //-------------------------------------------------------------------------------------------------
    608          //! @brief      check if the US input mode changed
    609          //! @return  	true: changed
    610          //!				false: no change
    611          //-------------------------------------------------------------------------------------------------
    612          
    613          bool_t SiiDrvRepeaterInputModeChange( void )
    614          {
    615          	return false;
    616          }
    617          
    618          
    619          //-------------------------------------------------------------------------------------------------
    620          //! @brief      change the active input source
    621          //! @param[in]  portIndex - active input index
    622          //-------------------------------------------------------------------------------------------------
    623          
    624          void SiiDrvRepeaterActiveInputSet(uint8_t portIndex)
    625          {
    626          	uint8_t intrMask = 0;
    627          
    628          	//enable the HDCP change interrupt mask, will clear when Tx cable out
    629          	//same for both mode. Only care the active input.
    630          	//clear the old port
    631          
    632          	intrMask = 0x01<<(4 + inputPort[pipeNumber]);
    633          	SiiRegModify(REG_INT_ENABLE_IP2, intrMask, CLEAR_BITS);
    634          
    635          
    636          	//set the new port
    637          	intrMask = 0x01<<(4 + portIndex);
    638          	SiiRegModify(REG_INT_ENABLE_IP2, intrMask, SET_BITS);
    639          
    640          	if (currentTopoMode != SI_RPT_MODE_MULTIPLE_REPEATER)
    641          	{
    642          		inputPortToChange = true;
    643          	}
    644          	else
    645          	{
    646          		SiiDrvRepeaterSetBcapsRepeaterBits(false);//clear the old port rep bit
    647          	}
    648          
    649          	inputPort[pipeNumber] = portIndex;
    650          }
    651          
    652          //------------------------------------------------------------------------------
    653          // Function:    SiiDrvRepeaterNewPortAuthed
    654          // Description: In the instaPort mode, new input port is decrypted or not
    655          //              if yes, need to start HDCP on the Tx
    656          //------------------------------------------------------------------------------
    657          
    658          bool_t SiiDrvRepeaterNewPortAuthed( void )
    659          {
    660          	if ( SiiDrvRepeaterMainPortAuthed() /*&& inputPortToChange*/ )
    661          	{
    662          		inputPortToChange = false;
    663          		return true;
    664          	}
    665          	return false;
    666          
    667          }
    668          //------------------------------------------------------------------------------
    669          // Function:    SiiDrvRepeaterProcessInterrupts
    670          // Description: set the flag when interrupt comes
    671          //              these interrupts are used in repeater only
    672          //------------------------------------------------------------------------------
    673          
    674          void SiiDrvRepeaterInterruptsSet(bool_t qOn)
    675          {
    676          	intStatus[pipeNumber] = qOn;
    677          }
    678          //------------------------------------------------------------------------------
    679          // Function:    SiiDrvRepeaterResChngStatusSet
    680          // Description: set the flag when resolution change interrupt comes
    681          //              The interrupt is processed elsewhere too.
    682          //------------------------------------------------------------------------------
    683          
    684          void SiiDrvRepeaterResChngStatusSet(bool_t qOn)
    685          {
    686          #if (SII_NUM_PIPE == 1)
    687          	if(pipeNumber == 0)
    688          #endif
    689          		resChngStatus[pipeNumber] = qOn;
    690          }
    691          
    692          //------------------------------------------------------------------------------
    693          // Function:    SiiDrvRepeaterResChngStatusGet
    694          // Description: get the status of resolution change interrupt flag read previously
    695          //              The interrupt is processed elsewhere too.
    696          //------------------------------------------------------------------------------
    697          
    698          bool_t SiiDrvRepeaterResChngStatusGet(void)
    699          {
    700              return (resChngStatus[pipeNumber]);
    701          }
    702          //------------------------------------------------------------------------------
    703          // Function:    SiiDrvRepeaterProcessInterrupts
    704          // Description: set the flag when interrupt comes
    705          //------------------------------------------------------------------------------
    706          bool_t SiiDrvRepeaterGetInterruptsOn(void)
    707          {
    708          	return intStatus[pipeNumber];
    709          }
    710          
    711          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  GetRegName
       24  SiiDrvRepeaterActiveInputSet
             24 -> SiiDrvRepeaterSetBcapsRepeaterBits
             24 -> SiiRegModify
       16  SiiDrvRepeaterAnyInputDecryptionChanged
             16 -> SiiRegRead
             16 -> SiiRegWrite
       24  SiiDrvRepeaterEnable
             24 -> SiiDrvRepeaterSetBcapsRepeaterBits
             24 -> SiiRegModify
        0  SiiDrvRepeaterFillUsKsvFifo
              0 -> SiiRegWriteBlock
        0  SiiDrvRepeaterGetInterruptsOn
        0  SiiDrvRepeaterGetSelectedPort
        0  SiiDrvRepeaterInit
              0 -> SiiRegWrite
        0  SiiDrvRepeaterInputIsHdmi
        0  SiiDrvRepeaterInputModeChange
        0  SiiDrvRepeaterInstanceSet
        0  SiiDrvRepeaterInterruptsSet
        8  SiiDrvRepeaterIsRxHotPlugAsserted
              8 -> SiiPlatformMHLCDSensePinGet
              8 -> SiiRegRead
        8  SiiDrvRepeaterIsUsMuteClr
              8 -> GetRegName
              8 -> SiiRegRead
       16  SiiDrvRepeaterMainPortAuthChanged
             16 -> GetRegName
             16 -> SiiRegRead
             16 -> SiiRegWrite
        8  SiiDrvRepeaterMainPortAuthed
              8 -> GetRegName
              8 -> SiiRegRead
       24  SiiDrvRepeaterMainPortAvMuteChanged
             24 -> SiiDrvRepeaterIsUsMuteClr
             24 -> SiiRegRead
             24 -> SiiRegWrite
        8  SiiDrvRepeaterNewPortAuthed
              8 -> SiiDrvRepeaterMainPortAuthed
        0  SiiDrvRepeaterResChngStatusGet
        0  SiiDrvRepeaterResChngStatusSet
        8  SiiDrvRepeaterRxHdcpReset
              8 -> SiiDrvRepeaterSetUsBstatus
        8  SiiDrvRepeaterRxSyncIntr
              8 -> SiiRegRead
              8 -> SiiRegWrite
        8  SiiDrvRepeaterRxSyncIsOn
              8 -> GetRegName
              8 -> SiiRegRead
        8  SiiDrvRepeaterSetBcapsFifoReady
              0 -> SiiRegModify
        8  SiiDrvRepeaterSetBcapsRepeaterBits
              0 -> SiiRegModify
              8 -> SiiRegModify
              8 -> SiiRegWrite
       16  SiiDrvRepeaterSetMode
             16 -> SiiDrvRepeaterSetBcapsRepeaterBits
        0  SiiDrvRepeaterSetUsBstatus
              0 -> SiiRegWriteBlock
        8  SiiDrvRepeaterSwitchRxHotPlug
              0 -> Debug_printDebug
              8 -> SiiDrvRxHpeStateSet
        0  SiiDrvRxHdcpResetRi
              0 -> SiiRegWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "OFF">
       4  ?<Constant "ON">
      24  ?<Constant "[ HDMI MSG] RX: HPD %s">
       2  ?<Constant {0, 0}>
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       8  ?Subroutine0
      12  ?Subroutine1
      48  GetRegName
      60  SiiDrvRepeaterActiveInputSet
      24  SiiDrvRepeaterAnyInputDecryptionChanged
     108  SiiDrvRepeaterEnable
      10  SiiDrvRepeaterFillUsKsvFifo
      10  SiiDrvRepeaterGetInterruptsOn
       8  SiiDrvRepeaterGetSelectedPort
      24  SiiDrvRepeaterInit
       4  SiiDrvRepeaterInputIsHdmi
       4  SiiDrvRepeaterInputModeChange
       8  SiiDrvRepeaterInstanceSet
      10  SiiDrvRepeaterInterruptsSet
      40  SiiDrvRepeaterIsRxHotPlugAsserted
      30  SiiDrvRepeaterIsUsMuteClr
      52  SiiDrvRepeaterMainPortAuthChanged
      18  SiiDrvRepeaterMainPortAuthed
     134  SiiDrvRepeaterMainPortAvMuteChanged
      18  SiiDrvRepeaterNewPortAuthed
      10  SiiDrvRepeaterResChngStatusGet
      10  SiiDrvRepeaterResChngStatusSet
      14  SiiDrvRepeaterRxHdcpReset
      46  SiiDrvRepeaterRxSyncIntr
      18  SiiDrvRepeaterRxSyncIsOn
      70  SiiDrvRepeaterSetBcapsFifoReady
      78  SiiDrvRepeaterSetBcapsRepeaterBits
      28  SiiDrvRepeaterSetMode
      10  SiiDrvRepeaterSetUsBstatus
      40  SiiDrvRepeaterSwitchRxHotPlug
       8  SiiDrvRxHdcpResetRi
       9  inputPort
          intStatus
          resChngStatus
          pipeNumber
          currentTopoMode
          inputPortToChange
       1  mainPort

 
  10 bytes in section .bss
  10 bytes in section .rodata
 998 bytes in section .text
 
 998 bytes of CODE  memory
  10 bytes of CONST memory
  10 bytes of DATA  memory

Errors: none
Warnings: 2

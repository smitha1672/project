###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:25:47 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\APP_SRC\Managers\UIDeviceManager.c    #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\APP_SRC\Managers\UIDeviceManager.c    #
#                    -D S4051A -D DEBUG -D FREE_RTOS -D STM32F40_41xxx -D     #
#                    USE_STM324xG_EVAL -D USE_STDPERIPH_DRIVER -D             #
#                    __ARM_CORTEX_MX__ -D IAR_ARM_CM4F -D USE_USB_OTG_FS      #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applicati #
#                    on\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Ap #
#                    plication\Obj\ --debug --endian=little --cpu=Cortex-M4   #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\UIDeviceManager.lst                                   #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\UIDeviceManager.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Projects\S4051A\APP_SRC\Managers\UIDeviceManager.c
      1          #include "Defs.h"
      2          #include "Debug.h"
      3          #include "api_typedef.h"
      4          #include "freertos_conf.h"
      5          #include "freertos_task.h"
      6          #include "freertos_typedef.h"
      7          #include "UIDeviceManager.h"
      8          #include "AudioSystemHandler.h"
      9          #include "HT68F30.h"
     10          //______________________________________________________________________________
     11          //______________________________________________________________________________
     12          
     13          /*  Sound Bar LED S3851
     14          level:0~                               35  36 ~41
     15              _____________________________________________
     16             |  *  *  *  *  *  *  *  *  *  *  *  *   *  *  |   
     17                C  B  A  9  8  7  6  5  4  3  2  1 | D  E   
     18                         LED_VOL_NUMBER              LED_FORMAT_NUMBER
     19          */
     20          #define UI_LED_START   0
     21          #define UI_LED_END     41
     22          #define UI_LEDC_START  0
     23          #define UI_LEDC_END    2
     24          #define UI_LEDB_START  3
     25          #define UI_LEDB_END    5
     26          #define UI_LEDA_START  6
     27          #define UI_LEDA_END    8
     28          #define UI_LED9_START  9
     29          #define UI_LED9_END    11
     30          #define UI_LED8_START  12
     31          #define UI_LED8_END    14
     32          #define UI_LED7_START  15
     33          #define UI_LED7_END    17
     34          #define UI_LED6_START  18
     35          #define UI_LED6_END    20
     36          #define UI_LED5_START  21
     37          #define UI_LED5_END    23
     38          #define UI_LED4_START  24
     39          #define UI_LED4_END    26
     40          #define UI_LED3_START  27
     41          #define UI_LED3_END    29
     42          #define UI_LED2_START  30
     43          #define UI_LED2_END    32
     44          #define UI_LED1_START  33
     45          #define UI_LED1_END    35
     46          
     47          #define UI_VOL_START   0
     48          #define UI_VOL_END     35
     49          #define UI_FOM_START   36
     50          #define UI_FOM_END     41
     51          #define UI_DD_START    36
     52          #define UI_DD_END      38
     53          #define UI_DTS_START   39
     54          #define UI_DTS_END     41
     55          #define UI_PRO_START   12  /*Process mode*/
     56          #define UI_PRO_END     23
     57          
     58          #define UI_CENTER_GAIN 6
     59          
     60          #define Hold1_5sec 10/*fine tuned*/
     61          #define Hold3sec   60
     62          #define UIBounceTime TASK_MSEC2TICKS(1500)
     63          //______________________________________________________________________________
     64          extern LED_OBJECT *pLED_ObjCtrl;
     65          extern AUDIO_SYSTEM_HANDLER_OBJECT *pASH_ObjCtrl;
     66          //______________________________________________________________________________
     67          /*static variable*/
     68          static bool adjustTrebleBass = FALSE;
     69          const static uint8 avdelay[]={0,2,3,5,6,8,9,11,12,14,15,17,18,20,21,23,24,26,27,29,30,32,33,35};
     70          static bool UIFirstPowerVolramp;
     71          //static variable
     72          static xUIDeviceParms mUIDevParms = 
     73          {
     74              //TRUE, //RF_Paired; 
     75              //TRUE,//BT_Paired; 
     76              DEFAULT_MUTE_STATE, //mute;
     77              DEFAULT_MASTER_GAIN //master_gain;
     78          };
     79          /*read only for this parameters*/
     80          const xUIDeviceParms *pUIDevParms = &mUIDevParms;
     81          //______________________________________________________________________________
     82          //static API header
     83          
     84          static void UIDeviceManager_handleCommand(const void *parms );
     85          void UIDeviceManager_CreateTask( void );
     86          static void UIDeviceManager_Exception_handleCommand( xUIExceptionEvents UIExcept );
     87          
     88          const UI_DEV_MANAGER_OBJECT UDM_ObjCtrl =
     89          {
     90              UIDeviceManager_CreateTask,
     91              UIDeviceManager_handleCommand,
     92              UIDeviceManager_Exception_handleCommand
     93          };
     94          
     95          const UI_DEV_MANAGER_OBJECT *pUDM_ObjCtrl = &UDM_ObjCtrl;
     96          
     97          void UIDeviceManager_SetStatus( const void *parms )
     98          {
     99              xHMISystemParams* pSystemParms = (xHMISystemParams*)parms;
    100          
    101              switch(pSystemParms->sys_event)
    102              {
    103                  case SYS_EVENT_VOLUME_SET:
    104                  {
    105                      mUIDevParms.master_gain = pSystemParms->master_gain;
    106                  }
    107                      break;
    108              
    109                  case SYS_EVENT_VOLUME_MUTE_SET:
    110                  {
    111                      mUIDevParms.mute = pSystemParms->mute;
    112                  }
    113                      break;
    114          
    115                  default:
    116                      break;
    117              }
    118          }
    119          
    120          void UIDeviceManager_Exception_SetStatus( xUIExceptionEvents UIExcept )
    121          {
    122              switch(UIExcept)
    123              {            
    124                  default:
    125                      break;
    126              }
    127          }
    128          
    129          bool UIDeviceManager_Debounce(const void *parms)
    130          {
    131              xHMISystemParams* pSystemParms = (xHMISystemParams*)parms;
    132          
    133              static portTickType xUI_BounceTick = 0;
    134              portTickType UI_BounceDuration;
    135              static xHMIAudioSysEvents LastEvent;
    136          
    137              UI_BounceDuration = ( xTaskGetTickCount( ) - xUI_BounceTick );
    138              xUI_BounceTick = xTaskGetTickCount( );
    139              
    140              bool ret = FALSE;
    141              
    142              if ( (UI_BounceDuration/portTICK_RATE_MS) < UIBounceTime )    // 1.5 sec
    143              {
    144                  switch( pSystemParms->sys_event )
    145                  {
    146                      case SYS_EVENT_VOLUME_SET:    
    147                      {
    148                          if (LastEvent == SYS_EVENT_VERSION)
    149                          {
    150                              ret = TRUE;
    151                          }
    152                      }
    153                          break;
    154                          
    155                      default:
    156                      {
    157                          ret = FALSE;
    158                      }
    159                          break;
    160                  }  
    161              }
    162              
    163              LastEvent = pSystemParms->sys_event;
    164          
    165              return ret;
    166          }
    167          
    168          static void UIDeviceManager_handleCommand( const void *parms )
    169          {
    170              uint8 holdtime;
    171              
    172              xHMISystemParams* pSystemParms = (xHMISystemParams*)parms;
    173              
    174              if ( parms == NULL )
    175                  return;        
    176              
    177              if (UIDeviceManager_Debounce(pSystemParms))
    178              {
    179                  return;
    180              }
    181              UIDeviceManager_SetStatus(pSystemParms);
    182              pLED_ObjCtrl->setStatus(pSystemParms);/*Update mute status to the driver*/
    183          
    184              UIFirstPowerVolramp = FALSE;
    185          
    186          #if 1   //Angus added it following UI 4.3 Spec 7.1.1 for bug fixing SB4051_C0-93 
    187              if(pSystemParms->sys_event == SYS_EVENT_BASS_SET ||
    188                 pSystemParms->sys_event == SYS_EVENT_TREBLE_SET)
    189              {
    190                  adjustTrebleBass = TRUE;
    191              }
    192              else if(pSystemParms->sys_event == SYS_EVENT_VOLUME_SET)
    193              {
    194                  if(adjustTrebleBass && pLED_ObjCtrl->IsControllingLED())
    195                  {
    196                      return;
    197                  }
    198                  else
    199                  {
    200                      adjustTrebleBass = FALSE;
    201                  }
    202                      
    203              }
    204              else
    205              {
    206                  adjustTrebleBass = FALSE;
    207              }
    208          #endif
    209          
    210              switch( pSystemParms->sys_event )
    211              {
    212                  case SYS_EVENT_SYSTEM_UP:
    213          #if ( configSII_DEV_953x_PORTING == 1)
    214                  case SYS_EVENT_CEC_SYSTEM_UP:
    215                  case SYS_EVENT_SAC_SYSTEM_UP:
    216                  case SYS_EVENT_ARC_SYSTEM_UP:
    217          #endif
    218                  {
    219                      pLED_ObjCtrl->LightConverter(UI_LED_START, UI_LEDC_END);
    220                      if (pSystemParms->auto_input_detect == FALSE)
    221                      {
    222                          UIFirstPowerVolramp = TRUE;
    223                      }
    224                  }
    225                      break;
    226          
    227                  case SYS_EVENT_SYSTEM_DOWN:
    228                  {
    229                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    230                  }
    231                      break;    
    232          
    233                  case SYS_EVENT_SEL_SRC:
    234                  case SYS_EVENT_AUTO_SEL_SRC:
    235                  {
    236                      if (pSystemParms->sys_event==SYS_EVENT_SEL_SRC)
    237                      {
    238                          holdtime = Hold1_5sec;    
    239                      }
    240                      else
    241                      {
    242                          holdtime = Hold3sec;
    243                      }
    244                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);/* Clean formate led */
    245                      if (pSystemParms->input_src<=5)
    246                      {
    247                          /*Smith fixes bug: when AUX1 is enum 0, and (0-1) is negative value, it makes system crash*/
    248                          pLED_ObjCtrl->BlinkFadeToDarkConverter((pSystemParms->input_src-AUDIO_SOURCE_AUX1)*6,(pSystemParms->input_src-AUDIO_SOURCE_AUX1)*6+5,holdtime,3,2); 
    249                      }
    250                      else if (pSystemParms->input_src>5 && pSystemParms->input_src<=10)
    251                      {
    252                          pLED_ObjCtrl->BlinkFadeToDarkConverter(UI_LED_START,(pSystemParms->input_src-AUDIO_SOURCE_AUX1-5)*6+11,holdtime,3,2);
    253                          pLED_ObjCtrl->CleanLED(6,(pSystemParms->input_src-5)*6+5,0,FALSE);
    254                      }    
    255                  }
    256                      break;
    257          
    258                  case SYS_EVENT_VOLUME_SET:
    259                  {
    260                      if( pSystemParms->master_gain==0)
    261                      {
    262                          pLED_ObjCtrl->BreathConverter( UI_LED_START, UI_LEDC_END);
    263                      }
    264                      else
    265                      {
    266                          if (pSystemParms->mute ==FALSE)
    267                          {
    268                              pLED_ObjCtrl->FadeToDarkConverter( UI_LED_START, pSystemParms->master_gain,Hold1_5sec,TRUE,FALSE,TRUE);
    269                          }
    270                          else
    271                          {
    272                              pLED_ObjCtrl->BreathClear(UI_LED_START,pSystemParms->master_gain);
    273                          }
    274                      }
    275                  }
    276                      break;
    277          
    278                  case SYS_EVENT_VOLUME_MUTE_SET:
    279                  {
    280                      if (pSystemParms->mute == TRUE)
    281                      {
    282                          pLED_ObjCtrl->BreathConverter( UI_LED_START, pSystemParms->master_gain); 
    283                      }
    284                      else
    285                      {
    286                          if( pSystemParms->master_gain==0)
    287                          {
    288                              pLED_ObjCtrl->BreathConverter( UI_LED_START, UI_LEDC_END);
    289                          }
    290                          else
    291                          {
    292                              pLED_ObjCtrl->FadeToDarkConverter( UI_LED_START , pSystemParms->master_gain,Hold1_5sec,TRUE,FALSE,TRUE); 
    293                          }
    294                      }
    295                  }
    296                      break;
    297          
    298                  case SYS_EVENT_BASS_SET:
    299                  {
    300                      if(pSystemParms->bass_gain>UI_CENTER_GAIN)
    301                      {
    302                          pLED_ObjCtrl->FadeToDarkConverter( 18+ 3*(pSystemParms->bass_gain-7),20 + 3*(pSystemParms->bass_gain-7) ,Hold1_5sec,TRUE,TRUE,TRUE);
    303                      }
    304                      else if (pSystemParms->bass_gain<UI_CENTER_GAIN)
    305                      {
    306                          pLED_ObjCtrl->FadeToDarkConverter( 3*(pSystemParms->bass_gain) ,2+ 3*(pSystemParms->bass_gain),Hold1_5sec,TRUE,TRUE,TRUE);
    307                      }
    308                      else
    309                      {
    310                          pLED_ObjCtrl->FadeToDarkConverter( 15 , 20 ,Hold1_5sec,TRUE,TRUE,TRUE);
    311                      }
    312                      
    313                  }
    314                      break;
    315          
    316                  case SYS_EVENT_TREBLE_SET:
    317                  {
    318                      if(pSystemParms->treble_gain>UI_CENTER_GAIN)
    319                      {
    320                          pLED_ObjCtrl->FadeToDarkConverter( 18+ 3*(pSystemParms->treble_gain-7),20 + 3*(pSystemParms->treble_gain-7) ,Hold1_5sec,TRUE,TRUE,TRUE);
    321                      }
    322                      else if (pSystemParms->treble_gain<UI_CENTER_GAIN)
    323                      {
    324                          pLED_ObjCtrl->FadeToDarkConverter( 3*(pSystemParms->treble_gain) ,2+ 3*(pSystemParms->treble_gain),Hold1_5sec,TRUE,TRUE,TRUE);
    325                      }
    326                      else
    327                      {
    328                          pLED_ObjCtrl->FadeToDarkConverter( 15 , 20 ,Hold1_5sec,TRUE,TRUE,TRUE);
    329                      }
    330                      
    331                  }
    332                      break;
    333                      
    334                  case SYS_EVENT_SUB_SET:
    335                  {
    336                      if(pSystemParms->sub_gain>UI_CENTER_GAIN)
    337                      {
    338                          pLED_ObjCtrl->FadeToDarkConverter( 18+ 3*(pSystemParms->sub_gain-7),20 + 3*(pSystemParms->sub_gain-7) ,Hold1_5sec,TRUE,TRUE,TRUE);
    339                      }
    340                      else if (pSystemParms->sub_gain<UI_CENTER_GAIN)
    341                      {
    342                          pLED_ObjCtrl->FadeToDarkConverter( 3*(pSystemParms->sub_gain) ,2+ 3*(pSystemParms->sub_gain),Hold1_5sec,TRUE,TRUE,TRUE);
    343                      }
    344                      else
    345                      {
    346                          pLED_ObjCtrl->FadeToDarkConverter( 15 , 20 ,Hold1_5sec,TRUE,TRUE,TRUE);
    347                      }
    348                      
    349                  }
    350                      break;
    351          
    352                  case SYS_EVENT_CENTER_SET:
    353                  {
    354                      if(pSystemParms->center_gain>UI_CENTER_GAIN)
    355                      {
    356                          pLED_ObjCtrl->FadeToDarkConverter( 18+ 3*(pSystemParms->center_gain-7),20 + 3*(pSystemParms->center_gain-7) ,Hold1_5sec,TRUE,TRUE,TRUE);
    357                      }
    358                      else if (pSystemParms->center_gain<UI_CENTER_GAIN)
    359                      {
    360                          pLED_ObjCtrl->FadeToDarkConverter( 3*(pSystemParms->center_gain) ,2+ 3*(pSystemParms->center_gain),Hold1_5sec,TRUE,TRUE,TRUE);
    361                      }
    362                      else
    363                      {
    364                          pLED_ObjCtrl->FadeToDarkConverter( 15 , 20 ,Hold1_5sec,TRUE,TRUE,TRUE);
    365                      }
    366                      
    367                  }
    368                      break;
    369                      
    370                  case SYS_EVENT_LSRS_SET:
    371                  {
    372                      if(pSystemParms->LsRs_gain>UI_CENTER_GAIN)
    373                      {
    374                          pLED_ObjCtrl->FadeToDarkConverter( 18+ 3*(pSystemParms->LsRs_gain-7),20 + 3*(pSystemParms->LsRs_gain-7) ,Hold1_5sec,TRUE,TRUE,TRUE);
    375                      }
    376                      else if (pSystemParms->LsRs_gain<UI_CENTER_GAIN)
    377                      {
    378                          pLED_ObjCtrl->FadeToDarkConverter( 3*(pSystemParms->LsRs_gain) ,2+ 3*(pSystemParms->LsRs_gain),Hold1_5sec,TRUE,TRUE,TRUE);
    379                      }
    380                      else
    381                      {
    382                          pLED_ObjCtrl->FadeToDarkConverter( 15 , 20 ,Hold1_5sec,TRUE,TRUE,TRUE);
    383                      }
    384                      
    385                  }
    386                      break;
    387                          
    388                  case SYS_EVENT_BALANCE_SET:
    389                  {
    390                      if(pSystemParms->balance>UI_CENTER_GAIN)
    391                      {
    392                          pLED_ObjCtrl->FadeToDarkConverter( 18+ 3*(pSystemParms->balance-7),20 + 3*(pSystemParms->balance-7) ,Hold1_5sec,TRUE,TRUE,TRUE);
    393                      }
    394                      else if (pSystemParms->balance<UI_CENTER_GAIN)
    395                      {
    396                          pLED_ObjCtrl->FadeToDarkConverter( 3*(pSystemParms->balance) ,2+ 3*(pSystemParms->balance),Hold1_5sec,TRUE,TRUE,TRUE);
    397                      }
    398                      else
    399                      {
    400                          pLED_ObjCtrl->FadeToDarkConverter( 15 , 20 ,Hold1_5sec,TRUE,TRUE,TRUE);
    401                      }
    402                      
    403                  }
    404                      break;
    405                      
    406                  case SYS_EVENT_SRS_TRUVOL_SET:
    407                  {
    408                      pLED_ObjCtrl->FadeToDarkConverter( UI_PRO_START,UI_PRO_END,30,pSystemParms->srs_truvol,TRUE,TRUE);
    409                  }
    410                      break;
    411                      
    412                  case SYS_EVENT_SRS_TSHD_SET:
    413                  {
    414                      pLED_ObjCtrl->FadeToDarkConverter( UI_PRO_START,UI_PRO_END,30,pSystemParms->srs_tshd,TRUE,TRUE);
    415                  }
    416                      break;
    417          
    418                  case SYS_EVENT_VIZ_RMT_SET:
    419                  {
    420                      pLED_ObjCtrl->FadeToDarkConverter( UI_PRO_START,UI_PRO_END,30,pSystemParms->vizio_rmt,TRUE,TRUE);
    421                  }
    422                      break;
    423          
    424                  case SYS_EVENT_APD_SET:
    425                  {
    426                      pLED_ObjCtrl->FadeToDarkConverter( UI_PRO_START,UI_PRO_END,30,pSystemParms->apd,TRUE,TRUE);
    427                  }
    428                      break;
    429          
    430                  case SYS_EVENT_NIGHT_MODE_SET:
    431                  {
    432                      pLED_ObjCtrl->FadeToDarkConverter( UI_PRO_START,UI_PRO_END,Hold1_5sec,pSystemParms->night_mode,TRUE,TRUE);
    433                  }
    434                      break;
    435          
    436                  case SYS_EVENT_AV_DELAY_SET:
    437                  {
    438                      pLED_ObjCtrl->FadeToDarkConverter( UI_VOL_START ,avdelay[ pSystemParms->av_delay],Hold1_5sec,TRUE,FALSE,TRUE);
    439                  }
    440                      break;
    441                      
    442                  case SYS_EVENT_SYSTEM_RESET:
    443                  {
    444                      #if 1   //Angus added , for HT68F30 auto setting timeout led by timeout state .
    445                      pLED_ObjCtrl->UpdateDemoTimeOutState(FALSE);
    446                      #endif
    447                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    448                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,12, 3,FALSE);   
    449                  }
    450                      break;
    451                      
    452                  case SYS_EVENT_VERSION:
    453                  {
    454                      pLED_ObjCtrl->Version();
    455                  }
    456                      break;
    457                      
    458                  case SYS_EVENT_FAC_AQ_CTRL_ON:
    459                  {
    460                      TRACE_DEBUG((0,"SYS_EVENT_FAC_AQ_CTRL_ON"));
    461                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    462                      pLED_ObjCtrl->Set(UI_LED4_START, UI_LED3_END); 
    463                  }
    464                      break;
    465          
    466                  case SYS_EVENT_FAC_AQ_CTRL_OFF:
    467                  {
    468                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    469              }
    470                      break;  
    471                      
    472                  case SYS_EVENT_FAC_ROUTE_CTRL_INITIAL:
    473          {
    474                      //pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    475                      //pLED_ObjCtrl->LightConverter(UI_VOL_START, UI_VOL_END,5, 4,FALSE); 
    476                  }
    477                      break;
    478                      
    479                  case SYS_EVENT_FAC_ROUTE_CTRL_FL_FR:
    480                  {
    481                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    482                      pLED_ObjCtrl->Set(UI_LED8_START, UI_LED8_END); /*FR LED5*/
    483                      pLED_ObjCtrl->Set(UI_LEDB_START, UI_LEDB_END); /*FL LED2*/
    484                  }
    485                      break;
    486              
    487                  case SYS_EVENT_FAC_ROUTE_CTRL_RR_RL:
    488                  {
    489                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    490                      pLED_ObjCtrl->Set(UI_LED7_START, UI_LED7_END);/*RR LED6*/ 
    491                      pLED_ObjCtrl->Set(UI_LEDC_START, UI_LEDC_END);/*RL LED1*/
    492                  }
    493                      break;
    494                      
    495                  case SYS_EVENT_FAC_ROUTE_CTRL_CENTER:
    496                  {
    497                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    498                      pLED_ObjCtrl->Set(UI_LEDA_START, UI_LED9_END);
    499                  }
    500                      break;
    501                      
    502                  case SYS_EVENT_FAC_ROUTE_CTRL_LFE0:
    503                  {
    504                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    505                      pLED_ObjCtrl->Set(UI_LEDC_START, UI_LED7_END);/*RR LED6*/ 
    506                  }
    507                      break;
    508          
    509                  case SYS_EVENT_FAC_ROUTE_CTRL_FL:
    510                  {
    511                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    512                      pLED_ObjCtrl->Set(UI_LED8_START, UI_LED8_END); /*FL LED5*/
    513                  }
    514                      break;
    515                      
    516                  case SYS_EVENT_FAC_ROUTE_CTRL_FR:
    517                  {
    518                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    519                      pLED_ObjCtrl->Set(UI_LEDB_START, UI_LEDB_END); /*FR LED2*/
    520                  }
    521                      break;
    522          
    523                  case SYS_EVENT_FAC_ROUTE_CTRL_RR: 
    524                  {
    525                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    526                      pLED_ObjCtrl->Set(UI_LEDC_START, UI_LEDC_END); /*RR LED1*/
    527                  }
    528                      break;
    529                      
    530                  case SYS_EVENT_FAC_ROUTE_CTRL_RL:
    531                  {
    532                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    533                      pLED_ObjCtrl->Set(UI_LED7_START, UI_LED7_END); /*RL LED6*/
    534                  }
    535                      break;
    536                      
    537                  case SYS_EVENT_FAC_ROUTE_CTRL_FL_FR_CENTER:
    538                  {
    539                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    540                      pLED_ObjCtrl->Set(UI_LEDA_START, UI_LED9_END); /*LRF3 LED4*/
    541                      pLED_ObjCtrl->Set(UI_LED8_START, UI_LED8_END); /*FR LED5*/
    542                      pLED_ObjCtrl->Set(UI_LEDB_START, UI_LEDB_END); /*FL LED2*/
    543                  }
    544                      break;
    545              
    546                  case SYS_EVENT_FAC_ROUTE_CTRL_RR_RL_WOOFER:
    547                  {
    548                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    549                      pLED_ObjCtrl->Set(UI_LEDC_START, UI_LEDC_END);
    550                      pLED_ObjCtrl->Set(UI_LED7_START, UI_LED7_END);        
    551                      pLED_ObjCtrl->Set(UI_LEDA_START, UI_LED9_END); 
    552                  }
    553                      break;    
    554          
    555                  case SYS_EVENT_FAC_ROUTE_CTRL_DISABLE:    
    556                  {
    557                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    558                      pLED_ObjCtrl->LightConverter(UI_VOL_START, 0);
    559                  }
    560                      break;
    561          
    562                  case SYS_EVENT_FAC_ALL_LED:
    563                  {
    564                      pLED_ObjCtrl->LightConverter(UI_LED_START, UI_LED_END);
    565                  }
    566                      break;
    567          
    568                  case SYS_EVENT_FAC_ALL_LED_DD:
    569                  {
    570                      pLED_ObjCtrl->LightConverter(UI_LED_START, UI_VOL_END);
    571                      pLED_ObjCtrl->LightConverter(UI_DD_START, UI_DD_END);
    572                  }
    573                      break;
    574          
    575                  case SYS_EVENT_FAC_ALL_LED_DTS:
    576                  {
    577                      pLED_ObjCtrl->LightConverter(UI_LED_START, UI_VOL_END);
    578                      pLED_ObjCtrl->LightConverter(UI_DTS_START, UI_DTS_END);
    579                  }
    580                      break;    
    581          
    582                  case SYS_EVENT_FAC_LED1:
    583                  {
    584                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    585                      pLED_ObjCtrl->LightConverter(UI_LEDC_START, UI_LEDC_END);
    586                  }
    587                      break;  
    588          
    589                  case SYS_EVENT_FAC_LED2:
    590                  {
    591                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    592                      pLED_ObjCtrl->LightConverter(UI_LEDB_START, UI_LEDB_END);
    593                  }
    594                      break; 
    595          
    596                  case SYS_EVENT_FAC_LED3:
    597                  {
    598                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    599                      pLED_ObjCtrl->LightConverter(UI_LEDA_START, UI_LEDA_END);
    600                  }
    601                      break; 
    602                      
    603                  case SYS_EVENT_FAC_LED4:
    604                  {   
    605                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    606                      pLED_ObjCtrl->LightConverter(UI_LED9_START, UI_LED9_END);
    607                  }
    608                      break;       
    609          
    610                  case SYS_EVENT_FAC_LED5:
    611                  {   
    612                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    613                      pLED_ObjCtrl->LightConverter(UI_LED8_START, UI_LED8_END);
    614                  }
    615                      break;  
    616          
    617                  case SYS_EVENT_FAC_LED6:
    618                  {
    619                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    620                      pLED_ObjCtrl->LightConverter(UI_LED7_START, UI_LED7_END);
    621                  }
    622                      break;  
    623          
    624                  case SYS_EVENT_FAC_LED7:
    625                  {
    626                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    627                      pLED_ObjCtrl->LightConverter(UI_LED6_START, UI_LED6_END);
    628                  }
    629                      break;  
    630          
    631                  case SYS_EVENT_FAC_LED8:
    632                  {
    633                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    634                      pLED_ObjCtrl->LightConverter(UI_LED5_START, UI_LED5_END);
    635                  }
    636                      break;  
    637          
    638                  case SYS_EVENT_FAC_LED9:
    639                  {
    640                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    641                      pLED_ObjCtrl->LightConverter(UI_LED4_START, UI_LED4_END);
    642                  }
    643                      break;  
    644          
    645                  case SYS_EVENT_FAC_LED10:
    646                  {
    647                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    648                      pLED_ObjCtrl->LightConverter(UI_LED3_START, UI_LED3_END);
    649                  }
    650                      break;            
    651          
    652                  case SYS_EVENT_FAC_LED11:
    653                  {
    654                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    655                      pLED_ObjCtrl->LightConverter(UI_LED2_START, UI_LED2_END);
    656                  }
    657                      break;  
    658          
    659                  case SYS_EVENT_FAC_LED12:
    660                  {
    661                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    662                      pLED_ObjCtrl->LightConverter(UI_LED1_START, UI_LED1_END);
    663                  }
    664                      break;  
    665          
    666                  case SYS_EVENT_FAC_LED13:
    667                  {
    668                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    669                      pLED_ObjCtrl->LightConverter(UI_DD_START, UI_DD_END);
    670                  }
    671                      break;  
    672          
    673                  case SYS_EVENT_FAC_LED14:
    674                  {
    675                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    676                      pLED_ObjCtrl->LightConverter(UI_DTS_START, UI_DTS_END);
    677                  }
    678                      break;  
    679          
    680                  case SYS_EVENT_FAC_NO_LED:
    681                  {
    682                      pLED_ObjCtrl->DarkConverter(UI_LED_START,UI_LED_END);
    683                  }
    684                      break;
    685          
    686                  default:
    687                      break;
    688              }
    689          }
    690          /* TODO: change to Q */
    691          static void UIDeviceManager_Exception_handleCommand( xUIExceptionEvents UIExcept)
    692          {
    693              static xUIExceptionEvents Last_UIExcept = UI_EVENT_NONE;
    694          
    695          #if 1   //Angus added , for HT68F30 auto setting timeout led by timeout state .
    696              if(UIExcept == UI_EVENT_TIMEOUT_DEMO)
    697              {
    698                  pLED_ObjCtrl->UpdateDemoTimeOutState(TRUE);
    699              }
    700              else if(UIExcept == UI_EVENT_EXIT_TIMEOUT_DEMO || UIExcept == UI_EVENT_EXIT_DEMO ||
    701                         UIExcept == UI_EVENT_ENTER_DEMO1 || UIExcept == UI_EVENT_ENTER_DEMO2 || 
    702                         UIExcept == UI_EVENT_ENTER_DEMO3)
    703              {
    704                  pLED_ObjCtrl->UpdateDemoTimeOutState(FALSE);
    705              }
    706          #endif
    707              
    708              switch( UIExcept )
    709              {
    710                  case UI_Event_VolRAMP: 
    711                  {
    712                      if (UIFirstPowerVolramp)
    713                      {
    714                          pLED_ObjCtrl->FadeToDarkConverter( UI_LED_START, pASH_ObjCtrl->getRampVolvalue(),Hold1_5sec,TRUE,FALSE,TRUE);
    715                      }            
    716                  }
    717                      break;    
    718          
    719                  case UI_Event_VolRAMP_TARGET: 
    720                  {
    721                      if (UIFirstPowerVolramp)
    722                      {
    723                          pLED_ObjCtrl->FadeToDarkConverter( UI_LED_START, pASH_ObjCtrl->getTargetVol(),Hold1_5sec,TRUE,FALSE,TRUE);
    724                          UIFirstPowerVolramp = FALSE;
    725                      }
    726                  }
    727                      break;   
    728          
    729                  case UI_EVENT_EXIT_TIMEOUT_DEMO:
    730                  case UI_EVENT_NORMAL:
    731                  {
    732                      if (pUIDevParms->mute == FALSE)
    733                      {
    734                          pLED_ObjCtrl->LightConverter(UI_VOL_START, 0);
    735                      }
    736                  }
    737                      break;
    738          
    739                  case UI_EVENT_PCM:
    740                  {
    741                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    742                  }
    743                      break;
    744                      
    745                  case UI_EVENT_DOLBY:
    746                  {
    747                      pLED_ObjCtrl->DarkConverter(UI_DTS_START,UI_DTS_END);
    748                      pLED_ObjCtrl->FadeToDarkConverter( UI_DD_START,UI_DD_END,Hold3sec,TRUE,FALSE,FALSE);/*UI4.2*/
    749                  }
    750                      break;
    751                      
    752                  case UI_EVENT_FAC_DOLBY:
    753                  {
    754                      pLED_ObjCtrl->DarkConverter(UI_DTS_START,UI_DTS_END);   
    755                      pLED_ObjCtrl->Set( UI_DD_START,UI_DD_END);
    756                  }
    757                      break;
    758          
    759                  case UI_EVENT_DTS:
    760                  {
    761                      pLED_ObjCtrl->DarkConverter(UI_DD_START,UI_DD_END);
    762                      pLED_ObjCtrl->FadeToDarkConverter( UI_DTS_START,UI_DTS_END,Hold3sec,TRUE,FALSE,FALSE);/*UI4.2*/
    763                  }
    764                      break;
    765          
    766                  case UI_EVENT_FAC_DTS:
    767                  {
    768                      pLED_ObjCtrl->DarkConverter( UI_DD_START,UI_DD_END);
    769                      pLED_ObjCtrl->Set( UI_DTS_START,UI_DTS_START);
    770                  }
    771                      break;
    772          
    773                  case UI_EVENT_PRG_REMOTE_LEARNING:
    774                  {
    775                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    776                      pLED_ObjCtrl->ScanningConverter(UI_VOL_START, UI_VOL_END);  
    777                  }
    778                      break;
    779                  case UI_EVENT_BT_PAIRING:
    780                  { 
    781                      if(UIExcept!=Last_UIExcept)
    782                      {
    783                          pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    784                          pLED_ObjCtrl->ScanningConverter(UI_VOL_START, UI_VOL_END);  
    785                      }
    786                  }
    787                      break;
    788                  case UI_EVENT_TIMEOUT_DEMO:
    789                  {
    790                      if(UIExcept!=Last_UIExcept)
    791                      {
    792                          pLED_ObjCtrl->StepsConverter(UI_VOL_START, UI_VOL_END);
    793                      }
    794          
    795                  }
    796                  break;
    797                  case UI_EVENT_RF_PAIRING:
    798                  {
    799                      if(UIExcept!=Last_UIExcept)
    800                      {
    801                          pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    802                          pLED_ObjCtrl->ScanningConverter(UI_VOL_START, UI_VOL_END);
    803                      }
    804                  }
    805                      break;
    806                     
    807                  case UI_EVENT_BT_CLEAN_DEVICE:
    808                  {
    809                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    810                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 3,TRUE);
    811                  }
    812                      break;
    813                     
    814                  case UI_EVENT_BT_PAIRED:
    815                  {
    816                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    817                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 2,TRUE); 
    818                  }
    819                      break;
    820          
    821                  case UI_EVENT_RF_PAIRED:
    822                  {
    823                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    824                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 3,TRUE); 
    825                  }
    826                      break;
    827           
    828                  case UI_EVENT_PRG_REMOTE_LEARNED:
    829                  {
    830                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    831                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 2,TRUE); 
    832                  }
    833                      break;
    834          
    835                  case UI_EVENT_ENTER_DEMO1:
    836                  {
    837                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    838                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 1,TRUE); 
    839                  }
    840                      break;
    841          
    842                  case UI_EVENT_ENTER_DEMO2:
    843                  {
    844                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    845                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 2,TRUE); 
    846                  }
    847                      break;
    848          
    849                  case UI_EVENT_ENTER_DEMO3:
    850                  {
    851                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    852                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 3,TRUE); 
    853                  }
    854                      break;
    855          
    856                  case UI_EVENT_EXIT_DEMO:
    857                  {
    858                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    859                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,5, 4,FALSE); 
    860                  }
    861                      break;
    862                      
    863                  case UI_EVENT_ULD_ERROR:    
    864                  {
    865                      pLED_ObjCtrl->DarkConverter(UI_FOM_START,UI_FOM_END);
    866                      pLED_ObjCtrl->Flashing(UI_VOL_START, UI_VOL_END,3, 99,TRUE); 
    867                  }
    868                      break;     
    869                      
    870                  default:
    871                      break;     
    872              }
    873              Last_UIExcept == UIExcept;
    874          }
    875          
    876          void UIDeviceManager_CreateTask( void )
    877          {    
    878              pLED_ObjCtrl->CreateTask();
    879          }
    880          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  UIDeviceManager_CreateTask
              0 -- Indirect call
       16  UIDeviceManager_Debounce
             16 -> xTaskGetTickCount
        0  UIDeviceManager_Exception_SetStatus
       24  UIDeviceManager_Exception_handleCommand
              0 -- Indirect call
             24 -- Indirect call
        0  UIDeviceManager_SetStatus
       32  UIDeviceManager_handleCommand
              0 -- Indirect call
             32 -- Indirect call
             32 -> Debug_printDebug
             32 -> UIDeviceManager_Debounce
             32 -> UIDeviceManager_SetStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "SYS_EVENT_FAC_AQ_CTRL_ON">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       8  ?Subroutine0
      12  ?Subroutine1
       8  ?Subroutine2
       8  ?Subroutine3
       8  ?Subroutine4
      10  ?Subroutine5
       8  LastEvent
          xUI_BounceTick
       1  Last_UIExcept
      12  UDM_ObjCtrl
       8  UIDeviceManager_CreateTask
      48  UIDeviceManager_Debounce
       2  UIDeviceManager_Exception_SetStatus
     392  UIDeviceManager_Exception_handleCommand
      28  UIDeviceManager_SetStatus
     976  UIDeviceManager_handleCommand
       8  adjustTrebleBass
          UIFirstPowerVolramp
          pUIDevParms
      24  avdelay
       4  mUIDevParms
       4  pUDM_ObjCtrl

 
     9 bytes in section .bss
    16 bytes in section .data
    12 bytes in section .rodata
 1 580 bytes in section .text
 
 1 580 bytes of CODE  memory
    12 bytes of CONST memory
    25 bytes of DATA  memory

Errors: none
Warnings: 2

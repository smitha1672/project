###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     11/Nov/2014  19:24:32 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\tx\si_tx_audi #
#                    o.c                                                      #
#    Command line =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Libraries\AMT_Drivers\sii953x\component\tx\si_tx_audi #
#                    o.c -D S4051A -D DEBUG -D FREE_RTOS -D STM32F40_41xxx    #
#                    -D USE_STM324xG_EVAL -D USE_STDPERIPH_DRIVER -D          #
#                    __ARM_CORTEX_MX__ -D IAR_ARM_CM4F -D USE_USB_OTG_FS      #
#                    -lcN C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Applicati #
#                    on\List\ -o C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\Output\S4051A\Ap #
#                    plication\Obj\ --debug --endian=little --cpu=Cortex-M4   #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\inc\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\Include\ -I          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\ -I         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\inc\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\USB_HD\ #
#                    src\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2 #
#                    \DevCode\2\Projects\S4051A\EWARM\..\App_SRC\SERVICES\wav #
#                    ePlayer\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\App_SRC\Managers #
#                    \ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\De #
#                    vCode\2\Projects\S4051A\EWARM\..\App_SRC\Dispatchers\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMSIS\Inc #
#                    lude\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K #
#                    2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32F4xx_St #
#                    dPeriph_Driver\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\FreeRTOS\Source\portable\IAR\ARM_CM4F\ -I     #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\FreeRTOS\Sou #
#                    rce\include\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librar #
#                    ies\FreeRTOS\Source\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\STM32_USB_OTG_Driver\inc\ -I                 #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB_De #
#                    vice_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\STM32_USB #
#                    _HOST_Library\Core\inc\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\Third_Party\ #
#                    efsl\inc\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\ #
#                    15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilities #
#                    \Third_Party\fat_fs\inc\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Utilities\mainstream_v #
#                    1\stm32f411\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projec #
#                    ts\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Utilit #
#                    ies\mainstream_v1\stm32f411\it\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    EXT_FLASH\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects #
#                    \15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Librarie #
#                    s\AMT_Drivers\TAS5727\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\TAS5711\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    TAS5707\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\TAS5713\ -I C:\Users\tony.tsou\Desktop\AmTRA #
#                    N\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\. #
#                    .\Libraries\AMT_Drivers\CS49844\ -I                      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    CS8422\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15 #
#                    _K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\A #
#                    MT_Drivers\CS5346\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\OTI3368\ -I                        #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    HT68F30\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\1 #
#                    5_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Libraries\ #
#                    AMT_Drivers\BTM640\ -I C:\Users\tony.tsou\Desktop\AmTRAN #
#                    \Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\.. #
#                    \Libraries\AMT_Drivers\sii953x\application\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_ipv\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cbus\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cdc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_cec\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_arc\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_diag\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_msw\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\application\app_osd\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ -I C:\Users\tony.tsou\Desktop\AmTRAN\ #
#                    Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\ #
#                    Libraries\AMT_Drivers\sii953x\component\tx\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\repeater_avr\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\video_tables\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\audio_rx\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\edid_tx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\debugger_hdmigear\ -I                  #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cbus\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\component\rtpi\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cdc\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\cec_manager\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\component\thx\ -I                            #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\ipv\ -I C:\Users\tony.tsou\Desktop\AmT #
#                    RAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\.. #
#                    \..\Libraries\AMT_Drivers\sii953x\component\osd\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_switch\ -I                         #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\component\cec_system_audio_control\ -I           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\ -I C:\Users\tony.tsou\Desktop\AmTRAN\Pro #
#                    jects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\..\..\Lib #
#                    raries\AMT_Drivers\sii953x\driver\audio_mix_drv\ -I      #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\sii953x_drv\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cra_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\matrix_sw_drv\ #
#                     -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\Dev #
#                    Code\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Driv #
#                    ers\sii953x\driver\nvram_sram_drv\ -I                    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\audio_rx_drv\  #
#                    -I C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevC #
#                    ode\2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drive #
#                    rs\sii953x\driver\repeater_avr_drv\ -I                   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\gpio_drv\ -I                              #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\tpg_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\cbus_drv\ -I   #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\cpi_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\arc_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\driver\osd_drv\ -I C:\Users\tony.tsou\Desktop\Am #
#                    TRAN\Projects\15_K2\DevCode\2\Projects\S4051A\EWARM\..\. #
#                    .\..\Libraries\AMT_Drivers\sii953x\driver\ipv_drv\ -I    #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\ir_remote\ -I                       #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\eeprom\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\timer\ -I                           #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\hal\i2c\ -I                             #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\osal\timer\ -I                          #
#                    C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\..\..\Libraries\AMT_Drivers\ #
#                    sii953x\platform\board\ -Ohz -I "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Li #
#                    st\si_tx_audio.lst                                       #
#    Object file  =  C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode #
#                    \2\Projects\S4051A\EWARM\..\Output\S4051A\Application\Ob #
#                    j\si_tx_audio.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\tony.tsou\Desktop\AmTRAN\Projects\15_K2\DevCode\2\Libraries\AMT_Drivers\sii953x\component\tx\si_tx_audio.c
      1          //************************************************************************************************
      2          //! @file   si_tx_audio.c
      3          //! @brief  Audio control
      4          //
      5          // No part of this work may be reproduced, modified, distributed,
      6          // transmitted, transcribed, or translated into any language or computer
      7          // format, in any form or by any means without written permission of
      8          // Silicon Image, Inc., 1060 East Arques Avenue, Sunnyvale, California 94085
      9          //
     10          // Copyright 2002-2010, Silicon Image, Inc.  All rights reserved.
     11          //************************************************************************************************/
     12          
     13          #include <string.h>
     14          #include "si_tx_component_internal.h"
     15          #include "si_tx_audio.h"
     16          #include "si_tx_info_frm.h"
     17          #include "si_video_tables.h"
     18          #include "si_drv_tpi_system.h"
     19          #include "si_edid_tx_internal.h"
     20          
     21          #define AUDIO_STATUS_CHANNEL_LEN 5
     22          #define CHST1 0
     23          #define CHST2 1
     24          #define CHST3 2
     25          #define CHST4 3
     26          #define CHST5 4
     27          
     28          
     29          //-------------------------------------------------------------------------------------------------
     30          // Module Instance Data
     31          //-------------------------------------------------------------------------------------------------
     32          
     33          TxAudioInstanceRecord_t AudioInstRec[SII_NUM_TX];
     34          TxAudioInstanceRecord_t *pAudio = &AudioInstRec[0];
     35          
     36          
     37          //-------------------------------------------------------------------------------------------------
     38          //  Local service functions
     39          //-------------------------------------------------------------------------------------------------
     40          
     41          
     42          //-------------------------------------------------------------------------------------------------
     43          //! @brief      Check if the current input audio mode is SPDIF or DSD.
     44          //!
     45          //! @retval     true  - SPDIF or DSD,
     46          //! @retval     false - other modes
     47          //-------------------------------------------------------------------------------------------------
     48          
     49          static bool_t IsSpdifOrDsd(void)
     50          {
     51              bool_t isSpdifDsd;
     52          
     53              switch (pAudio->audioSrcMode)
     54              {
     55                  case SI_TX_AUDIO_SRC_SPDIF:
     56                  case SI_TX_AUDIO_SRC_DSD_L0:
     57                  case SI_TX_AUDIO_SRC_DSD_L1:
     58                      isSpdifDsd = true;
     59                      break;
     60                  default:
     61                      isSpdifDsd = false;
     62              }
     63              return isSpdifDsd;
     64          }
     65          
     66          //-------------------------------------------------------------------------------------------------
     67          //! @brief      Translates audio source mode into I2S group index.
     68          //!
     69          //! @param[in]  source - audio source.
     70          //!
     71          //! @return     I2S group index.
     72          //-------------------------------------------------------------------------------------------------
     73          
     74          static txAudioSrcGrp_t I2sSourceGroupGet(txAudioSrc_t source)
     75          {
     76              txAudioSrcGrp_t group;
     77          
     78              switch (source)
     79              {
     80                  default:
     81                  case SI_TX_AUDIO_SRC_I2S_L0:
     82                  case SI_TX_AUDIO_SRC_I2S_L1:
     83                      group = TX_AUDIO_SRC_GRP_I2S;
     84                      break;
     85          
     86                  case SI_TX_AUDIO_SRC_DSD_L0:
     87                  case SI_TX_AUDIO_SRC_DSD_L1:
     88                      group = TX_AUDIO_SRC_GRP_DSD;
     89                      break;
     90          
     91                  case SI_TX_AUDIO_SRC_HBRA:
     92                      group = TX_AUDIO_SRC_GRP_HBR;
     93          
     94              }
     95          
     96              return group;
     97          }
     98          
     99          //-------------------------------------------------------------------------------------------------
    100          //! @brief      Return maximum allowed I2S sample rate per channel for current video mode.
    101          //!
    102          //! @return     Sample frequency in kHz.
    103          //-------------------------------------------------------------------------------------------------
    104          
    105          static audioSampleRate_t MaxSampleRateForCurrentVideoModeGet(void)
    106          {
    107              uint8_t maxSampleRate = 192; // 192 kHz is maximum Fs in HDMI 1.4a per I2S channel
    108              audioSampleRate_t smpRate = SI_TX_AUDIO_SMP_RATE_192_KHZ;
    109              uint8_t videoId = TxVideoFormatIdGet();
    110          
    111              if (videoId != SI_VIDEO_MODE_NON_STD)
    112              {
    113                  // It is theoretically possible that Standard Definition resolutions
    114                  // have Deep Color mode and in this case it would be possible
    115                  // to pass higher rate audio, but it is not typical case.
    116                  // It is OK to ignore it and use pixel clock instead of TMDS clock
    117                  // for such checking here.
    118                  maxSampleRate = VideoModeTable[videoId].MaxAudioSR8Ch;
    119              }
    120          
    121              // Convert into frequency codes
    122              switch (maxSampleRate)
    123              {
    124                  case 32:
    125                      smpRate = SI_TX_AUDIO_SMP_RATE_32_KHZ;
    126                      break;
    127                  case 44:
    128                      smpRate = SI_TX_AUDIO_SMP_RATE_44_KHZ;
    129                      break;
    130                  case 48:
    131                      smpRate = SI_TX_AUDIO_SMP_RATE_48_KHZ;
    132                      break;
    133                  case 88:
    134                      smpRate = SI_TX_AUDIO_SMP_RATE_88_KHZ;
    135                      break;
    136                  case 96:
    137                      smpRate = SI_TX_AUDIO_SMP_RATE_96_KHZ;
    138                      break;
    139                  case 176:
    140                      smpRate = SI_TX_AUDIO_SMP_RATE_176_KHZ;
    141                      break;
    142                  case 192:
    143                      smpRate = SI_TX_AUDIO_SMP_RATE_192_KHZ;
    144                      break;
    145              }
    146          
    147              return smpRate;
    148          }
    149          
    150          
    151          
    152          //-------------------------------------------------------------------------------------------------
    153          //! @brief      Configure I2S interface to properly capture the input audio samples.
    154          //-------------------------------------------------------------------------------------------------
    155          #if (SI_TX_AUDIO_I2S_IN_BUS == ENABLE)
    156          static void I2sConfigSet(void)
    157          {
    158              bool_t isHbr = (pAudio->audioSrcMode == SI_TX_AUDIO_SRC_HBRA);
    159              bool_t isAudioEncoded = (pAudio->audioFormat.encoding > SI_TX_AUDIO_ENC_PCM);
    160              txAudioSrcGrp_t srcGroupIndex = I2sSourceGroupGet(pAudio->audioSrcMode);
    161          
    162              if (pAudio->audioSrcMode != SI_TX_AUDIO_SRC_SPDIF)
    163              {
    164                  SiiDrvTpiAudioI2sConfigSet(&(pAudio->audioInterface[srcGroupIndex]), isHbr, isAudioEncoded);
    165              }
    166              else
    167              {
    168                  // Use stream header information for SPDIF audio
    169                  pAudio->audioFormat.smpRate = SI_TX_AUDIO_SMP_RATE_UNKNOWN;
    170                  pAudio->audioFormat.smpSize = SI_TX_AUDIO_SMP_SIZE_UNKNOWN;
    171              }
    172          
    173              SiiDrvTpiAudioSampleConfigSet(pAudio->audioFormat.smpSize, pAudio->audioFormat.smpRate, isHbr);
    174          }
    175          #endif
    176          
    177          //-------------------------------------------------------------------------------------------------
    178          //! @brief      Connect multi-channel audio to I2S pipes and enable those pipes for capturing.
    179          //!
    180          //!             At least one I2S channel should be enabled
    181          //!             (Equal to 2 DSD channels enabling).
    182          //-------------------------------------------------------------------------------------------------
    183          
    184          static void AudioChannelsMap(void)
    185          {
    186              audioSpkAlloc_t channelsMap;
    187          
    188              switch (pAudio->audioSrcMode)
    189              {
    190                  case SI_TX_AUDIO_SRC_HBRA:
    191                      channelsMap = SI_TX_AUDIO_SPK_FL_FR_LFE_FC_RL_RR_RC;
    192                      break;
    193          
    194                  case SI_TX_AUDIO_SRC_DSD_L1:
    195                  case SI_TX_AUDIO_SRC_I2S_L1:
    196                      // I2S or DSD input
    197                      // Assume that I2S is in PCM format, otherwise it should not
    198                      // have layout1 bit set.
    199                      // In any case, if I2S input is encoded and layout1 is set,
    200                      // there is no harm because encoded stream uses only I2S
    201                      // channel 0 which is always enabled. In case of encoded signal
    202                      // it does not matter what other channel carry.
    203                      // The only case when encoded audio takes more than one I2S channel
    204                      // is HBRA and all input audio channels are enabled in this case.
    205                      channelsMap = pAudio->audioFormat.spkMap;
    206                      break;
    207          
    208                  default:
    209                      channelsMap = SI_TX_AUDIO_SPK_FL_FR; // Stereo option is valid for SPDIF and L0 layouts
    210              }
    211          
    212              SiiDrvTpiAudioI2sPinsToFifoAssign(channelsMap, pAudio->isDownSampled);
    213          
    214          }
    215          
    216          //-------------------------------------------------------------------------------------------------
    217          //! @brief      Check if PCM stereo audio with higher sample rates can be downsampled to basic audio
    218          //!             should such sample rates be not supported by downstream.
    219          //-------------------------------------------------------------------------------------------------
    220          
    221          static void AudioDownsamplingUpdate(void)
    222          {
    223              bool_t isFsSupported = true;
    224          
    225              // Check if stereo downsamping is an applicable option (2ch PCM, Fs > 48kHz)
    226              if ((pAudio->audioFormat.encoding == SI_TX_AUDIO_ENC_PCM) && (pAudio->audioFormat.channelCount <= 2))
    227              {
    228                  switch (pAudio->audioFormat.smpRate)
    229                  {
    230                      case SI_TX_AUDIO_SMP_RATE_88_KHZ:
    231                          isFsSupported = SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_PCM_FS_88_KHZ);
    232                          break;
    233                      case SI_TX_AUDIO_SMP_RATE_96_KHZ:
    234                          isFsSupported = SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_PCM_FS_96_KHZ);
    235                          break;
    236                      case SI_TX_AUDIO_SMP_RATE_176_KHZ:
    237                          isFsSupported = SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_PCM_FS_176_KHZ);
    238                          break;
    239                      case SI_TX_AUDIO_SMP_RATE_192_KHZ:
    240                          isFsSupported = SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_PCM_FS_192_KHZ);
    241                          break;
    242                      default:
    243                          isFsSupported = true;
    244                          break;
    245                  }
    246              }
    247              pAudio->isDownSampled = !isFsSupported;
    248          }
    249          
    250          
    251          //-------------------------------------------------------------------------------------------------
    252          //! @brief      The function verifies if audio transmission is permitted
    253          //!             according to the current status.
    254          //!
    255          //! @retval     true  - if audio transmission is allowed,
    256          //! @retval     false - otherwise.
    257          //-------------------------------------------------------------------------------------------------
    258          
    259          static bool_t IsAudioTransmissionAllowed(void)
    260          {
    261          	bool_t isAllowed = false;
    262          	txAudioSrc_t audioSrcMode = pAudio->audioSrcMode;
    263          	txAudioSrcGrp_t audioSrcGroup = I2sSourceGroupGet(audioSrcMode);
    264          
    265          	BEGIN_TEST
    266          	{
    267          		PASS_IF(pAudio->audioSrcMode != SI_TX_AUDIO_SRC_NONE);
    268          		PASS_IF(SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_AUDIO));
    269          		PASS_IF(SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_AI) || (!pAudio->isAudioContentProtected))
    270          		PASS_IF(TxIsOutInHdmiMode());
    271          
    272          
    273          
    274          		if(audioSrcGroup == TX_AUDIO_SRC_GRP_I2S)
    275          		{
    276          			if(pAudio->audioFormat.encoding > SI_TX_AUDIO_ENC_PCM)
    277          			{
    278          			    PASS_IF(SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_ENCODED_AUDIO));
    279          			}
    280          		}
    281          		// Note: since it is not possible to know if audio signal coming in
    282          		// through SPDIF is PCM or encoded, we cannot prevent encoded
    283          		// stream going into PCM-only sink.
    284          		// For this reason, it is always preferable using I2S input,
    285          		// so the verification above works.
    286          
    287          		if(audioSrcMode == SI_TX_AUDIO_SRC_I2S_L1)
    288          		{
    289          			PASS_IF(pAudio->audioFormat.smpRate <= MaxSampleRateForCurrentVideoModeGet());
    290          		}
    291          		else if(audioSrcGroup == TX_AUDIO_SRC_GRP_DSD)
    292          		{
    293          			// if incoming stream is DSD (1 bit audio)
    294          		    PASS_IF(SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_1BIT_AUDIO)); // be sure DS device support it
    295          		}
    296          		else if(audioSrcMode == SI_TX_AUDIO_SRC_HBRA)
    297          		{
    298          			// if incoming stream is HBR (High Bit Ratio) Audio
    299          		    PASS_IF(SiiEdidTxDoesDsSupport(SI_EDID_TX_SUPPORT_HBR_AUDIO)); // be sure DS device support it
    300          		}
    301          
    302          		isAllowed = true; // if all tests have passed
    303          	}
    304          	END_TEST
    305          
    306          	return isAllowed;
    307          }
    308          
    309          static audioSampleRate_t SmpRateToDownsampledSmpRate(audioSampleRate_t smpRate)
    310          {
    311              audioSampleRate_t outRate = smpRate;
    312          
    313              if (pAudio->isDownSampled)
    314              {
    315                  switch (smpRate)
    316                  {
    317                      default:
    318                          outRate = smpRate;
    319                          break;
    320                      case SI_TX_AUDIO_SMP_RATE_88_KHZ:
    321                      case SI_TX_AUDIO_SMP_RATE_176_KHZ:
    322                          outRate = SI_TX_AUDIO_SMP_RATE_44_KHZ; // 88.2 - DS -> 44.1
    323                          break;
    324                      case SI_TX_AUDIO_SMP_RATE_96_KHZ:
    325                          outRate = SI_TX_AUDIO_SMP_RATE_32_KHZ; // 96 - DS -> 32
    326                          break;
    327                      case SI_TX_AUDIO_SMP_RATE_192_KHZ:
    328                          outRate = SI_TX_AUDIO_SMP_RATE_48_KHZ; // 192 - DS -> 48
    329                          break;
    330                  }
    331              }
    332              return outRate;
    333          }
    334          
    335          //-------------------------------------------------------------------------------------------------
    336          //! @brief      Create an Audio Info Frame based on provided audio settings and update it
    337          //!             in the chip.
    338          //!
    339          //! @param[in]  param - meaning
    340          //!
    341          //! @return     What's returned.
    342          //! @retval     value - meaning
    343          //-------------------------------------------------------------------------------------------------
    344          
    345          static void AudioInfoFrameUpdate(void)
    346          {
    347              uint8_t aAudioInfoFrame[AUDIO_INFO_FRAME_LENGTH];
    348          
    349              memset(aAudioInfoFrame, 0, AUDIO_INFO_FRAME_LENGTH); // Initialize the info frame
    350          
    351              // Fill up the packet's header
    352              aAudioInfoFrame[0] = 0x84; // Packet type
    353              aAudioInfoFrame[1] = 0x01; // Version
    354              aAudioInfoFrame[2] = 0x0A; // Length of Audio Info Frame (embedded in the packet)
    355              aAudioInfoFrame[3] = 0;    // Check sum will be calculated by IF sending function
    356          
    357              aAudioInfoFrame[4] = ((pAudio->audioFormat.channelCount > 1) && (pAudio->audioFormat.channelCount <= 8 )) ?
    358                                    (pAudio->audioFormat.channelCount - 1) : 0; // PB 1
    359          
    360              if (I2sSourceGroupGet(pAudio->audioSrcMode) == TX_AUDIO_SRC_GRP_DSD)
    361              {
    362                  aAudioInfoFrame[5] = 2 << 2;  // PB 2 (SF2-0) - 44.1 kHz for DSD
    363              }
    364              else
    365              {
    366                  aAudioInfoFrame[5] = 0; // Sample Rate in AIF must be 0 for SPDIF & PCM
    367              }
    368          
    369          
    370              aAudioInfoFrame[7] =  pAudio->audioFormat.spkMap; // PB 4
    371              aAudioInfoFrame[8] = (pAudio->audioFormat.isDwnMxInhibit ? 0x8 : 0)
    372                                | ((pAudio->audioFormat.lShift & 0xF) << 3)
    373                                |  (pAudio->audioFormat.lfePbLevel & 0x3); // PB 5
    374          
    375              TxInfoPacketSet(SI_INFO_FRAME_AUDIO, aAudioInfoFrame);
    376          }
    377          
    378          
    379          static uint8_t SmpRateToStatChanCodeConvert(audioSampleRate_t smpRate)
    380          {
    381              uint8_t scCode;
    382          
    383              switch(smpRate)
    384              {
    385                  default:
    386                  case SI_TX_AUDIO_SMP_RATE_UNKNOWN:
    387                      scCode = 0x1;
    388                      break;
    389                  case SI_TX_AUDIO_SMP_RATE_32_KHZ:
    390                      scCode = 0x3;
    391                      break;
    392                  case SI_TX_AUDIO_SMP_RATE_44_KHZ:
    393                      scCode = 0x0;
    394                      break;
    395                  case SI_TX_AUDIO_SMP_RATE_48_KHZ:
    396                      scCode = 0x2;
    397                      break;
    398                  case SI_TX_AUDIO_SMP_RATE_88_KHZ:
    399                      scCode = 0x8;
    400                      break;
    401                  case SI_TX_AUDIO_SMP_RATE_96_KHZ:
    402                      scCode = 0xA;
    403                      break;
    404                  case SI_TX_AUDIO_SMP_RATE_176_KHZ:
    405                      scCode = 0xC;
    406                      break;
    407                  case SI_TX_AUDIO_SMP_RATE_192_KHZ: // Mean 768 kHz for HBR Audio (4 channels by 192 kHz)
    408                      scCode = 0xE;
    409                      break;
    410              }
    411          
    412              return scCode;
    413          }
    414          
    415          
    416          static uint8_t SmpSizeToStatChanCodeConvert(audioSampleSize_t smpSize)
    417          {
    418              uint8_t scCode;
    419          
    420              switch (smpSize)
    421              {
    422                  default:
    423                  case SI_TX_AUDIO_SMP_SIZE_UNKNOWN:
    424                      scCode = 0x0;
    425                      break;
    426                  case SI_TX_AUDIO_SMP_SIZE_16_BIT:
    427                      scCode = 0x2;
    428                      break;
    429                  case SI_TX_AUDIO_SMP_SIZE_20_BIT:
    430                      scCode = 0xA;
    431                      break;
    432                  case SI_TX_AUDIO_SMP_SIZE_24_BIT:
    433                      scCode = 0xB;
    434                      break;
    435              }
    436          
    437              return scCode;
    438          }
    439          
    440          //-------------------------------------------------------------------------------------------------
    441          //! @brief      Create status channel frame and update it in the chip.
    442          //-------------------------------------------------------------------------------------------------
    443          
    444          static void AudioStatusChannelUpdate(void)
    445          {
    446              uint8_t aStatusChannel[AUDIO_STATUS_CHANNEL_LEN];
    447          
    448              // Set status channel data for all modes except SPDIF and DSD
    449              // as they provide all status information in headers
    450              if (!IsSpdifOrDsd())
    451              {
    452          
    453                  // Fill up the status channel data
    454                  aStatusChannel[CHST1] = (pAudio->audioFormat.encoding > SI_TX_AUDIO_ENC_PCM) ? 2 : 0;
    455                  aStatusChannel[CHST2] = pAudio->audioFormat.catCode;
    456                  aStatusChannel[CHST3] = (pAudio->audioFormat.srcNumber & 0xF)
    457                                       | ((pAudio->audioFormat.channelCount & 0xF) << 4);
    458                  aStatusChannel[CHST4] = SmpRateToStatChanCodeConvert(SmpRateToDownsampledSmpRate(pAudio->audioFormat.smpRate))
    459                                       | ((pAudio->audioFormat.clkAccuracy & 0xF) << 4);
    460                  aStatusChannel[CHST5] = SmpSizeToStatChanCodeConvert(pAudio->audioFormat.smpSize)
    461                                       | ((pAudio->audioFormat.origSmpRate & 0xF) << 4);
    462          
    463                  SiiDrvTpiAudioStatusChannelSet(aStatusChannel);
    464              }
    465          }
    466          
    467          
    468          //-------------------------------------------------------------------------------------------------
    469          //! @brief      Verifies if audio transmission is permitted in current state of the transmitter
    470          //!             and downstream device. Depending on the result of the check, audio transmission
    471          //!             gets enabled or disabled, audio info frame and status channel information get
    472          //!             updated, and hardware capture logic gets configured.
    473          //-------------------------------------------------------------------------------------------------
    474          
    475          static void UpdateAll(void)
    476          {
    477          	if(IsAudioTransmissionAllowed())
    478          	{
    479          	    // Verify if Audio downsampling is necessary
    480          	    AudioDownsamplingUpdate();
    481          
    482          	    // Update accompanying information
    483          	    AudioInfoFrameUpdate();
    484                  AudioStatusChannelUpdate();
    485          
    486                  // Set audio capture parameters
    487          		AudioChannelsMap();
    488          
    489          #if (SI_TX_AUDIO_I2S_IN_BUS == ENABLE)
    490          		I2sConfigSet();
    491          #endif
    492          
    493          		// Set interface type and enable audio transmission
    494                  SiiDrvTpiAudioInterfaceSet(pAudio->audioSrcMode);
    495          
    496          		// ISRC1/2 packets could be skipped if the packets were received
    497          		// before audio gets enabled.
    498          		// Request receiving them again.
    499          		if(!pAudio->isAudioEnabled) // if audio transition from disabled to enabled
    500          		{
    501          		    TxInfoPacketTransmissionEnable(SI_INFO_FRAME_ISRC1, true);
    502          		    TxInfoPacketTransmissionEnable(SI_INFO_FRAME_ISRC2, true);
    503          		}
    504          
    505          		pAudio->isAudioEnabled = true;
    506          	}
    507          	else
    508          	{
    509                  if (pAudio->audioSrcMode != SI_TX_AUDIO_SRC_NONE)
    510                  {
    511                      DEBUG_PRINT(TX_MSG_DBG, "Unsupported Audio Format (%d)! Audio disabled.\n", pAudio->audioSrcMode);
    512                  }
    513          		// Turn audio off
    514                  TxInfoPacketTransmissionEnable(SI_INFO_FRAME_ISRC1, false);
    515                  TxInfoPacketTransmissionEnable(SI_INFO_FRAME_ISRC2, false);
    516          		TxInfoPacketTransmissionEnable(SI_INFO_FRAME_AUDIO, false);
    517          		SiiDrvTpiAudioDisable();
    518          		pAudio->isAudioEnabled = false;
    519          	}
    520          }
    521          
    522          
    523          //-------------------------------------------------------------------------------------------------
    524          //  TX Audio API functions
    525          //-------------------------------------------------------------------------------------------------
    526          
    527          //-------------------------------------------------------------------------------------------------
    528          //! @brief      Select Tx device instance in multi-transmitter system.
    529          //!
    530          //! @param[in]  device_idx - zero based index of an instance.
    531          //-------------------------------------------------------------------------------------------------
    532          
    533          #if SII_NUM_TX > 1
    534          void TxAudioInstanceSet(uint8_t deviceIndex)
    535          {
    536              if(deviceIndex < SII_NUM_TX)
    537              {
    538                  pAudio = &AudioInstRec[deviceIndex];
    539              }
    540          }
    541          #endif // SII_NUM_TX > 1
    542          
    543          
    544          //-------------------------------------------------------------------------------------------------
    545          //! @brief      Initialization of Audio module
    546          //-------------------------------------------------------------------------------------------------
    547          
    548          void TxAudioInit(void)
    549          {
    550              memset(pAudio, 0, sizeof(TxAudioInstanceRecord_t));
    551          }
    552          
    553          
    554          //-------------------------------------------------------------------------------------------------
    555          //! @brief      Return true if audio transmission is enabled.
    556          //-------------------------------------------------------------------------------------------------
    557          
    558          bool_t TxAudioIsTransmitting(void)
    559          {
    560          	return pAudio->isAudioEnabled;
    561          }
    562          
    563          //-------------------------------------------------------------------------------------------------
    564          //! @brief      Set audio interface configuration for one of the I2S group sources.
    565          //!
    566          //!             The I2S sources are either I2S, DSD or HBRA.
    567          //!
    568          //! @param[in]  source             - audio source type,
    569          //! @param[in]  pInterfaceSettings - pointer to I2S settings.
    570          //-------------------------------------------------------------------------------------------------
    571          
    572          void TxAudioI2SConfigSet(txAudioSrc_t source, txAudioSrcConfig_t *pInterfaceSettings)
    573          {
    574              txAudioSrcGrp_t groupIndex = I2sSourceGroupGet(source);
    575              memcpy(&pAudio->audioInterface[groupIndex], pInterfaceSettings, sizeof(txAudioSrcConfig_t));
    576          }
    577          
    578          
    579          //-------------------------------------------------------------------------------------------------
    580          //! @brief      Set format of the input audio stream.
    581          //!
    582          //! @param[in]  audioSourceMode - wired audio source type,
    583          //! @param[in]  pFmt            - pointer to a structure defining audio parameters.
    584          //-------------------------------------------------------------------------------------------------
    585          
    586          void TxAudioModeSet(txAudioSrc_t audioSourceMode, audioFormat_t *pFmt)
    587          {
    588          	pAudio->audioSrcMode = audioSourceMode;
    589          	memcpy(&pAudio->audioFormat, pFmt, sizeof(audioFormat_t));
    590          
    591          	UpdateAll();
    592          }
    593          
    594          
    595          //-------------------------------------------------------------------------------------------------
    596          //! @brief      Mute/Unmute audio source.
    597          //-------------------------------------------------------------------------------------------------
    598          
    599          void TxAudioMute(bool_t isMute)
    600          {
    601              SiiDrvTpiAudioMuteSet(isMute);
    602          }
    603          
    604          
    605          
    606          //-------------------------------------------------------------------------------------------------
    607          //! @brief      Implement reaction of Audio module on content protection status change.
    608          //!
    609          //! @param[in]  isAudioProtected - true, if Audio content must be protected
    610          //-------------------------------------------------------------------------------------------------
    611          
    612          void TxAudioOnAcpPacketUpdate(bool_t isAudioProtected)
    613          {
    614          		pAudio->isAudioContentProtected = isAudioProtected;
    615          		UpdateAll();
    616          }
    617          
    618          
    619          //-------------------------------------------------------------------------------------------------
    620          //! @brief      Implement reaction of Audio module on HDMI/DMI mode transition event.
    621          //-------------------------------------------------------------------------------------------------
    622          
    623          void TxAudioOnHdmiModeChange(void)
    624          {
    625          	UpdateAll();
    626          }
    627          
    628          //-------------------------------------------------------------------------------------------------
    629          //! @brief      Update internal audio setting based on Audio InfoFrame.
    630          //!
    631          //! @param[in]  pAif - pointer to new AIF
    632          //-------------------------------------------------------------------------------------------------
    633          
    634          void TxAudioUpdateFromInfoFrame(uint8_t *pAif)
    635          {
    636              uint8_t field;
    637          
    638              if ((pAif[0] == 0x84) &&
    639                  (pAif[1] == 0x01)) // Packet type and version should be correct
    640              {
    641                  // PB 1
    642                  pAudio->audioFormat.channelCount = (pAif[4] & 0xF0) >> 4;
    643                  if (pAudio->audioFormat.channelCount > 0)
    644                  {
    645                      pAudio->audioFormat.channelCount++;
    646                  }
    647          
    648                  field =  pAif[4] & 0x07;
    649                  if ((field != SI_TX_AUDIO_ENC_UNKNOWN)  ||  (pAudio->audioSrcMode == SI_TX_AUDIO_SRC_SPDIF))
    650                  {
    651                      // Change audio encoding only if it's specified explicitly for non SPDIF audio
    652                      pAudio->audioFormat.encoding = field;
    653                  }
    654          
    655                  // PB 2
    656                  field = (pAif[5] & 0x1C) >> 2;
    657                  if ((field != SI_TX_AUDIO_SMP_RATE_UNKNOWN)  ||  (pAudio->audioSrcMode == SI_TX_AUDIO_SRC_SPDIF))
    658                  {
    659                      // Change audio sample rate only if it's specified explicitly for non SPDIF audio
    660                      pAudio->audioFormat.smpRate = field;
    661                  }
    662          
    663                  field = pAif[5] & 0x03;
    664                  if ((field != SI_TX_AUDIO_SMP_SIZE_UNKNOWN)  ||  (pAudio->audioSrcMode == SI_TX_AUDIO_SRC_SPDIF))
    665                  {
    666                      // Change audio sample rate only if it's specified explicitly for non SPDIF audio
    667                      pAudio->audioFormat.smpSize = field;
    668                  }
    669          
    670          
    671                  // PB 4
    672                  pAudio->audioFormat.spkMap = pAif[7];
    673          
    674                  // PB 5
    675                  pAudio->audioFormat.isDwnMxInhibit = (pAif[8] & 0x80) >> 7;
    676                  pAudio->audioFormat.lShift = (pAif[8] & 0x78) >> 3;
    677                  pAudio->audioFormat.lShift = pAif[8] & 0x03;
    678              }
    679          
    680              UpdateAll();
    681          }
    682          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  AudioStatusChannelUpdate
             16 -> SiiDrvTpiAudioStatusChannelSet
        0  I2sSourceGroupGet
       24  IsAudioTransmissionAllowed
             24 -> I2sSourceGroupGet
             24 -> SiiEdidTxDoesDsSupport
             24 -> TxIsOutInHdmiMode
             24 -> TxVideoFormatIdGet
        8  TxAudioI2SConfigSet
              8 -> I2sSourceGroupGet
              0 -> __aeabi_memcpy
        0  TxAudioInit
              0 -> __aeabi_memclr
        0  TxAudioIsTransmitting
        8  TxAudioModeSet
              0 -> UpdateAll
              8 -> __aeabi_memcpy
        0  TxAudioMute
              0 -> SiiDrvTpiAudioMuteSet
        0  TxAudioOnAcpPacketUpdate
              0 -> UpdateAll
        0  TxAudioOnHdmiModeChange
              0 -> UpdateAll
        8  TxAudioUpdateFromInfoFrame
              0 -> UpdateAll
       40  UpdateAll
             40 -> AudioStatusChannelUpdate
             40 -> I2sSourceGroupGet
             40 -> IsAudioTransmissionAllowed
             40 -> SiiDrvTpiAudioDisable
             40 -> SiiDrvTpiAudioI2sConfigSet
             40 -> SiiDrvTpiAudioI2sPinsToFifoAssign
             40 -> SiiDrvTpiAudioInterfaceSet
             40 -> SiiDrvTpiAudioSampleConfigSet
             40 -> SiiEdidTxDoesDsSupport
             40 -> TxInfoPacketSet
             40 -> TxInfoPacketTransmissionEnable
             40 -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
      32  AudioInstRec
     178  AudioStatusChannelUpdate
      22  I2sSourceGroupGet
     206  IsAudioTransmissionAllowed
      30  TxAudioI2SConfigSet
      10  TxAudioInit
      12  TxAudioIsTransmitting
      22  TxAudioModeSet
       4  TxAudioMute
      14  TxAudioOnAcpPacketUpdate
       2  TxAudioOnHdmiModeChange
     134  TxAudioUpdateFromInfoFrame
     380  UpdateAll
       4  pAudio

 
    32 bytes in section .bss
     4 bytes in section .data
 1 022 bytes in section .text
 
 1 022 bytes of CODE memory
    36 bytes of DATA memory

Errors: none
Warnings: 5
